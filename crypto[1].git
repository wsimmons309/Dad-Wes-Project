






<!DOCTYPE html>
<html lang="en" data-color-mode="auto" data-light-theme="light" data-dark-theme="dark" data-a11y-animated-images="system">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">
  <link rel="preconnect" href="https://github.githubassets.com" crossorigin>
  <link rel="preconnect" href="https://avatars.githubusercontent.com">

  

  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/light-0946cdc16f15.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/dark-3946c959759a.css" /><link data-color-theme="dark_dimmed" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_dimmed-9b9a8c91acc5.css" /><link data-color-theme="dark_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_high_contrast-11302a585e33.css" /><link data-color-theme="dark_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_colorblind-1a4564ab0fbf.css" /><link data-color-theme="light_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_colorblind-12a8b2aa9101.css" /><link data-color-theme="light_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_high_contrast-5924a648f3e7.css" /><link data-color-theme="light_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_tritanopia-05358496cb79.css" /><link data-color-theme="dark_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_tritanopia-aad6b801a158.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-primitives-fb1d51d1ef66.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-0e3420bbec16.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/global-9ba4c9e8442e.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/github-c7a3a0ac71d4.css" />
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/code-9271f811184f.css" />

    <meta name="optimizely-datafile" content="{&quot;groups&quot;: [], &quot;environmentKey&quot;: &quot;production&quot;, &quot;rollouts&quot;: [], &quot;typedAudiences&quot;: [], &quot;projectId&quot;: &quot;16737760170&quot;, &quot;variables&quot;: [], &quot;featureFlags&quot;: [], &quot;experiments&quot;: [], &quot;version&quot;: &quot;4&quot;, &quot;audiences&quot;: [{&quot;conditions&quot;: &quot;[\&quot;or\&quot;, {\&quot;match\&quot;: \&quot;exact\&quot;, \&quot;name\&quot;: \&quot;$opt_dummy_attribute\&quot;, \&quot;type\&quot;: \&quot;custom_attribute\&quot;, \&quot;value\&quot;: \&quot;$opt_dummy_value\&quot;}]&quot;, &quot;id&quot;: &quot;$opt_dummy_audience&quot;, &quot;name&quot;: &quot;Optimizely-Generated Audience for Backwards Compatibility&quot;}], &quot;anonymizeIP&quot;: true, &quot;sdkKey&quot;: &quot;WTc6awnGuYDdG98CYRban&quot;, &quot;attributes&quot;: [{&quot;id&quot;: &quot;16822470375&quot;, &quot;key&quot;: &quot;user_id&quot;}, {&quot;id&quot;: &quot;17143601254&quot;, &quot;key&quot;: &quot;spammy&quot;}, {&quot;id&quot;: &quot;18175660309&quot;, &quot;key&quot;: &quot;organization_plan&quot;}, {&quot;id&quot;: &quot;18813001570&quot;, &quot;key&quot;: &quot;is_logged_in&quot;}, {&quot;id&quot;: &quot;19073851829&quot;, &quot;key&quot;: &quot;geo&quot;}, {&quot;id&quot;: &quot;20175462351&quot;, &quot;key&quot;: &quot;requestedCurrency&quot;}, {&quot;id&quot;: &quot;20785470195&quot;, &quot;key&quot;: &quot;country_code&quot;}, {&quot;id&quot;: &quot;21656311196&quot;, &quot;key&quot;: &quot;opened_downgrade_dialog&quot;}], &quot;botFiltering&quot;: false, &quot;accountId&quot;: &quot;16737760170&quot;, &quot;events&quot;: [{&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;17911811441&quot;, &quot;key&quot;: &quot;hydro_click.dashboard.teacher_toolbox_cta&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18124116703&quot;, &quot;key&quot;: &quot;submit.organizations.complete_sign_up&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18145892387&quot;, &quot;key&quot;: &quot;no_metric.tracked_outside_of_optimizely&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18178755568&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.add_repo&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18180553241&quot;, &quot;key&quot;: &quot;submit.repository_imports.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18186103728&quot;, &quot;key&quot;: &quot;click.help.learn_more_about_repository_creation&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18188530140&quot;, &quot;key&quot;: &quot;test_event&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18191963644&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.transfer_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18195612788&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.import_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18210945499&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.invite_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18211063248&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.create_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18215721889&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.update_profile&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18224360785&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.dismiss&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18234832286&quot;, &quot;key&quot;: &quot;submit.organization_activation.complete&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18252392383&quot;, &quot;key&quot;: &quot;submit.org_repository.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18257551537&quot;, &quot;key&quot;: &quot;submit.org_member_invitation.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18259522260&quot;, &quot;key&quot;: &quot;submit.organization_profile.update&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18564603625&quot;, &quot;key&quot;: &quot;view.classroom_select_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18568612016&quot;, &quot;key&quot;: &quot;click.classroom_sign_in_click&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18572592540&quot;, &quot;key&quot;: &quot;view.classroom_name&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18574203855&quot;, &quot;key&quot;: &quot;click.classroom_create_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18582053415&quot;, &quot;key&quot;: &quot;click.classroom_select_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18589463420&quot;, &quot;key&quot;: &quot;click.classroom_create_classroom&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18591323364&quot;, &quot;key&quot;: &quot;click.classroom_create_first_classroom&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18591652321&quot;, &quot;key&quot;: &quot;click.classroom_grant_access&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18607131425&quot;, &quot;key&quot;: &quot;view.classroom_creation&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18831680583&quot;, &quot;key&quot;: &quot;upgrade_account_plan&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19064064515&quot;, &quot;key&quot;: &quot;click.signup&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19075373687&quot;, &quot;key&quot;: &quot;click.view_account_billing_page&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19077355841&quot;, &quot;key&quot;: &quot;click.dismiss_signup_prompt&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19079713938&quot;, &quot;key&quot;: &quot;click.contact_sales&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19120963070&quot;, &quot;key&quot;: &quot;click.compare_account_plans&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19151690317&quot;, &quot;key&quot;: &quot;click.upgrade_account_cta&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19424193129&quot;, &quot;key&quot;: &quot;click.open_account_switcher&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19520330825&quot;, &quot;key&quot;: &quot;click.visit_account_profile&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19540970635&quot;, &quot;key&quot;: &quot;click.switch_account_context&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19730198868&quot;, &quot;key&quot;: &quot;submit.homepage_signup&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19820830627&quot;, &quot;key&quot;: &quot;click.homepage_signup&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19988571001&quot;, &quot;key&quot;: &quot;click.create_enterprise_trial&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20036538294&quot;, &quot;key&quot;: &quot;click.create_organization_team&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20040653299&quot;, &quot;key&quot;: &quot;click.input_enterprise_trial_form&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20062030003&quot;, &quot;key&quot;: &quot;click.continue_with_team&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20068947153&quot;, &quot;key&quot;: &quot;click.create_organization_free&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20086636658&quot;, &quot;key&quot;: &quot;click.signup_continue.username&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20091648988&quot;, &quot;key&quot;: &quot;click.signup_continue.create_account&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20103637615&quot;, &quot;key&quot;: &quot;click.signup_continue.email&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20111574253&quot;, &quot;key&quot;: &quot;click.signup_continue.password&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20120044111&quot;, &quot;key&quot;: &quot;view.pricing_page&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20152062109&quot;, &quot;key&quot;: &quot;submit.create_account&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20165800992&quot;, &quot;key&quot;: &quot;submit.upgrade_payment_form&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20171520319&quot;, &quot;key&quot;: &quot;submit.create_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20222645674&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.discuss_your_needs&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20227443657&quot;, &quot;key&quot;: &quot;submit.verify_primary_user_email&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20234607160&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.try_enterprise&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20238175784&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.team&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20239847212&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.continue_free&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20251097193&quot;, &quot;key&quot;: &quot;recommended_plan&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20438619534&quot;, &quot;key&quot;: &quot;click.pricing_calculator.1_member&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20456699683&quot;, &quot;key&quot;: &quot;click.pricing_calculator.15_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20467868331&quot;, &quot;key&quot;: &quot;click.pricing_calculator.10_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20476267432&quot;, &quot;key&quot;: &quot;click.trial_days_remaining&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20476357660&quot;, &quot;key&quot;: &quot;click.discover_feature&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20479287901&quot;, &quot;key&quot;: &quot;click.pricing_calculator.custom_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20481107083&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.apply_teacher_benefits&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20483089392&quot;, &quot;key&quot;: &quot;click.pricing_calculator.5_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20484283944&quot;, &quot;key&quot;: &quot;click.onboarding_task&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20484996281&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.apply_student_benefits&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20486713726&quot;, &quot;key&quot;: &quot;click.onboarding_task_breadcrumb&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20490791319&quot;, &quot;key&quot;: &quot;click.upgrade_to_enterprise&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20491786766&quot;, &quot;key&quot;: &quot;click.talk_to_us&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20494144087&quot;, &quot;key&quot;: &quot;click.dismiss_enterprise_trial&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20499722759&quot;, &quot;key&quot;: &quot;completed_all_tasks&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20500710104&quot;, &quot;key&quot;: &quot;completed_onboarding_tasks&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20513160672&quot;, &quot;key&quot;: &quot;click.read_doc&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20516196762&quot;, &quot;key&quot;: &quot;actions_enabled&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20518980986&quot;, &quot;key&quot;: &quot;click.dismiss_trial_banner&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20535446721&quot;, &quot;key&quot;: &quot;click.issue_actions_prompt.dismiss_prompt&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20557002247&quot;, &quot;key&quot;: &quot;click.issue_actions_prompt.setup_workflow&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20595070227&quot;, &quot;key&quot;: &quot;click.pull_request_setup_workflow&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20626600314&quot;, &quot;key&quot;: &quot;click.seats_input&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20642310305&quot;, &quot;key&quot;: &quot;click.decrease_seats_number&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20662990045&quot;, &quot;key&quot;: &quot;click.increase_seats_number&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20679620969&quot;, &quot;key&quot;: &quot;click.public_product_roadmap&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20761240940&quot;, &quot;key&quot;: &quot;click.dismiss_survey_banner&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20767210721&quot;, &quot;key&quot;: &quot;click.take_survey&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20795281201&quot;, &quot;key&quot;: &quot;click.archive_list&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20966790249&quot;, &quot;key&quot;: &quot;contact_sales.submit&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20996500333&quot;, &quot;key&quot;: &quot;contact_sales.existing_customer&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20996890162&quot;, &quot;key&quot;: &quot;contact_sales.blank_message_field&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21000470317&quot;, &quot;key&quot;: &quot;contact_sales.personal_email&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21002790172&quot;, &quot;key&quot;: &quot;contact_sales.blank_phone_field&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21354412592&quot;, &quot;key&quot;: &quot;click.dismiss_create_readme&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21366102546&quot;, &quot;key&quot;: &quot;click.dismiss_zero_user_content&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21370252505&quot;, &quot;key&quot;: &quot;account_did_downgrade&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21370840408&quot;, &quot;key&quot;: &quot;click.cta_create_readme&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21375451068&quot;, &quot;key&quot;: &quot;click.cta_create_new_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21385390948&quot;, &quot;key&quot;: &quot;click.zero_user_content&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21467712175&quot;, &quot;key&quot;: &quot;click.downgrade_keep&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21484112202&quot;, &quot;key&quot;: &quot;click.downgrade&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21495292213&quot;, &quot;key&quot;: &quot;click.downgrade_survey_exit&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21508241468&quot;, &quot;key&quot;: &quot;click.downgrade_survey_submit&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21512030356&quot;, &quot;key&quot;: &quot;click.downgrade_support&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21539090022&quot;, &quot;key&quot;: &quot;click.downgrade_exit&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21543640644&quot;, &quot;key&quot;: &quot;click_fetch_upstream&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21646510300&quot;, &quot;key&quot;: &quot;click.move_your_work&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21656151116&quot;, &quot;key&quot;: &quot;click.add_branch_protection_rule&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21663860599&quot;, &quot;key&quot;: &quot;click.downgrade_dialog_open&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21687860483&quot;, &quot;key&quot;: &quot;click.learn_about_protected_branches&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21689050333&quot;, &quot;key&quot;: &quot;click.dismiss_protect_this_branch&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21864370109&quot;, &quot;key&quot;: &quot;click.sign_in&quot;}], &quot;revision&quot;: &quot;1372&quot;}" />


  <script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/wp-runtime-df6e5e8ef494.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_stacktrace-parser_dist_stack-trace-parser_esm_js-node_modules_github_bro-a4c183-ae93d3fba59c.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_soft-nav_soft-nav_ts-899d6d5b0d82.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/environment-07edc14d05eb.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_selector-observer_dist_index_esm_js-2646a2c533e3.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_relative-time-element_dist_index_js-99e288659d4f.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_fzy_js_index_js-node_modules_github_markdown-toolbar-element_dist_index_js-e3de700a4c9d.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_delegated-events_dist_index_js-node_modules_github_auto-complete-element-5b3870-ff38694180c6.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_file-attachment-element_dist_index_js-node_modules_github_text-ex-3415a8-7ecc10fb88d0.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_filter-input-element_dist_index_js-node_modules_github_remote-inp-8873b7-5771678648e0.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_view-components_app_components_primer_primer_js-node_modules_gith-3af896-d8cf3e5f5813.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/github-elements-81e086959e09.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/element-registry-c2215309edec.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lit-html_lit-html_js-9d9fe1859ce5.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_github_alive-client_dist-bf5aa2-424aa982deef.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_turbo_dist_turbo_es2017-esm_js-ba0e4d5b3207.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_color-convert_index_js-node_modules_github_jtml_lib_index_js-40bf234a19dc.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_scroll-anchoring_dist_scro-52dc4b-e1e33bfc0b7e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_paste-markdown_dist_index_esm_js-node_modules_github_quote-select-743f1d-1b20d530fbf0.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_updatable-content_ts-dadb69f79923.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_keyboard-shortcuts-helper_ts-app_assets_modules_github_be-f5afdb-c7480f27f9c0.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_sticky-scroll-into-view_ts-050ad6637d58.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_ajax-error_ts-app_assets_modules_github_behaviors_include-2e2258-7effad8d88d4.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_commenting_edit_ts-app_assets_modules_github_behaviors_ht-83c235-c97eacdef68a.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_blob-anchor_ts-app_assets_modules_github_filter-sort_ts-app_assets_-e5f169-c54621d9e188.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/behaviors-7c9637f90b41.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_delegated-events_dist_index_js-node_modules_github_catalyst_lib_index_js-623425af41e1.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/notifications-global-4dc6f295cc92.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_optimizely_optimizely-sdk_dist_optimizely_browser_es_min_js-node_modules-089adc-2328ba323205.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/optimizely-c6fa9687eddf.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_virtualized-list_es_index_js-node_modules_github_template-parts_lib_index_js-c3e624db1d89.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-911b971-b9c79ae563e3.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_ref-selector_ts-8f8b76ecd8d3.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/codespaces-9beef049e47d.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_decorators_js-node_modules_github_remote-form_-e3de2b-779fd9166293.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_file-attachment-element_dist_index_js-node_modules_github_filter--b2311f-15fe0f17a114.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/repositories-b9917f52082f.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_index_js-0cc53ae22129.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/topic-suggestions-0032c6704b30.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/code-menu-7dfb8cccdca1.js"></script>
  

  <title>GitHub - sj-simmons/crypto: Resources for DU&#39;s Spring &#39;23 Senior Seminar.</title>



  <meta name="route-pattern" content="/:user_id/:repository">

    
  <meta name="current-catalog-service-hash" content="343cff545437bc2b0304c97517abf17bb80d9887520078e9757df416551ef5d6">


  <meta name="request-id" content="CE09:41E7:152515:20849D:647F4A51" data-pjax-transient="true"/><meta name="html-safe-nonce" content="0d51c66dd5c07a82c9586de3ef03e6e8383560623ac204f17e470bdc0dc078ab" data-pjax-transient="true"/><meta name="visitor-payload" content="eyJyZWZlcnJlciI6IiIsInJlcXVlc3RfaWQiOiJDRTA5OjQxRTc6MTUyNTE1OjIwODQ5RDo2NDdGNEE1MSIsInZpc2l0b3JfaWQiOiI1MzA5NDI1MTQ2OTMzNDk2NDAwIiwicmVnaW9uX2VkZ2UiOiJpYWQiLCJyZWdpb25fcmVuZGVyIjoiaWFkIn0=" data-pjax-transient="true"/><meta name="visitor-hmac" content="932da72e2ce40b7bcd1e60798a1358e65d6ba4cf2b74d7f485fa4bba708ec7e5" data-pjax-transient="true"/>


    <meta name="hovercard-subject-tag" content="repository:358708166" data-turbo-transient>


  <meta name="github-keyboard-shortcuts" content="repository" data-turbo-transient="true" />
  

  <meta name="selected-link" value="repo_source" data-turbo-transient>
  <link rel="assets" href="https://github.githubassets.com/">

    <meta name="google-site-verification" content="c1kuD-K2HIVF635lypcsWPoD4kilo5-jA_wBFyT4uMY">
  <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
  <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
  <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">
  <meta name="google-site-verification" content="Apib7-x98H0j5cPqHWwSMm6dNU4GmODRoqxLiDzdx9I">

<meta name="octolytics-url" content="https://collector.github.com/github/collect" />

  <meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;" data-turbo-transient="true" />

  




  

    <meta name="user-login" content="">

  

    <meta name="viewport" content="width=device-width">
    
      <meta name="description" content="Resources for DU&#39;s Spring &#39;23 Senior Seminar. Contribute to sj-simmons/crypto development by creating an account on GitHub.">
      <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <meta property="fb:app_id" content="1401488693436528">
    <meta name="apple-itunes-app" content="app-id=1477376905" />
      <meta name="twitter:image:src" content="https://opengraph.githubassets.com/6b6ee58f05d275eee917a58850ae1389035e0d86dd9a297bdd507ccc1efbca8f/sj-simmons/crypto" /><meta name="twitter:site" content="@github" /><meta name="twitter:card" content="summary_large_image" /><meta name="twitter:title" content="GitHub - sj-simmons/crypto: Resources for DU&#39;s Spring &#39;23 Senior Seminar." /><meta name="twitter:description" content="Resources for DU&#39;s Spring &#39;23 Senior Seminar. Contribute to sj-simmons/crypto development by creating an account on GitHub." />
      <meta property="og:image" content="https://opengraph.githubassets.com/6b6ee58f05d275eee917a58850ae1389035e0d86dd9a297bdd507ccc1efbca8f/sj-simmons/crypto" /><meta property="og:image:alt" content="Resources for DU&#39;s Spring &#39;23 Senior Seminar. Contribute to sj-simmons/crypto development by creating an account on GitHub." /><meta property="og:image:width" content="1200" /><meta property="og:image:height" content="600" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="GitHub - sj-simmons/crypto: Resources for DU&#39;s Spring &#39;23 Senior Seminar." /><meta property="og:url" content="https://github.com/sj-simmons/crypto" /><meta property="og:description" content="Resources for DU&#39;s Spring &#39;23 Senior Seminar. Contribute to sj-simmons/crypto development by creating an account on GitHub." />
      



        <meta name="hostname" content="github.com">



        <meta name="expected-hostname" content="github.com">

    <meta name="enabled-features" content="TURBO_EXPERIMENT_RISKY,IMAGE_METRIC_TRACKING,GEOJSON_AZURE_MAPS,SUDO_MODAL_FOCUS">


  <meta http-equiv="x-pjax-version" content="767bea67dba8806022616aaecb22f20964955988d3a48fcc55ae4783664c8659" data-turbo-track="reload">
  <meta http-equiv="x-pjax-csp-version" content="0db263f9a873141d8256f783c35f244c06d490aacc3b680f99794dd8fd59fb59" data-turbo-track="reload">
  <meta http-equiv="x-pjax-css-version" content="90cb3d3e6b3f1755257a318c01cd6f6879ce75b4510614935481784a01ff3202" data-turbo-track="reload">
  <meta http-equiv="x-pjax-js-version" content="74621586e792adb7cff9f286900c0c8bd3212105c46690079f1e9c98be8d8632" data-turbo-track="reload">

  <meta name="turbo-cache-control" content="no-preview" data-turbo-transient="">

    
  <meta name="go-import" content="github.com/sj-simmons/crypto git https://github.com/sj-simmons/crypto.git">

  <meta name="octolytics-dimension-user_id" content="16726876" /><meta name="octolytics-dimension-user_login" content="sj-simmons" /><meta name="octolytics-dimension-repository_id" content="358708166" /><meta name="octolytics-dimension-repository_nwo" content="sj-simmons/crypto" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="358708166" /><meta name="octolytics-dimension-repository_network_root_nwo" content="sj-simmons/crypto" />



    <link rel="canonical" href="https://github.com/sj-simmons/crypto" data-turbo-transient>
  <meta name="turbo-body-classes" content="logged-out env-production page-responsive">


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <meta name="browser-optimizely-client-errors-url" content="https://api.github.com/_private/browser/optimizely_client/errors">

  <link rel="mask-icon" href="https://github.githubassets.com/pinned-octocat.svg" color="#000000">
  <link rel="alternate icon" class="js-site-favicon" type="image/png" href="https://github.githubassets.com/favicons/favicon.png">
  <link rel="icon" class="js-site-favicon" type="image/svg+xml" href="https://github.githubassets.com/favicons/favicon.svg">

<meta name="theme-color" content="#1e2327">
<meta name="color-scheme" content="light dark" />


  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-responsive" style="word-wrap: break-word;">
    <div data-turbo-body class="logged-out env-production page-responsive" style="word-wrap: break-word;">
      


    <div class="position-relative js-header-wrapper ">
      <a href="#start-of-content" class="px-2 py-4 color-bg-accent-emphasis color-fg-on-emphasis show-on-focus js-skip-to-content">Skip to content</a>
      <span data-view-component="true" class="progress-pjax-loader Progress position-fixed width-full">
    <span style="width: 0%;" data-view-component="true" class="Progress-item progress-pjax-loader-bar left-0 top-0 color-bg-accent-emphasis"></span>
</span>      
      


        

            <script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_github_memoize_dist_esm_in-687f35-d131f0b6de8e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/sessions-2638decb9ee5.js"></script>
<header class="Header-old header-logged-out js-details-container Details position-relative f4 py-3" role="banner">
  <button type="button" class="Header-backdrop d-lg-none border-0 position-fixed top-0 left-0 width-full height-full js-details-target" aria-label="Toggle navigation">
    <span class="d-none">Toggle navigation</span>
  </button>

  <div class="container-xl d-flex flex-column flex-lg-row flex-items-center p-responsive height-full position-relative z-1">
    <div class="d-flex flex-justify-between flex-items-center width-full width-lg-auto">
      <a class="mr-lg-3 color-fg-inherit flex-order-2" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
        <svg height="32" aria-hidden="true" viewBox="0 0 16 16" version="1.1" width="32" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"></path>
</svg>
      </a>

        <div class="flex-1">
          <a href="/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo"
            class="d-inline-block d-lg-none flex-order-1 f5 no-underline border color-border-default rounded-2 px-2 py-1 color-fg-inherit"
            data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="0f9482c418ab293b6ce6cf1f1155b2dd52c39c24d5933e8fc767c830211da75f"
          >
            Sign&nbsp;up
          </a>
        </div>

      <div class="flex-1 flex-order-2 text-right">
          <button aria-label="Toggle navigation" aria-expanded="false" type="button" data-view-component="true" class="js-details-target Button--link Button--medium Button d-lg-none color-fg-inherit p-1">    <span class="Button-content">
      <span class="Button-label"><div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div></span>
    </span>
</button>  
      </div>
    </div>


    <div class="HeaderMenu--logged-out p-responsive height-fit position-lg-relative d-lg-flex flex-column flex-auto pt-7 pb-4 top-0">
      <div class="header-menu-wrapper d-flex flex-column flex-self-end flex-lg-row flex-justify-between flex-auto p-3 p-lg-0 rounded rounded-lg-0 mt-3 mt-lg-0">
          <nav class="mt-0 px-3 px-lg-0 mb-3 mb-lg-0" aria-label="Global">
            <ul class="d-lg-flex list-style-none">
                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Product
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 d-lg-flex dropdown-menu-wide">
          <div class="px-lg-4 border-lg-right mb-4 mb-lg-0 pr-lg-7">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="/features/actions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-workflow color-fg-subtle mr-3">
    <path d="M1 3a2 2 0 0 1 2-2h6.5a2 2 0 0 1 2 2v6.5a2 2 0 0 1-2 2H7v4.063C7 16.355 7.644 17 8.438 17H12.5v-2.5a2 2 0 0 1 2-2H21a2 2 0 0 1 2 2V21a2 2 0 0 1-2 2h-6.5a2 2 0 0 1-2-2v-2.5H8.437A2.939 2.939 0 0 1 5.5 15.562V11.5H3a2 2 0 0 1-2-2Zm2-.5a.5.5 0 0 0-.5.5v6.5a.5.5 0 0 0 .5.5h6.5a.5.5 0 0 0 .5-.5V3a.5.5 0 0 0-.5-.5ZM14.5 14a.5.5 0 0 0-.5.5V21a.5.5 0 0 0 .5.5H21a.5.5 0 0 0 .5-.5v-6.5a.5.5 0 0 0-.5-.5Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Actions</div>
        Automate any workflow
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="/features/packages">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-package color-fg-subtle mr-3">
    <path d="M12.876.64V.639l8.25 4.763c.541.313.875.89.875 1.515v9.525a1.75 1.75 0 0 1-.875 1.516l-8.25 4.762a1.748 1.748 0 0 1-1.75 0l-8.25-4.763a1.75 1.75 0 0 1-.875-1.515V6.917c0-.625.334-1.202.875-1.515L11.126.64a1.748 1.748 0 0 1 1.75 0Zm-1 1.298L4.251 6.34l7.75 4.474 7.75-4.474-7.625-4.402a.248.248 0 0 0-.25 0Zm.875 19.123 7.625-4.402a.25.25 0 0 0 .125-.216V7.639l-7.75 4.474ZM3.501 7.64v8.803c0 .09.048.172.125.216l7.625 4.402v-8.947Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Packages</div>
        Host and manage packages
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="/features/security">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-shield-check color-fg-subtle mr-3">
    <path d="M16.53 9.78a.75.75 0 0 0-1.06-1.06L11 13.19l-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5Z"></path><path d="m12.54.637 8.25 2.675A1.75 1.75 0 0 1 22 4.976V10c0 6.19-3.771 10.704-9.401 12.83a1.704 1.704 0 0 1-1.198 0C5.77 20.705 2 16.19 2 10V4.976c0-.758.489-1.43 1.21-1.664L11.46.637a1.748 1.748 0 0 1 1.08 0Zm-.617 1.426-8.25 2.676a.249.249 0 0 0-.173.237V10c0 5.46 3.28 9.483 8.43 11.426a.199.199 0 0 0 .14 0C17.22 19.483 20.5 15.461 20.5 10V4.976a.25.25 0 0 0-.173-.237l-8.25-2.676a.253.253 0 0 0-.154 0Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Security</div>
        Find and fix vulnerabilities
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="/features/codespaces">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-codespaces color-fg-subtle mr-3">
    <path d="M3.5 3.75C3.5 2.784 4.284 2 5.25 2h13.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 18.75 13H5.25a1.75 1.75 0 0 1-1.75-1.75Zm-2 12c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v4a1.75 1.75 0 0 1-1.75 1.75H3.25a1.75 1.75 0 0 1-1.75-1.75ZM5.25 3.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h13.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Zm-2 12a.25.25 0 0 0-.25.25v4c0 .138.112.25.25.25h17.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25Z"></path><path d="M10 17.75a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Zm-4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1-.75-.75Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Codespaces</div>
        Instant dev environments
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Copilot&quot;,&quot;label&quot;:&quot;ref_cta:Copilot;&quot;}" href="/features/copilot">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-copilot color-fg-subtle mr-3">
    <path d="M9.75 14a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 .75-.75Zm4.5 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 .75-.75Z"></path><path d="M12 2c2.214 0 4.248.657 5.747 1.756.136.099.268.204.397.312.584.235 1.077.546 1.474.952.85.869 1.132 2.037 1.132 3.368 0 .368-.014.733-.052 1.086l.633 1.478.043.022A4.75 4.75 0 0 1 24 15.222v1.028c0 .529-.309.987-.565 1.293-.28.336-.636.653-.966.918a13.84 13.84 0 0 1-1.299.911l-.024.015-.006.004-.039.025c-.223.135-.45.264-.68.386-.46.245-1.122.571-1.941.895C16.845 21.344 14.561 22 12 22c-2.561 0-4.845-.656-6.479-1.303a19.046 19.046 0 0 1-1.942-.894 14.081 14.081 0 0 1-.535-.3l-.144-.087-.04-.025-.006-.004-.024-.015a13.16 13.16 0 0 1-1.299-.911 6.913 6.913 0 0 1-.967-.918C.31 17.237 0 16.779 0 16.25v-1.028a4.75 4.75 0 0 1 2.626-4.248l.043-.022.633-1.478a10.195 10.195 0 0 1-.052-1.086c0-1.331.282-2.498 1.132-3.368.397-.406.89-.717 1.474-.952.129-.108.261-.213.397-.312C7.752 2.657 9.786 2 12 2Zm-8 9.654v6.669a17.59 17.59 0 0 0 2.073.98C7.595 19.906 9.686 20.5 12 20.5c2.314 0 4.405-.594 5.927-1.197a17.59 17.59 0 0 0 2.073-.98v-6.669l-.038-.09c-.046.061-.095.12-.145.177-.793.9-2.057 1.259-3.782 1.259-1.59 0-2.738-.544-3.508-1.492a4.323 4.323 0 0 1-.355-.508h-.344a4.323 4.323 0 0 1-.355.508C10.704 12.456 9.555 13 7.965 13c-1.725 0-2.989-.359-3.782-1.259a3.026 3.026 0 0 1-.145-.177Zm6.309-1.092c.445-.547.708-1.334.851-2.301.057-.357.087-.718.09-1.079v-.031c-.001-.762-.166-1.26-.43-1.568l-.008-.01c-.341-.391-1.046-.689-2.533-.529-1.505.163-2.347.537-2.824 1.024-.462.473-.705 1.18-.705 2.32 0 .605.044 1.087.135 1.472.092.384.231.672.423.89.365.413 1.084.75 2.657.75.91 0 1.527-.223 1.964-.564.14-.11.268-.235.38-.374Zm2.504-2.497c.136 1.057.403 1.913.878 2.497.442.545 1.134.938 2.344.938 1.573 0 2.292-.337 2.657-.751.384-.435.558-1.151.558-2.361 0-1.14-.243-1.847-.705-2.319-.477-.488-1.318-.862-2.824-1.025-1.487-.161-2.192.139-2.533.529-.268.308-.437.808-.438 1.578v.02c.002.299.023.598.063.894Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Copilot</div>
        Write better code with AI
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="/features/code-review">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-code-review color-fg-subtle mr-3">
    <path d="M10.3 6.74a.75.75 0 0 1-.04 1.06l-2.908 2.7 2.908 2.7a.75.75 0 1 1-1.02 1.1l-3.5-3.25a.75.75 0 0 1 0-1.1l3.5-3.25a.75.75 0 0 1 1.06.04Zm3.44 1.06a.75.75 0 1 1 1.02-1.1l3.5 3.25a.75.75 0 0 1 0 1.1l-3.5 3.25a.75.75 0 1 1-1.02-1.1l2.908-2.7-2.908-2.7Z"></path><path d="M1.5 4.25c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v12.5a1.75 1.75 0 0 1-1.75 1.75h-9.69l-3.573 3.573A1.458 1.458 0 0 1 5 21.043V18.5H3.25a1.75 1.75 0 0 1-1.75-1.75ZM3.25 4a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h2.5a.75.75 0 0 1 .75.75v3.19l3.72-3.72a.749.749 0 0 1 .53-.22h10a.25.25 0 0 0 .25-.25V4.25a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Code review</div>
        Manage code changes
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="/features/issues">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-issue-opened color-fg-subtle mr-3">
    <path d="M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1ZM2.5 12a9.5 9.5 0 0 0 9.5 9.5 9.5 9.5 0 0 0 9.5-9.5A9.5 9.5 0 0 0 12 2.5 9.5 9.5 0 0 0 2.5 12Zm9.5 2a2 2 0 1 1-.001-3.999A2 2 0 0 1 12 14Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Issues</div>
        Plan and track work
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="/features/discussions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-comment-discussion color-fg-subtle mr-3">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"></path><path d="M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Discussions</div>
        Collaborate outside of code
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="px-lg-4">
              <span class="d-block h4 color-fg-default my-1" id="product-explore-heading">Explore</span>
            <ul class="list-style-none f5" aria-labelledby="product-explore-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to All features&quot;,&quot;label&quot;:&quot;ref_cta:All features;&quot;}" href="/features">
      All features

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Documentation&quot;,&quot;label&quot;:&quot;ref_cta:Documentation;&quot;}" href="https://docs.github.com">
      Documentation

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to GitHub Skills&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Skills;&quot;}" href="https://skills.github.com/">
      GitHub Skills

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Blog&quot;,&quot;label&quot;:&quot;ref_cta:Blog;&quot;}" href="https://github.blog">
      Blog

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Solutions
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 px-lg-4">
          <div class="border-bottom pb-3 mb-3">
              <span class="d-block h4 color-fg-default my-1" id="solutions-for-heading">For</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-for-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Enterprise&quot;,&quot;label&quot;:&quot;ref_cta:Enterprise;&quot;}" href="/enterprise">
      Enterprise

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Teams&quot;,&quot;label&quot;:&quot;ref_cta:Teams;&quot;}" href="/team">
      Teams

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Startups&quot;,&quot;label&quot;:&quot;ref_cta:Startups;&quot;}" href="/enterprise/startups">
      Startups

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Education&quot;,&quot;label&quot;:&quot;ref_cta:Education;&quot;}" href="https://education.github.com">
      Education

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
          <div class="border-bottom pb-3 mb-3">
              <span class="d-block h4 color-fg-default my-1" id="solutions-by-solution-heading">By Solution</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-by-solution-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to CI/CD &amp;amp; Automation&quot;,&quot;label&quot;:&quot;ref_cta:CI/CD &amp;amp; Automation;&quot;}" href="/solutions/ci-cd/">
      CI/CD &amp; Automation

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to DevOps&quot;,&quot;label&quot;:&quot;ref_cta:DevOps;&quot;}" href="https://resources.github.com/devops/">
      DevOps

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to DevSecOps&quot;,&quot;label&quot;:&quot;ref_cta:DevSecOps;&quot;}" href="https://resources.github.com/devops/fundamentals/devsecops/">
      DevSecOps

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
          <div class="">
              <span class="d-block h4 color-fg-default my-1" id="solutions-case-studies-heading">Case Studies</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-case-studies-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Customer Stories&quot;,&quot;label&quot;:&quot;ref_cta:Customer Stories;&quot;}" href="/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Resources&quot;,&quot;label&quot;:&quot;ref_cta:Resources;&quot;}" href="https://resources.github.com/">
      Resources

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Open Source
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 px-lg-4">
          <div class="border-bottom pb-3 mb-3">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="/sponsors">
      
      <div>
        <div class="color-fg-default h4">GitHub Sponsors</div>
        Fund open source developers
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="border-bottom pb-3 mb-3">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="/readme">
      
      <div>
        <div class="color-fg-default h4">The ReadME Project</div>
        GitHub community articles
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="">
              <span class="d-block h4 color-fg-default my-1" id="open-source-repositories-heading">Repositories</span>
            <ul class="list-style-none f5" aria-labelledby="open-source-repositories-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Topics&quot;,&quot;label&quot;:&quot;ref_cta:Topics;&quot;}" href="/topics">
      Topics

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Trending&quot;,&quot;label&quot;:&quot;ref_cta:Trending;&quot;}" href="/trending">
      Trending

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Collections&quot;,&quot;label&quot;:&quot;ref_cta:Collections;&quot;}" href="/collections">
      Collections

    
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
    <a class="HeaderMenu-link no-underline px-0 px-lg-2 py-3 py-lg-2 d-block d-lg-inline-block" data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div class="d-lg-flex flex-items-center px-3 px-lg-0 mb-3 mb-lg-0 text-center text-lg-left">
            <div class="d-lg-flex min-width-0 mb-2 mb-lg-0">
              



<div class="header-search flex-auto position-relative js-site-search flex-self-stretch flex-md-self-auto mb-3 mb-md-0 mr-0 mr-md-3 scoped-search site-scoped-search js-jump-to"
>
  <div class="position-relative">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" role="search" aria-label="Site" data-scope-type="Repository" data-scope-id="358708166" data-scoped-search-url="/sj-simmons/crypto/search" data-owner-scoped-search-url="/users/sj-simmons/search" data-unscoped-search-url="/search" data-turbo="false" action="/sj-simmons/crypto/search" accept-charset="UTF-8" method="get">
      <label class="form-control header-search-wrapper input-sm p-0 js-chromeless-input-container header-search-wrapper-jump-to position-relative d-flex flex-justify-between flex-items-center">
        <input type="text"
          class="form-control js-site-search-focus header-search-input jump-to-field js-jump-to-field js-site-search-field is-clearable"
          data-hotkey=s,/
          name="q"
          
          placeholder="Search"
          data-unscoped-placeholder="Search GitHub"
          data-scoped-placeholder="Search"
          autocapitalize="off"
          role="combobox"
          aria-haspopup="listbox"
          aria-expanded="false"
          aria-autocomplete="list"
          aria-controls="jump-to-results"
          aria-label="Search"
          data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations"
          spellcheck="false"
          autocomplete="off"
        >
        <input type="hidden" data-csrf="true" class="js-data-jump-to-suggestions-path-csrf" value="I3mtnnG8wDlMAgMaVy+MV4T861HJ0DmxZcQybOkeswzAfTRYiLp5aMTcmaI0XVTDu3l6DGFtZA4UVF2gmeEppA==" />
        <input type="hidden" class="js-site-search-type-field" name="type" >
            <svg xmlns="http://www.w3.org/2000/svg" width="22" height="20" aria-hidden="true" class="mr-1 header-search-key-slash"><path fill="none" stroke="#979A9C" opacity=".4" d="M3.5.5h12c1.7 0 3 1.3 3 3v13c0 1.7-1.3 3-3 3h-12c-1.7 0-3-1.3-3-3v-13c0-1.7 1.3-3 3-3z"></path><path fill="#979A9C" d="M11.8 6L8 15.1h-.9L10.8 6h1z"></path></svg>


          <div class="Box position-absolute overflow-hidden d-none jump-to-suggestions js-jump-to-suggestions-container">
            
<ul class="d-none js-jump-to-suggestions-template-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-suggestion" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="suggestion">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg title="Repository" aria-label="Repository" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo js-jump-to-octicon-repo d-none flex-shrink-0">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
      <svg title="Project" aria-label="Project" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project js-jump-to-octicon-project d-none flex-shrink-0">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
      <svg title="Search" aria-label="Search" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search js-jump-to-octicon-search d-none flex-shrink-0">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

</ul>

<ul class="d-none js-jump-to-no-results-template-container">
  <li class="d-flex flex-justify-center flex-items-center f5 d-none js-jump-to-suggestion p-2">
    <span class="color-fg-muted">No suggested jump to results</span>
  </li>
</ul>

<ul id="jump-to-results" role="listbox" class="p-0 m-0 js-navigation-container jump-to-suggestions-results-container js-jump-to-suggestions-results-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-scoped-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="scoped_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg title="Repository" aria-label="Repository" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo js-jump-to-octicon-repo d-none flex-shrink-0">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
      <svg title="Project" aria-label="Project" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project js-jump-to-octicon-project d-none flex-shrink-0">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
      <svg title="Search" aria-label="Search" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search js-jump-to-octicon-search d-none flex-shrink-0">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-owner-scoped-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="owner_scoped_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg title="Repository" aria-label="Repository" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo js-jump-to-octicon-repo d-none flex-shrink-0">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
      <svg title="Project" aria-label="Project" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project js-jump-to-octicon-project d-none flex-shrink-0">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
      <svg title="Search" aria-label="Search" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search js-jump-to-octicon-search d-none flex-shrink-0">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this user">
        In this user
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-global-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="global_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg title="Repository" aria-label="Repository" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo js-jump-to-octicon-repo d-none flex-shrink-0">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
      <svg title="Project" aria-label="Project" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project js-jump-to-octicon-project d-none flex-shrink-0">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
      <svg title="Search" aria-label="Search" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search js-jump-to-octicon-search d-none flex-shrink-0">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>


</ul>

          </div>
      </label>
</form>  </div>
</div>

            </div>

          <div class="position-relative mr-lg-3 d-lg-inline-block">
            <a href="/login?return_to=https%3A%2F%2Fgithub.com%2Fsj-simmons%2Fcrypto"
              class="HeaderMenu-link HeaderMenu-link--sign-in flex-shrink-0 no-underline d-block d-lg-inline-block border border-lg-0 rounded rounded-lg-0 p-2 p-lg-0"
              data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="9cf0d859756230fedf1fae8a07606358b5b76b1808c2da25d0ea0c0a72a459b4"
              data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">
              Sign in
            </a>
          </div>

            <a href="/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=sj-simmons%2Fcrypto"
              class="HeaderMenu-link HeaderMenu-link--sign-up flex-shrink-0 d-none d-lg-inline-block no-underline border color-border-default rounded px-2 py-1"
              data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="9cf0d859756230fedf1fae8a07606358b5b76b1808c2da25d0ea0c0a72a459b4"
              data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/&lt;user-name&gt;/&lt;repo-name&gt;;ref_cta:Sign up;ref_loc:header logged out&quot;}"
            >
              Sign up
            </a>
        </div>
      </div>
    </div>
  </div>
</header>

    </div>

  <div id="start-of-content" class="show-on-focus"></div>








    <div id="js-flash-container" data-turbo-replace>





  <template class="js-flash-template">
    
<div class="flash flash-full   {{ className }}">
  <div class="px-2" >
    <button autofocus class="flash-close js-flash-close" type="button" aria-label="Dismiss this message">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    <div aria-atomic="true" role="alert" class="js-flash-alert">
      
      <div>{{ message }}</div>

    </div>
  </div>
</div>
  </template>
</div>


    
    <include-fragment class="js-notification-shelf-include-fragment" data-base-src="https://github.com/notifications/beta/shelf"></include-fragment>






  <div
    class="application-main "
    data-commit-hovercards-enabled
    data-discussion-hovercards-enabled
    data-issue-and-pr-hovercards-enabled
  >
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <main id="js-repo-pjax-container" >
      
  




    






  
  <div id="repository-container-header"  class="pt-3 hide-full-screen" style="background-color: var(--color-page-header-bg);" data-turbo-replace>

      <div class="d-flex flex-wrap flex-justify-end mb-3  px-3 px-md-4 px-lg-5" style="gap: 1rem;">

        <div class="flex-auto min-width-0 width-fit mr-3">
            
  <div class=" d-flex flex-wrap flex-items-center wb-break-word f3 text-normal">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo color-fg-muted mr-2">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
    
    <span class="author flex-self-stretch" itemprop="author">
      <a class="url fn" rel="author" data-hovercard-type="user" data-hovercard-url="/users/sj-simmons/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/sj-simmons">
        sj-simmons
</a>    </span>
    <span class="mx-1 flex-self-stretch color-fg-muted">/</span>
    <strong itemprop="name" class="mr-2 flex-self-stretch">
      <a data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/sj-simmons/crypto">crypto</a>
    </strong>

    <span></span><span class="Label Label--secondary v-align-middle mr-1">Public</span>
  </div>


        </div>

        <div id="repository-details-container" data-turbo-replace>
            <ul class="pagehead-actions flex-shrink-0 d-none d-md-inline" style="padding: 2px 0;">
    
      

  <li>
            <a href="/login?return_to=%2Fsj-simmons%2Fcrypto" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;notification subscription menu watch&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f267db0639a583c247132f9c8ec1546611b5c868d1c913743de798ac9e8e04df" aria-label="You must be signed in to change notification settings" data-view-component="true" class="tooltipped tooltipped-s btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bell mr-2">
    <path d="M8 16a2 2 0 0 0 1.985-1.75c.017-.137-.097-.25-.235-.25h-3.5c-.138 0-.252.113-.235.25A2 2 0 0 0 8 16ZM3 5a5 5 0 0 1 10 0v2.947c0 .05.015.098.042.139l1.703 2.555A1.519 1.519 0 0 1 13.482 13H2.518a1.516 1.516 0 0 1-1.263-2.36l1.703-2.554A.255.255 0 0 0 3 7.947Zm5-3.5A3.5 3.5 0 0 0 4.5 5v2.947c0 .346-.102.683-.294.97l-1.703 2.556a.017.017 0 0 0-.003.01l.001.006c0 .002.002.004.004.006l.006.004.007.001h10.964l.007-.001.006-.004.004-.006.001-.007a.017.017 0 0 0-.003-.01l-1.703-2.554a1.745 1.745 0 0 1-.294-.97V5A3.5 3.5 0 0 0 8 1.5Z"></path>
</svg>Notifications
</a>  </li>

  <li>
          <a icon="repo-forked" id="fork-button" href="/login?return_to=%2Fsj-simmons%2Fcrypto" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;repo details fork button&quot;,&quot;repository_id&quot;:358708166,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="eb7d8ba39f72f4525b02e5189e7c06e5f28403dc70284162cec32db5e48f43df" data-view-component="true" class="btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-2">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>Fork
    <span id="repo-network-counter" data-pjax-replace="true" data-turbo-replace="true" title="0" data-view-component="true" class="Counter">0</span>
</a>
  </li>

  <li>
        <div data-view-component="true" class="BtnGroup d-flex">
        <a href="/login?return_to=%2Fsj-simmons%2Fcrypto" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;star button&quot;,&quot;repository_id&quot;:358708166,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="09dbe858c7b40cad96fe56ba38481466123f1c3944339c2a086e93e3a07dd204" aria-label="You must be signed in to star a repository" data-view-component="true" class="tooltipped tooltipped-s btn-sm btn BtnGroup-item">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star v-align-text-bottom d-inline-block mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg><span data-view-component="true" class="d-inline">
          Star
</span>          <span id="repo-stars-counter-star" aria-label="2 users starred this repository" data-singular-suffix="user starred this repository" data-plural-suffix="users starred this repository" data-turbo-replace="true" title="2" data-view-component="true" class="Counter js-social-count">2</span>
</a>        <button disabled="disabled" aria-label="You must be signed in to add this repository to a list" type="button" data-view-component="true" class="btn-sm btn BtnGroup-item px-2">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-triangle-down">
    <path d="m4.427 7.427 3.396 3.396a.25.25 0 0 0 .354 0l3.396-3.396A.25.25 0 0 0 11.396 7H4.604a.25.25 0 0 0-.177.427Z"></path>
</svg>
</button></div>
  </li>


    

</ul>

        </div>
      </div>

        <div id="responsive-meta-container" data-turbo-replace>
      <div class="d-block d-md-none mb-2 px-3 px-md-4 px-lg-5">
      <p class="f4 mb-3 ">
        Resources for DU's Spring '23 Senior Seminar.
      </p>

    

    <div class="mb-3">
        <a class="Link--secondary no-underline mr-3" href="/sj-simmons/crypto/stargazers">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star mr-1">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
          <span class="text-bold">2</span>
          stars
</a>        <a class="Link--secondary no-underline mr-3" href="/sj-simmons/crypto/forks">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-1">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>
          <span class="text-bold">0</span>
          forks
</a>    </div>

      <div class="d-flex flex-wrap gap-2">
        <div class="flex-1">
            <div data-view-component="true" class="BtnGroup d-flex">
        <a href="/login?return_to=%2Fsj-simmons%2Fcrypto" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;star button&quot;,&quot;repository_id&quot;:358708166,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="09dbe858c7b40cad96fe56ba38481466123f1c3944339c2a086e93e3a07dd204" aria-label="You must be signed in to star a repository" data-view-component="true" class="tooltipped tooltipped-s btn-sm btn btn-block BtnGroup-item">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star v-align-text-bottom d-inline-block mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg><span data-view-component="true" class="d-inline">
          Star
</span>
</a>        <button disabled="disabled" aria-label="You must be signed in to add this repository to a list" type="button" data-view-component="true" class="btn-sm btn BtnGroup-item px-2">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-triangle-down">
    <path d="m4.427 7.427 3.396 3.396a.25.25 0 0 0 .354 0l3.396-3.396A.25.25 0 0 0 11.396 7H4.604a.25.25 0 0 0-.177.427Z"></path>
</svg>
</button></div>
        </div>
        <div class="flex-1">
                <a href="/login?return_to=%2Fsj-simmons%2Fcrypto" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;notification subscription menu watch&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f267db0639a583c247132f9c8ec1546611b5c868d1c913743de798ac9e8e04df" aria-label="You must be signed in to change notification settings" data-view-component="true" class="tooltipped tooltipped-s btn-sm btn btn-block">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bell mr-2">
    <path d="M8 16a2 2 0 0 0 1.985-1.75c.017-.137-.097-.25-.235-.25h-3.5c-.138 0-.252.113-.235.25A2 2 0 0 0 8 16ZM3 5a5 5 0 0 1 10 0v2.947c0 .05.015.098.042.139l1.703 2.555A1.519 1.519 0 0 1 13.482 13H2.518a1.516 1.516 0 0 1-1.263-2.36l1.703-2.554A.255.255 0 0 0 3 7.947Zm5-3.5A3.5 3.5 0 0 0 4.5 5v2.947c0 .346-.102.683-.294.97l-1.703 2.556a.017.017 0 0 0-.003.01l.001.006c0 .002.002.004.004.006l.006.004.007.001h10.964l.007-.001.006-.004.004-.006.001-.007a.017.017 0 0 0-.003-.01l-1.703-2.554a1.745 1.745 0 0 1-.294-.97V5A3.5 3.5 0 0 0 8 1.5Z"></path>
</svg>Notifications
</a>        </div>
      </div>
  </div>

</div>


          <nav data-pjax="#js-repo-pjax-container" aria-label="Repository" data-view-component="true" class="js-repo-nav js-sidenav-container-pjax js-responsive-underlinenav overflow-hidden UnderlineNav px-3 px-md-4 px-lg-5">

  <ul data-view-component="true" class="UnderlineNav-body list-style-none">
      <li data-view-component="true" class="d-inline-flex">
  <a id="code-tab" href="/sj-simmons/crypto" data-tab-item="i0code-tab" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages repo_deployments /sj-simmons/crypto" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g c" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Code&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" aria-current="page" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item selected">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code UnderlineNav-octicon d-none d-sm-inline">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
        <span data-content="Code">Code</span>
          <span id="code-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="issues-tab" href="/sj-simmons/crypto/issues" data-tab-item="i1issues-tab" data-selected-links="repo_issues repo_labels repo_milestones /sj-simmons/crypto/issues" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g i" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Issues&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
        <span data-content="Issues">Issues</span>
          <span id="issues-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="0" hidden="hidden" data-view-component="true" class="Counter">0</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="pull-requests-tab" href="/sj-simmons/crypto/pulls" data-tab-item="i2pull-requests-tab" data-selected-links="repo_pulls checks /sj-simmons/crypto/pulls" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g p" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Pull requests&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-pull-request UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"></path>
</svg>
        <span data-content="Pull requests">Pull requests</span>
          <span id="pull-requests-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="0" hidden="hidden" data-view-component="true" class="Counter">0</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="actions-tab" href="/sj-simmons/crypto/actions" data-tab-item="i3actions-tab" data-selected-links="repo_actions /sj-simmons/crypto/actions" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g a" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Actions&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
        <span data-content="Actions">Actions</span>
          <span id="actions-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="projects-tab" href="/sj-simmons/crypto/projects" data-tab-item="i4projects-tab" data-selected-links="repo_projects new_repo_project repo_project /sj-simmons/crypto/projects" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g b" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Projects&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-table UnderlineNav-octicon d-none d-sm-inline">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25ZM6.5 6.5v8h7.75a.25.25 0 0 0 .25-.25V6.5Zm8-1.5V1.75a.25.25 0 0 0-.25-.25H6.5V5Zm-13 1.5v7.75c0 .138.112.25.25.25H5v-8ZM5 5V1.5H1.75a.25.25 0 0 0-.25.25V5Z"></path>
</svg>
        <span data-content="Projects">Projects</span>
          <span id="projects-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="0" hidden="hidden" data-view-component="true" class="Counter">0</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="security-tab" href="/sj-simmons/crypto/security" data-tab-item="i5security-tab" data-selected-links="security overview alerts policy token_scanning code_scanning /sj-simmons/crypto/security" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g s" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Security&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield UnderlineNav-octicon d-none d-sm-inline">
    <path d="M7.467.133a1.748 1.748 0 0 1 1.066 0l5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667Zm.61 1.429a.25.25 0 0 0-.153 0l-5.25 1.68a.25.25 0 0 0-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.196.196 0 0 0 .154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.251.251 0 0 0-.174-.237l-5.25-1.68ZM8.75 4.75v3a.75.75 0 0 1-1.5 0v-3a.75.75 0 0 1 1.5 0ZM9 10.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        <span data-content="Security">Security</span>
          <include-fragment src="/sj-simmons/crypto/security/overall-count" accept="text/fragment+html"></include-fragment>

    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="insights-tab" href="/sj-simmons/crypto/pulse" data-tab-item="i6insights-tab" data-selected-links="repo_graphs repo_contributors dependency_graph dependabot_updates pulse people community /sj-simmons/crypto/pulse" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Insights&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-graph UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
        <span data-content="Insights">Insights</span>
          <span id="insights-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
</ul>
    <div style="visibility:hidden;" data-view-component="true" class="UnderlineNav-actions js-responsive-underlinenav-overflow position-absolute pr-3 pr-md-4 pr-lg-5 right-0">      <details data-view-component="true" class="details-overlay details-reset position-relative">
  <summary role="button" data-view-component="true">          <div class="UnderlineNav-item mr-0 border-0">
            <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-kebab-horizontal">
    <path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path>
</svg>
            <span class="sr-only">More</span>
          </div>
</summary>
  <details-menu role="menu" data-view-component="true" class="dropdown-menu dropdown-menu-sw">          <ul>
              <li data-menu-item="i0code-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item selected dropdown-item" aria-current="page" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages repo_deployments /sj-simmons/crypto" href="/sj-simmons/crypto">
                  Code
</a>              </li>
              <li data-menu-item="i1issues-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_issues repo_labels repo_milestones /sj-simmons/crypto/issues" href="/sj-simmons/crypto/issues">
                  Issues
</a>              </li>
              <li data-menu-item="i2pull-requests-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_pulls checks /sj-simmons/crypto/pulls" href="/sj-simmons/crypto/pulls">
                  Pull requests
</a>              </li>
              <li data-menu-item="i3actions-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_actions /sj-simmons/crypto/actions" href="/sj-simmons/crypto/actions">
                  Actions
</a>              </li>
              <li data-menu-item="i4projects-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_projects new_repo_project repo_project /sj-simmons/crypto/projects" href="/sj-simmons/crypto/projects">
                  Projects
</a>              </li>
              <li data-menu-item="i5security-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="security overview alerts policy token_scanning code_scanning /sj-simmons/crypto/security" href="/sj-simmons/crypto/security">
                  Security
</a>              </li>
              <li data-menu-item="i6insights-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_graphs repo_contributors dependency_graph dependabot_updates pulse people community /sj-simmons/crypto/pulse" href="/sj-simmons/crypto/pulse">
                  Insights
</a>              </li>
          </ul>
</details-menu>
</details></div>
</nav>

  </div>

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance" class="">
    <div id="repo-content-pjax-container" class="repository-content " >
    


    
      
  <h1 class='sr-only'>sj-simmons/crypto</h1>
  <div class="clearfix container-xl mt-4 px-md-4 px-lg-5 px-3">
    

<div>
  


  <div id="spoof-warning" class="mt-0 pb-3" hidden aria-hidden>
  <div data-view-component="true" class="flash flash-warn mt-0 clearfix">
  
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert float-left mt-1">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>

      <div class="overflow-hidden">This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.</div>


  
</div></div>

  <include-fragment src="/sj-simmons/crypto/spoofed_commit_check/bc664e8ea0bf9296c16b58217646ce8c56a14876" data-test-selector="spoofed-commit-check"></include-fragment>

  <div data-view-component="true" class="Layout Layout--flowRow-until-md Layout--sidebarPosition-end Layout--sidebarPosition-flowRow-end">
  <div data-view-component="true" class="Layout-main">        
        
        <div class="file-navigation mb-3 d-flex flex-items-start">
  
<div class="position-relative">
  <details
    class="js-branch-select-menu details-reset details-overlay mr-0 mb-0 "
    id="branch-select-menu"
    data-hydro-click-payload="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;REFS_SELECTOR_MENU&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="8910951aa2a8ac2c1f2d0e5ce4b72ee6cdb70863d14f7f4c4887c9286ceafe90">
    <summary class="btn css-truncate"
            data-hotkey="w"
            title="Switch branches or tags">
      <svg text="gray" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-branch">
    <path d="M9.5 3.25a2.25 2.25 0 1 1 3 2.122V6A2.5 2.5 0 0 1 10 8.5H6a1 1 0 0 0-1 1v1.128a2.251 2.251 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.5 0v1.836A2.493 2.493 0 0 1 6 7h4a1 1 0 0 0 1-1v-.628A2.25 2.25 0 0 1 9.5 3.25Zm-6 0a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Zm8.25-.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5ZM4.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"></path>
</svg>
      <span class="css-truncate-target" data-menu-button>main</span>
      <span class="dropdown-caret"></span>
    </summary>

    
<div class="SelectMenu">
  <div class="SelectMenu-modal">
    <header class="SelectMenu-header">
      <span class="SelectMenu-title">Switch branches/tags</span>
      <button class="SelectMenu-closeButton" type="button" data-toggle-for="branch-select-menu"><svg aria-label="Close menu" aria-hidden="false" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
    </header>

    <input-demux data-action="tab-container-change:input-demux#storeInput tab-container-changed:input-demux#updateInput">
      <tab-container class="d-flex flex-column js-branches-tags-tabs" style="min-height: 0;">
        <div class="SelectMenu-filter">
          <input data-target="input-demux.source"
                 id="context-commitish-filter-field"
                 class="SelectMenu-input form-control"
                 aria-owns="ref-list-branches"
                 data-controls-ref-menu-id="ref-list-branches"
                 autofocus
                 autocomplete="off"
                 aria-label="Filter branches/tags"
                 placeholder="Filter branches/tags"
                 type="text"
          >
        </div>

        <div class="SelectMenu-tabs" role="tablist" data-target="input-demux.control" >
          <button class="SelectMenu-tab" type="button" role="tab" aria-selected="true">Branches</button>
          <button class="SelectMenu-tab" type="button" role="tab">Tags</button>
        </div>

        <div role="tabpanel" id="ref-list-branches" data-filter-placeholder="Filter branches/tags" tabindex="" class="d-flex flex-column flex-auto overflow-auto">
          <ref-selector
            type="branch"
            data-targets="input-demux.sinks"
            data-action="
              input-entered:ref-selector#inputEntered
              tab-selected:ref-selector#tabSelected
              focus-list:ref-selector#focusFirstListMember
            "
            query-endpoint="/sj-simmons/crypto/refs"
            
            cache-key="v0:1618603660.503231"
            current-committish="bWFpbg=="
            default-branch="bWFpbg=="
            name-with-owner="c2otc2ltbW9ucy9jcnlwdG8="
            prefetch-on-mouseover
          >

            <template data-target="ref-selector.fetchFailedTemplate">
              <div class="SelectMenu-message" data-index="{{ index }}">Could not load branches</div>
            </template>

              <template data-target="ref-selector.noMatchTemplate">
    <div class="SelectMenu-message">Nothing to show</div>
</template>


            <div data-target="ref-selector.listContainer" role="menu" class="SelectMenu-list " data-turbo-frame="repo-content-turbo-frame">
              <div class="SelectMenu-loading pt-3 pb-0 overflow-hidden" aria-label="Menu is loading">
                <svg style="box-sizing: content-box; color: var(--color-icon-primary);" width="32" height="32" viewBox="0 0 16 16" fill="none" data-view-component="true" class="anim-rotate">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke" />
</svg>
              </div>
            </div>

              

<template data-target="ref-selector.itemTemplate">
  <a href="https://github.com/sj-simmons/crypto/tree/{{ urlEncodedRefName }}" class="SelectMenu-item" role="menuitemradio" rel="nofollow" aria-checked="{{ isCurrent }}" data-index="{{ index }}" >
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check SelectMenu-icon SelectMenu-icon--check">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    <span class="flex-1 css-truncate css-truncate-overflow {{ isFilteringClass }}">{{ refName }}</span>
    <span hidden="{{ isNotDefault }}" class="Label Label--secondary flex-self-start">default</span>
  </a>
</template>


              <footer class="SelectMenu-footer"><a href="/sj-simmons/crypto/branches">View all branches</a></footer>
          </ref-selector>

        </div>

        <div role="tabpanel" id="tags-menu" data-filter-placeholder="Find a tag" tabindex="" hidden class="d-flex flex-column flex-auto overflow-auto">
          <ref-selector
            type="tag"
            data-action="
              input-entered:ref-selector#inputEntered
              tab-selected:ref-selector#tabSelected
              focus-list:ref-selector#focusFirstListMember
            "
            data-targets="input-demux.sinks"
            query-endpoint="/sj-simmons/crypto/refs"
            cache-key="v0:1618603660.503231"
            current-committish="bWFpbg=="
            default-branch="bWFpbg=="
            name-with-owner="c2otc2ltbW9ucy9jcnlwdG8="
          >

            <template data-target="ref-selector.fetchFailedTemplate">
              <div class="SelectMenu-message" data-index="{{ index }}">Could not load tags</div>
            </template>

            <template data-target="ref-selector.noMatchTemplate">
              <div class="SelectMenu-message" data-index="{{ index }}">Nothing to show</div>
            </template>

              

<template data-target="ref-selector.itemTemplate">
  <a href="https://github.com/sj-simmons/crypto/tree/{{ urlEncodedRefName }}" class="SelectMenu-item" role="menuitemradio" rel="nofollow" aria-checked="{{ isCurrent }}" data-index="{{ index }}" >
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check SelectMenu-icon SelectMenu-icon--check">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    <span class="flex-1 css-truncate css-truncate-overflow {{ isFilteringClass }}">{{ refName }}</span>
    <span hidden="{{ isNotDefault }}" class="Label Label--secondary flex-self-start">default</span>
  </a>
</template>


            <div data-target="ref-selector.listContainer" role="menu" class="SelectMenu-list" data-turbo-frame="repo-content-turbo-frame">
              <div class="SelectMenu-loading pt-3 pb-0 overflow-hidden" aria-label="Menu is loading">
                <svg style="box-sizing: content-box; color: var(--color-icon-primary);" width="32" height="32" viewBox="0 0 16 16" fill="none" data-view-component="true" class="anim-rotate">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke" />
</svg>
              </div>
            </div>
              <footer class="SelectMenu-footer"><a href="/sj-simmons/crypto/tags">View all tags</a></footer>
          </ref-selector>
        </div>
      </tab-container>
    </input-demux>
  </div>
</div>

  </details>

</div>


<div class="Overlay--hidden Overlay-backdrop--center" data-modal-dialog-overlay>
  <modal-dialog role="dialog" id="warn-tag-match-create-branch-dialog" aria-modal="true" aria-labelledby="warn-tag-match-create-branch-dialog-header" data-view-component="true" class="Overlay Overlay--width-large Overlay--height-auto Overlay--motion-scaleFade">
      <header class="Overlay-header Overlay-header--large Overlay-header--divided">
        <div class="Overlay-headerContentWrap">
          <div class="Overlay-titleWrap">
            <h1 id="warn-tag-match-create-branch-dialog-header" class="Overlay-title">Name already in use</h1>
          </div>
          <div class="Overlay-actionWrap">
            <button data-close-dialog-id="warn-tag-match-create-branch-dialog" aria-label="Close" type="button" data-view-component="true" class="close-button Overlay-closeButton"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
          </div>
        </div>
      </header>
    <div class="Overlay-body ">
      
          <div data-view-component="true">      A tag already exists with the provided branch name. Many Git commands accept both tag and branch names, so creating this branch may cause unexpected behavior. Are you sure you want to create this branch?
</div>

    </div>
      <footer class="Overlay-footer Overlay-footer--alignEnd">
            <button data-close-dialog-id="warn-tag-match-create-branch-dialog" type="button" data-view-component="true" class="btn">    Cancel
</button>
            <button data-submit-dialog-id="warn-tag-match-create-branch-dialog" type="button" data-view-component="true" class="btn-danger btn">    Create
</button>
      </footer>
</modal-dialog></div>



  <div class="flex-self-center flex-self-stretch d-none flex-items-center lh-condensed-ultra d-lg-flex">
    <a data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/sj-simmons/crypto/branches" class="ml-3 Link--primary no-underline">
          <svg text="gray" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-branch">
    <path d="M9.5 3.25a2.25 2.25 0 1 1 3 2.122V6A2.5 2.5 0 0 1 10 8.5H6a1 1 0 0 0-1 1v1.128a2.251 2.251 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.5 0v1.836A2.493 2.493 0 0 1 6 7h4a1 1 0 0 0 1-1v-.628A2.25 2.25 0 0 1 9.5 3.25Zm-6 0a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Zm8.25-.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5ZM4.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"></path>
</svg>
          <strong>1</strong>
          <span class="color-fg-muted">branch</span>
    </a>
    <a data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/sj-simmons/crypto/tags" class="ml-3 Link--primary no-underline">
      <svg text="gray" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-tag">
    <path d="M1 7.775V2.75C1 1.784 1.784 1 2.75 1h5.025c.464 0 .91.184 1.238.513l6.25 6.25a1.75 1.75 0 0 1 0 2.474l-5.026 5.026a1.75 1.75 0 0 1-2.474 0l-6.25-6.25A1.752 1.752 0 0 1 1 7.775Zm1.5 0c0 .066.026.13.073.177l6.25 6.25a.25.25 0 0 0 .354 0l5.025-5.025a.25.25 0 0 0 0-.354l-6.25-6.25a.25.25 0 0 0-.177-.073H2.75a.25.25 0 0 0-.25.25ZM6 5a1 1 0 1 1 0 2 1 1 0 0 1 0-2Z"></path>
</svg>
        <strong>0</strong>
        <span class="color-fg-muted">tags</span>
    </a>
  </div>

  <div class="flex-auto"></div>

  <include-fragment  src="/sj-simmons/crypto/overview_actions/main"></include-fragment>


    <span class="d-none d-md-flex ml-2">
        
<get-repo class="">
    
    <details class="position-relative details-overlay details-reset js-codespaces-details-container"
             data-action="
               toggle:get-repo#onDetailsToggle
               keydown:get-repo#onDetailsKeydown"
             
    >
        <summary data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;repository_id&quot;:358708166,&quot;target&quot;:&quot;CLONE_OR_DOWNLOAD_BUTTON&quot;,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="9255324b266a87a9d3908c18b5fb70134ff55798ef72a0fd1041c6b9f0f379f5" data-view-component="true" class="Button--primary Button--medium Button flex-1 d-inline-flex">    <span class="Button-content">
      <span class="Button-label">Code</span>
    </span>
      <span class="Button-visual Button-trailingAction">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-triangle-down">
    <path d="m4.427 7.427 3.396 3.396a.25.25 0 0 0 .354 0l3.396-3.396A.25.25 0 0 0 11.396 7H4.604a.25.25 0 0 0-.177.427Z"></path>
</svg>
      </span>
</summary>  
      <div class="position-relative">
        <div class="dropdown-menu dropdown-menu-sw p-0" style="top:6px;width:400px;max-width: calc(100vw - 320px);">
          <div
  data-target="get-repo.modal"
  
>
    <tab-container data-view-component="true">
  <div with_panel="true" data-view-component="true" class="tabnav hx_tabnav-in-dropdown color-bg-subtle m-0">
    
    <ul role="tablist" aria-label="Choose where to access your code" data-view-component="true" class="tabnav-tabs d-flex">
        <li role="presentation" data-view-component="true" class="hx_tabnav-in-dropdown-wrapper flex-1 d-inline-flex">
  <button data-tab="local" data-action="click:get-repo#localTabSelected focusin:get-repo#localTabSelected" id="local-tab" type="button" role="tab" aria-controls="local-panel" aria-selected="true" data-view-component="true" class="tabnav-tab flex-1">
    
      <span data-view-component="true">Local</span>
    
</button></li>
        <li role="presentation" data-view-component="true" class="hx_tabnav-in-dropdown-wrapper flex-1 d-inline-flex">
  <button data-tab="cloud" data-action="click:get-repo#cloudTabSelected focusin:get-repo#cloudTabSelected" data-target="feature-callout.dismisser" id="cloud-tab" type="button" role="tab" aria-controls="cloud-panel" data-view-component="true" class="tabnav-tab flex-1">
    
      <span data-view-component="true">          <span>Codespaces</span>
</span>
    
</button></li>
</ul>    
</div>    <div id="local-panel" role="tabpanel" tabindex="0" aria-labelledby="local-tab" data-view-component="true">          <ul class="list-style-none">
              <li class="Box-row p-3">
  <a class="Link--muted float-right tooltipped tooltipped-s" href="https://docs.github.com/articles/which-remote-url-should-i-use" target="_blank" aria-label="Which remote URL should I use?">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-question">
    <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.92 6.085h.001a.749.749 0 1 1-1.342-.67c.169-.339.436-.701.849-.977C6.845 4.16 7.369 4 8 4a2.756 2.756 0 0 1 1.637.525c.503.377.863.965.863 1.725 0 .448-.115.83-.329 1.15-.205.307-.47.513-.692.662-.109.072-.22.138-.313.195l-.006.004a6.24 6.24 0 0 0-.26.16.952.952 0 0 0-.276.245.75.75 0 0 1-1.248-.832c.184-.264.42-.489.692-.661.103-.067.207-.132.313-.195l.007-.004c.1-.061.182-.11.258-.161a.969.969 0 0 0 .277-.245C8.96 6.514 9 6.427 9 6.25a.612.612 0 0 0-.262-.525A1.27 1.27 0 0 0 8 5.5c-.369 0-.595.09-.74.187a1.01 1.01 0 0 0-.34.398ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
</a>

<div class="text-bold">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-terminal mr-2">
    <path d="M0 2.75C0 1.784.784 1 1.75 1h12.5c.966 0 1.75.784 1.75 1.75v10.5A1.75 1.75 0 0 1 14.25 15H1.75A1.75 1.75 0 0 1 0 13.25Zm1.75-.25a.25.25 0 0 0-.25.25v10.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V2.75a.25.25 0 0 0-.25-.25ZM7.25 8a.749.749 0 0 1-.22.53l-2.25 2.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L5.44 8 3.72 6.28a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l2.25 2.25c.141.14.22.331.22.53Zm1.5 1.5h3a.75.75 0 0 1 0 1.5h-3a.75.75 0 0 1 0-1.5Z"></path>
</svg>
  Clone
</div>

<tab-container>

  <div class="UnderlineNav my-2 box-shadow-none">
    <div class="UnderlineNav-body" role="tablist">
          <button name="button" type="button" role="tab" class="UnderlineNav-item" aria-selected="true" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;USE_HTTPS&quot;,&quot;git_repository_type&quot;:&quot;REPOSITORY&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="7aa1982c758b4c57087960d58af620a94e1aa247fd5e31ed5d6c35bb77c0780e">
            HTTPS
</button>          <button name="button" type="button" role="tab" class="UnderlineNav-item" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;USE_GH_CLI&quot;,&quot;git_repository_type&quot;:&quot;REPOSITORY&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="8261af1ddb74384c76cb9b96632f36fcd79587c64105a60449e9bea7610061e4">
            GitHub CLI
</button>    </div>
  </div>

  <div role="tabpanel">
    <div class="input-group">
  <input type="text" class="form-control input-monospace input-sm color-bg-subtle" data-autoselect value="https://github.com/sj-simmons/crypto.git" aria-label="https://github.com/sj-simmons/crypto.git" readonly>
  <div class="input-group-button">
    <clipboard-copy value="https://github.com/sj-simmons/crypto.git" aria-label="Copy to clipboard" class="btn btn-sm js-clipboard-copy tooltipped-no-delay ClipboardButton js-clone-url-http" data-copy-feedback="Copied!" data-tooltip-direction="n" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;COPY_URL&quot;,&quot;git_repository_type&quot;:&quot;REPOSITORY&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="456067c9ed4c1ad11eb7e1fafda08cdba0697b11fbf04cdfa8476400bb901b4d"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon d-inline-block">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-inline-block d-sm-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg></clipboard-copy>
  </div>
</div>

    <p class="mt-2 mb-0 f6 color-fg-muted">
        Use Git or checkout with SVN using the web URL.
    </p>
  </div>


  <div role="tabpanel" hidden>
    <div class="input-group">
  <input type="text" class="form-control input-monospace input-sm color-bg-subtle" data-autoselect value="gh repo clone sj-simmons/crypto" aria-label="gh repo clone sj-simmons/crypto" readonly>
  <div class="input-group-button">
    <clipboard-copy value="gh repo clone sj-simmons/crypto" aria-label="Copy to clipboard" class="btn btn-sm js-clipboard-copy tooltipped-no-delay ClipboardButton js-clone-url-gh-cli" data-copy-feedback="Copied!" data-tooltip-direction="n" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;COPY_URL&quot;,&quot;git_repository_type&quot;:&quot;REPOSITORY&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="456067c9ed4c1ad11eb7e1fafda08cdba0697b11fbf04cdfa8476400bb901b4d"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon d-inline-block">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-inline-block d-sm-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg></clipboard-copy>
  </div>
</div>

    <p class="mt-2 mb-0 f6 color-fg-muted">
      Work fast with our official CLI.
      <a href="https://cli.github.com" target="_blank">Learn more about the CLI</a>.
    </p>
  </div>
</tab-container>

</li>
<li data-platforms="windows,mac" class="Box-row Box-row--hover-gray p-3 mt-0 rounded-0 js-remove-unless-platform">
  <a class="d-flex flex-items-center color-fg-default text-bold no-underline" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;OPEN_IN_DESKTOP&quot;,&quot;git_repository_type&quot;:&quot;REPOSITORY&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="6df7f6846f2c4e4e6e3732420383e250fe3be9b0d43f35207728613b188af384" data-action="click:get-repo#showDownloadMessage" href="https://desktop.github.com">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-desktop-download mr-2">
    <path d="m4.927 5.427 2.896 2.896a.25.25 0 0 0 .354 0l2.896-2.896A.25.25 0 0 0 10.896 5H8.75V.75a.75.75 0 1 0-1.5 0V5H5.104a.25.25 0 0 0-.177.427Z"></path><path d="M1.573 2.573a.25.25 0 0 0-.073.177v7.5a.25.25 0 0 0 .25.25h12.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25h-3a.75.75 0 1 1 0-1.5h3A1.75 1.75 0 0 1 16 2.75v7.5A1.75 1.75 0 0 1 14.25 12h-3.727c.099 1.041.52 1.872 1.292 2.757A.75.75 0 0 1 11.25 16h-6.5a.75.75 0 0 1-.565-1.243c.772-.885 1.192-1.716 1.292-2.757H1.75A1.75 1.75 0 0 1 0 10.25v-7.5A1.75 1.75 0 0 1 1.75 1h3a.75.75 0 0 1 0 1.5h-3a.25.25 0 0 0-.177.073ZM6.982 12a5.72 5.72 0 0 1-.765 2.5h3.566a5.72 5.72 0 0 1-.765-2.5H6.982Z"></path>
</svg>
    Open with GitHub Desktop
</a></li>
<li class="Box-row Box-row--hover-gray p-3 mt-0" >
  <a class="d-flex flex-items-center color-fg-default text-bold no-underline" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;DOWNLOAD_ZIP&quot;,&quot;git_repository_type&quot;:&quot;REPOSITORY&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e78d670459c6c16248a8eb3422f92f26c4999874dcf6fe27757791960473aef8" data-ga-click="Repository, download zip, location:repo overview" data-open-app="link" data-turbo="false" href="/sj-simmons/crypto/archive/refs/heads/main.zip">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-file-zip mr-2">
    <path d="M3.5 1.75v11.5c0 .09.048.173.126.217a.75.75 0 0 1-.752 1.298A1.748 1.748 0 0 1 2 13.25V1.75C2 .784 2.784 0 3.75 0h5.586c.464 0 .909.185 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v8.586A1.75 1.75 0 0 1 12.25 15h-.5a.75.75 0 0 1 0-1.5h.5a.25.25 0 0 0 .25-.25V4.664a.25.25 0 0 0-.073-.177L9.513 1.573a.25.25 0 0 0-.177-.073H7.25a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5h-3a.25.25 0 0 0-.25.25Zm3.75 8.75h.5c.966 0 1.75.784 1.75 1.75v3a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1-.75-.75v-3c0-.966.784-1.75 1.75-1.75ZM6 5.25a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 6 5.25Zm.75 2.25h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5ZM8 6.75A.75.75 0 0 1 8.75 6h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 8 6.75ZM8.75 3h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5ZM8 9.75A.75.75 0 0 1 8.75 9h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 8 9.75Zm-1 2.5v2.25h1v-2.25a.25.25 0 0 0-.25-.25h-.5a.25.25 0 0 0-.25.25Z"></path>
</svg>
    Download ZIP
</a></li>

          </ul>
</div>
    <div id="cloud-panel" role="tabpanel" tabindex="0" hidden="hidden" aria-labelledby="cloud-tab" data-view-component="true" class="cloud-panel">            <div data-view-component="true" class="blankslate">
    <h4 data-view-component="true" class="mb-1">Sign In Required</h4>
  
              <p class="mt-2 mx-4">
                Please
                <a href="/codespaces/new?hide_repo_select=true&amp;ref=main&amp;repo=358708166" data-view-component="true" class="no-underline">sign in</a>
                to use Codespaces.
              </p>

</div></div>
</tab-container></div>


<div class="p-3" data-targets="get-repo.platforms" data-platform="mac" hidden>
  <h4 class="lh-condensed mb-3">Launching GitHub Desktop<span class="AnimatedEllipsis"></span></h4>
  <p class="color-fg-muted">
    If nothing happens, <a href="https://desktop.github.com/">download GitHub Desktop</a> and try again.
  </p>
    <button data-action="click:get-repo#onDetailsToggle" type="button" data-view-component="true" class="btn-link">
</button>
</div>
<div class="p-3" data-targets="get-repo.platforms" data-platform="windows" hidden>
  <h4 class="lh-condensed mb-3">Launching GitHub Desktop<span class="AnimatedEllipsis"></span></h4>
  <p class="color-fg-muted">
    If nothing happens, <a href="https://desktop.github.com/">download GitHub Desktop</a> and try again.
  </p>
    <button data-action="click:get-repo#onDetailsToggle" type="button" data-view-component="true" class="btn-link">
</button>
</div>
<div class="p-3" data-targets="get-repo.platforms" data-platform="xcode" hidden>
  <h4 class="lh-condensed mb-3">Launching Xcode<span class="AnimatedEllipsis"></span></h4>
  <p class="color-fg-muted">
    If nothing happens, <a href="https://developer.apple.com/xcode/">download Xcode</a> and try again.
  </p>
    <button data-action="click:get-repo#onDetailsToggle" type="button" data-view-component="true" class="btn-link">
</button>
</div>
<div class="p-3 " data-targets="get-repo.platforms" data-target="new-codespace.loadingVscode create-button.loadingVscode" data-platform="vscode" hidden>
  <poll-include-fragment data-target="get-repo.vscodePoller new-codespace.vscodePoller create-button.vscodePoller">
    <h4 class="lh-condensed mb-3">Launching Visual Studio Code<span class="AnimatedEllipsis" data-hide-on-error></span></h4>
    <p class="color-fg-muted" data-hide-on-error>Your codespace will open once ready.</p>
    <p class="color-fg-muted" data-show-on-error hidden>There was a problem preparing your codespace, please try again.</p>
  </poll-include-fragment>
</div>


        </div>
      </div>
    </details>


</get-repo>

    </span>

    <span class="d-none d-lg-flex">
        

    </span>
</div>




        


<div class="Box mb-3" >
  <div class="Box-header position-relative">
    <h2 class="sr-only">Latest commit</h2>
    <div class="js-details-container Details d-flex rounded-top-2 flex-items-center flex-wrap" data-issue-and-pr-hovercards-enabled>
      <include-fragment src="/sj-simmons/crypto/tree-commit/bc664e8ea0bf9296c16b58217646ce8c56a14876" class="d-flex flex-auto flex-items-center" aria-busy="true" aria-label="Loading latest commit">
        <div class="Skeleton avatar avatar-user flex-shrink-0 ml-n1 mr-n1 mt-n1 mb-n1" style="width:24px;height:24px;"></div>
        <div class="Skeleton Skeleton--text col-5 ml-3">&nbsp;</div>
</include-fragment>      <div class="flex-shrink-0">
        <h2 class="sr-only">Git stats</h2>
        <ul class="list-style-none d-flex">
          <li class="ml-0 ml-md-3">
            <a data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/sj-simmons/crypto/commits/main" class="pl-3 pr-3 py-3 p-md-0 mt-n3 mb-n3 mr-n3 m-md-0 Link--primary no-underline no-wrap">
              <svg text="gray" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-history">
    <path d="m.427 1.927 1.215 1.215a8.002 8.002 0 1 1-1.6 5.685.75.75 0 1 1 1.493-.154 6.5 6.5 0 1 0 1.18-4.458l1.358 1.358A.25.25 0 0 1 3.896 6H.25A.25.25 0 0 1 0 5.75V2.104a.25.25 0 0 1 .427-.177ZM7.75 4a.75.75 0 0 1 .75.75v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5A.75.75 0 0 1 7.75 4Z"></path>
</svg>
              <span class="d-none d-sm-inline">
                    <strong>16</strong>
                    <span aria-label="Commits on main" class="color-fg-muted d-none d-lg-inline">
                      commits
                    </span>
              </span>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
    <h2 id="files"  class="sr-only">Files</h2>
    


  <include-fragment src="/sj-simmons/crypto/file-list/main">
      <a class="d-none js-permalink-shortcut" data-hotkey="y" href="/sj-simmons/crypto/tree/bc664e8ea0bf9296c16b58217646ce8c56a14876">Permalink</a>

  <div data-view-component="true" class="include-fragment-error flash flash-error flash-full py-2">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    Failed to load latest commit information.


  
</div>  <div class="js-details-container Details" data-hpc>
    <div role="grid" aria-labelledby="files" class="Details-content--hidden-not-important js-navigation-container js-active-navigation-container d-md-block">
      <div class="sr-only" role="row">
        <div role="columnheader">Type</div>
        <div role="columnheader">Name</div>
        <div role="columnheader" class="d-none d-md-block">Latest commit message</div>
        <div role="columnheader">Commit time</div>
      </div>

        <div role="row" class="Box-row Box-row--focus-gray py-2 d-flex position-relative js-navigation-item ">
          <div role="gridcell" class="mr-3 flex-shrink-0" style="width: 16px;">
              <svg aria-label="Directory" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-file-directory-fill hx_color-icon-directory">
    <path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path>
</svg>
          </div>

          <div role="rowheader" class="flex-auto min-width-0 col-md-2 mr-3">
            <span class="css-truncate css-truncate-target d-block width-fit"><a class="js-navigation-open Link--primary" title="images" data-turbo-frame="repo-content-turbo-frame" href="/sj-simmons/crypto/tree/main/images">images</a></span>
          </div>

          <div role="gridcell" class="flex-auto min-width-0 d-none d-md-block col-5 mr-3" >
              <div class="Skeleton Skeleton--text col-7">&nbsp;</div>
          </div>

          <div role="gridcell" class="color-fg-muted text-right" style="width:100px;">
              <div class="Skeleton Skeleton--text">&nbsp;</div>
          </div>

        </div>
        <div role="row" class="Box-row Box-row--focus-gray py-2 d-flex position-relative js-navigation-item ">
          <div role="gridcell" class="mr-3 flex-shrink-0" style="width: 16px;">
              <svg aria-label="Directory" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-file-directory-fill hx_color-icon-directory">
    <path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path>
</svg>
          </div>

          <div role="rowheader" class="flex-auto min-width-0 col-md-2 mr-3">
            <span class="css-truncate css-truncate-target d-block width-fit"><a class="js-navigation-open Link--primary" title="svgs" data-turbo-frame="repo-content-turbo-frame" href="/sj-simmons/crypto/tree/main/svgs">svgs</a></span>
          </div>

          <div role="gridcell" class="flex-auto min-width-0 d-none d-md-block col-5 mr-3" >
              <div class="Skeleton Skeleton--text col-7">&nbsp;</div>
          </div>

          <div role="gridcell" class="color-fg-muted text-right" style="width:100px;">
              <div class="Skeleton Skeleton--text">&nbsp;</div>
          </div>

        </div>
        <div role="row" class="Box-row Box-row--focus-gray py-2 d-flex position-relative js-navigation-item ">
          <div role="gridcell" class="mr-3 flex-shrink-0" style="width: 16px;">
              <svg aria-label="File" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-file color-fg-muted">
    <path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path>
</svg>
          </div>

          <div role="rowheader" class="flex-auto min-width-0 col-md-2 mr-3">
            <span class="css-truncate css-truncate-target d-block width-fit"><a class="js-navigation-open Link--primary" title="README.md" data-turbo-frame="repo-content-turbo-frame" href="/sj-simmons/crypto/blob/main/README.md">README.md</a></span>
          </div>

          <div role="gridcell" class="flex-auto min-width-0 d-none d-md-block col-5 mr-3" >
              <div class="Skeleton Skeleton--text col-7">&nbsp;</div>
          </div>

          <div role="gridcell" class="color-fg-muted text-right" style="width:100px;">
              <div class="Skeleton Skeleton--text">&nbsp;</div>
          </div>

        </div>
        <div role="row" class="Box-row Box-row--focus-gray py-2 d-flex position-relative js-navigation-item ">
          <div role="gridcell" class="mr-3 flex-shrink-0" style="width: 16px;">
              <svg aria-label="File" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-file color-fg-muted">
    <path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path>
</svg>
          </div>

          <div role="rowheader" class="flex-auto min-width-0 col-md-2 mr-3">
            <span class="css-truncate css-truncate-target d-block width-fit"><a class="js-navigation-open Link--primary" title="chisq_hist.py" data-turbo-frame="repo-content-turbo-frame" href="/sj-simmons/crypto/blob/main/chisq_hist.py">chisq_hist.py</a></span>
          </div>

          <div role="gridcell" class="flex-auto min-width-0 d-none d-md-block col-5 mr-3" >
              <div class="Skeleton Skeleton--text col-7">&nbsp;</div>
          </div>

          <div role="gridcell" class="color-fg-muted text-right" style="width:100px;">
              <div class="Skeleton Skeleton--text">&nbsp;</div>
          </div>

        </div>
    </div>
    <div class="Details-content--shown Box-footer d-md-none p-0">
        <button aria-expanded="false" type="button" data-view-component="true" class="js-details-target btn-link d-block width-full px-3 py-2">    View code
</button>    </div>
  </div>

</include-fragment>


</div>

  
      <readme-toc>

      <div id="readme" class="Box md js-code-block-container js-code-nav-container js-tagsearch-file Box--responsive"
          data-tagsearch-path="README.md"
          data-tagsearch-lang="Markdown">

        <div class="d-flex  js-sticky js-position-sticky top-0 border-top-0 border-bottom p-2 flex-items-center flex-justify-between color-bg-default rounded-top-2"  style="position: sticky; z-index: 30;" >
          <div class="d-flex flex-items-center">
              <details
  data-target="readme-toc.trigger"
  data-menu-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;trigger&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}"
  data-menu-hydro-click-hmac="674d699acb21e990b7cd1f9774ef0b0ee6c4075a892e3923974c618c60b2fc2e"
  class="dropdown details-reset details-overlay"
>
  <summary
    class="btn btn-octicon m-0 mr-2 p-2"
    aria-haspopup="true"
    aria-label="Table of Contents">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-list-unordered">
    <path d="M5.75 2.5h8.5a.75.75 0 0 1 0 1.5h-8.5a.75.75 0 0 1 0-1.5Zm0 5h8.5a.75.75 0 0 1 0 1.5h-8.5a.75.75 0 0 1 0-1.5Zm0 5h8.5a.75.75 0 0 1 0 1.5h-8.5a.75.75 0 0 1 0-1.5ZM2 14a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm1-6a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM2 4a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
</svg>
  </summary>


  <details-menu class="SelectMenu" role="menu">
    <div class="SelectMenu-modal rounded-3 mt-1" style="max-height:340px;">

        <div class="SelectMenu-filter">
          <input
            class="SelectMenu-input form-control js-filterable-field"
            id="toc-filter-field"
            type="text"
            autocomplete="off"
            spellcheck="false"
            autofocus
            placeholder="Filter headings"
            aria-label="Filter headings">
        </div>

      <div class="SelectMenu-list SelectMenu-list--borderless p-2" style="overscroll-behavior: contain;" data-filterable-for="toc-filter-field" data-filterable-type="substring">
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 text-emphasized" style="-webkit-box-orient: vertical; padding-left: 12px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#crypto-senior-sem">crypto senior sem</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#from-cryptography-to-zero-knowledge-proofs">From cryptography to zero-knowledge proofs</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#contents">Contents</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#getting-started">Getting started</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#the-integers-modulo-n">The integers modulo n</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#pseudo-random-sequences">Pseudo-random sequences</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#hammer-projects-hammer"><g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji> Projects <g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji></a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-1">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-2">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#cryptographic-security">Cryptographic security</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-1">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#references">References</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 24px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#ii-numero-algebraic-practicalities">II. Numero-algebraic practicalities</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#prime-fields">Prime fields</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-3">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-2">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#generating-primes">Generating primes</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-3">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-4">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-4">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#eulers-totient-function">Euler's totient function</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-5">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-5">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 24px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#iii-leveraging-the-intractability-of-integer-factorization">III. Leveraging the intractability of integer factorization</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#plain-rsa">Plain RSA</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#how-to-set-up-your-keys">How to set up your keys</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#how-to-decrypt">How to decrypt</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-6">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#fermat-factoring-attack">Fermat-factoring attack</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-zapchallengeszap">Exercises <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji>Challenges<g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji></a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-6">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#pseudo-random-bit-generation">Pseudo-random bit generation</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#blum-blum-shub">Blum Blum Shub</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#hammer-projects-hammer-1"><g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji> Projects <g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji></a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#algebraic-formulation-of-rsa">Algebraic formulation of RSA</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#more-attacks">More attacks</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-7">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#chosen-ciphertext-attack">Chosen-ciphertext attack</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#zap-challenge-zap"><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji> Challenge <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji></a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#malleability">Malleability</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#toward-semantic-security">Toward semantic security</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#encoding-human-readable-messages">Encoding human-readable messages</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-8">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#padding">Padding</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-7">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#hashing-and-signing">Hashing and Signing</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-8">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#optimal-asymmetric-encryption-padding">Optimal asymmetric encryption padding</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#references-1">References</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 24px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#iv-leveraging-intractability-discrete-logarithms">IV. Leveraging intractability: discrete logarithms</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-9">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#elgamal-encryption">ElGamal encryption</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-10">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#abstract-algebraic-formulation-and-complexity">Abstract algebraic formulation and complexity</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercises-9">Exercises</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#elgamal-over-an-elliptic-curve">ElGamal over an elliptic curve</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#hammer-projects-hammer-2"><g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji> Projects <g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji></a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-11">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-12">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-13">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#exercise-14">Exercise</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#diffie-hellman-key-exchange">Diffie-Hellman key exchange</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#digital-signing-with-elgamal">Digital signing with ElGamal</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#references-2">References</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#elliptic-curves">Elliptic Curves</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#more-toolstutorials">More Tools/tutorials</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#quick-start-on-making-basic-number-theoreticcryptography-computations-in-high-performance-python">Quick start on making basic number-theoretic/cryptography computations in high-performance Python</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#use-simmons-numlib-to-instantiate-and-compute-in-python-in-a-finite-field-or-in-an-elliptic-curve-over-a-finite-field">Use Simmons' numlib to instantiate and compute, in Python, in a finite field or in an elliptic curve over a finite field.</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#install-and-use-sage-as-a-python-library">Install and use Sage as a Python library</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#install-parigp-and-use-it-as-a-python-library">Install PARI/GP and use it as a Python library</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#more-resourcereferences">More Resource/References</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#resources">Resources</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#libraries">Libraries</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#homomophic-encryption">Homomophic encryption</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#curves-related">Curves related</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#cryptocurrencies">Cryptocurrencies</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#zero-knowledge">Zero knowledge</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 48px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#more-literature">More literature</a>
          <a role="menuitem" class="filter-item SelectMenu-item ws-normal wb-break-word line-clamp-2 py-1 " style="-webkit-box-orient: vertical; padding-left: 36px;" data-action="click:readme-toc#blur" data-targets="readme-toc.entries" data-hydro-click="{&quot;event_type&quot;:&quot;repository_toc_menu.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;entry&quot;,&quot;repository_id&quot;:358708166,&quot;originating_url&quot;:&quot;https://github.com/sj-simmons/crypto&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2be460c78087b0c752d0e54971f95bd6a1cd59372436fb12ccb7ea2044627f59" href="#more">More</a>
      </div>
    </div>
  </details-menu>
</details>

            <h2 class="Box-title">
              <a href="#readme" data-view-component="true" class="Link--primary">README.md</a>
            </h2>
          </div>
        </div>

          <div data-target="readme-toc.content" class="Box-body px-5 pb-5">
            <article class="markdown-body entry-content container-lg" itemprop="text"><h1 tabindex="-1" dir="auto"><a id="user-content-crypto-senior-sem" class="anchor" aria-hidden="true" href="#crypto-senior-sem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>crypto senior sem</h1>
<h3 tabindex="-1" dir="auto"><a id="user-content-from-cryptography-to-zero-knowledge-proofs" class="anchor" aria-hidden="true" href="#from-cryptography-to-zero-knowledge-proofs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>From cryptography to zero-knowledge proofs</h3>
<p dir="auto">This course is about state-of-the-art information-theoretic advancements in cryptography.
We begin with pseudo-random number generation and then move to certain asymmetric cryptographic primitives, their underlying mathematics, and real-world implementations of protocols based on those.
As time permits, we study zero-knowledge proofs and protocols and their role in present-day FinTech.</p>
<p dir="auto">Important:</p>
<p dir="auto">The mathematical and cryptographical primitives discussed in this course have of late been
fashioned — artfully, in some cases — into cryptocurrencies.  However, as far as speculating
in cryptocurrencies, we think that you are likely better off not doing so. Whether or not you take that
advice, you might do well to look under the hood of the new-fangled tech that is built atop a rather
striking assemblage of pure and applied Math and CS.</p>
<h3 tabindex="-1" dir="auto"><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contents</h3>
<p dir="auto">I. <a href="#i-preliminaries">Preliminaries</a></p>
<ul dir="auto">
<li><a href="#the-integers-modulo-n">The integers modulo n</a></li>
<li><a href="#pseudo-random-sequences">Pseudo-random sequences</a></li>
<li><a href="#cryptographic-security">Cryptographic security</a></li>
</ul>
<p dir="auto">II. <a href="#ii-numero-algebraic-practicalities">Numero-algebraic practicalities</a></p>
<ul dir="auto">
<li><a href="#prime-fields">Prime fields</a></li>
<li><a href="#generating-primes">Generating primes</a></li>
<li><a href="#eulers-totient-function">Euler's totient function</a></li>
</ul>
<p dir="auto">III. <a href="#iii-leveraging-the-intractability-of-integer-factorization">Leveraging the intractability integer factorization</a></p>
<ul dir="auto">
<li><a href="#plain-rsa">Plain RSA</a>
<ul dir="auto">
<li><a href="#fermat-factoring-attack">Fermat-factoring attack</a></li>
</ul>
</li>
<li><a href="#pseudo-random-bit-generation">Pseudo-random bit generation</a>
<ul dir="auto">
<li><a href="#blum-blum-shub">Blum Blum Shub</a></li>
</ul>
</li>
<li><a href="#algebraic-formulation-of-rsa">Algebraic formulation of RSA</a></li>
<li><a href="#more-attacks">More attacks</a></li>
<li><a href="#toward-semantic-security">Toward semantic security</a></li>
<li><a href="#hashing-and-signing">Hashing and signing</a></li>
</ul>
<p dir="auto">IV. <a href="#iv-leveraging-intractability-discrete-logarithms">Leveraging intractability: discrete logarithms</a></p>
<ul dir="auto">
<li><a href="#elgamal-encryption">ElGamal encryption</a></li>
<li><a href="#abstract-algebraic-formulation-and-complexity">Abstract algebraic formulation and complexity</a></li>
<li><a href="#elgamal-over-an-elliptic-curve">ElGamal over an elliptic curve</a></li>
<li><a href="#diffie-hellman-key-exchange">Diffie-Hellman key exchange</a></li>
</ul>
<h3 tabindex="-1" dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h3>
<ul dir="auto">
<li>First, install <a href="https://github.com/sj-simmons/polylib">polylib</a>,</li>
<li>then install <a href="https://github.com/sj-simmons/numlib">numlib</a>,</li>
<li>then read on.</li>
</ul>
<h3 tabindex="-1" dir="auto"><a id="user-content-the-integers-modulo-n" class="anchor" aria-hidden="true" href="#the-integers-modulo-n"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The integers modulo n</h3>
<p dir="auto">As a preview, let us test drive an implementation of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d215d5678475670faee10a078d5cb50.svg"><img alt="$\mathbb{Z}/n\mathbb{Z}.$" src="/sj-simmons/crypto/raw/main/svgs/2d215d5678475670faee10a078d5cb50.svg" valign="-4.109589000000009px" width="44.57019104999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a3f3ee66a29182d90ff26e24025b8cc2.svg"><img alt="$n\in\mathbb{Z}$" src="/sj-simmons/crypto/raw/main/svgs/a3f3ee66a29182d90ff26e24025b8cc2.svg" valign="-0.6427030499999994px" width="40.916955749999985pt" height="11.966898899999999pt" style="max-width: 100%;"></a> be a fixed positive integer. We say that integers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/deceeaf6940a8c7a5a02373728002b0f.svg"><img alt="$y$" src="/sj-simmons/crypto/raw/main/svgs/deceeaf6940a8c7a5a02373728002b0f.svg" valign="-3.1963502999999895px" width="8.649225749999989pt" height="10.2739725pt" style="max-width: 100%;"></a>
are <em>congruent</em> modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> divides their difference, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9f2c06cdc6a6490da6493c39ee7fff19.svg"><img alt="$x-y;$" src="/sj-simmons/crypto/raw/main/svgs/9f2c06cdc6a6490da6493c39ee7fff19.svg" valign="-3.19635195px" width="42.70160894999999pt" height="12.785402849999999pt" style="max-width: 100%;"></a> and we write
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4d9c623e074917251d15a526637c7fc1.svg"><img alt="$x \equiv y \mod n.$" src="/sj-simmons/crypto/raw/main/svgs/4d9c623e074917251d15a526637c7fc1.svg" valign="-3.1963503000000055px" width="102.33983759999998pt" height="14.611878599999999pt" style="max-width: 100%;"></a> For instance, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9c6a23824157e2ef6366d33b5b037282.svg"><img alt="$17 \equiv 2 \mod 5.$" src="/sj-simmons/crypto/raw/main/svgs/9c6a23824157e2ef6366d33b5b037282.svg" valign="0.0px" width="107.30560499999999pt" height="11.4155283pt" style="max-width: 100%;"></a></p>
<p dir="auto">One can consider the
<a href="https://en.wikipedia.org/wiki/Ring_(mathematics)" rel="nofollow">ring</a> of integers modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85bc1f723bdc744666d4f2241b1031f7.svg"><img alt="$n,$" src="/sj-simmons/crypto/raw/main/svgs/85bc1f723bdc744666d4f2241b1031f7.svg" valign="-3.1963502999999895px" width="14.433101099999991pt" height="10.2739725pt" style="max-width: 100%;"></a>
denoted <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/94d333ba0aaa5e9c8ce88690986075c2.svg"><img alt="$\mathbb{Z}/n\mathbb{Z}$" src="/sj-simmons/crypto/raw/main/svgs/94d333ba0aaa5e9c8ce88690986075c2.svg" valign="-4.109589000000009px" width="40.00396784999999pt" height="16.438356pt" style="max-width: 100%;"></a> or, more succinctly, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b2db6c8686053451d402312789bf8098.svg"><img alt="$\mathbb{Z}/n.$" src="/sj-simmons/crypto/raw/main/svgs/b2db6c8686053451d402312789bf8098.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a>
Congruence modulo a given <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> defines an
<a href="https://en.wikipedia.org/wiki/Equivalence_relation" rel="nofollow">equivalence relation</a>
on the integers and, as a set, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> consists precisely of the resulting
equivalence classes.</p>
<p dir="auto">An equivalence relation partitions a set into disjoint subsets. For instance,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/34178db573bc75259b7edcfa36f7a3cc.svg"><img alt="$\mathbb{Z}/6$" src="/sj-simmons/crypto/raw/main/svgs/34178db573bc75259b7edcfa36f7a3cc.svg" valign="-4.109589000000009px" width="27.39735899999999pt" height="16.438356pt" style="max-width: 100%;"></a> consists of the 6 equivalence classes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/894c828a46f3ad0f1232271f1d216c12.svg"><img alt="$\{[0],[1],[2],[3],[4],[5]\}$" src="/sj-simmons/crypto/raw/main/svgs/894c828a46f3ad0f1232271f1d216c12.svg" valign="-4.109589000000009px" width="157.0777791pt" height="16.438356pt" style="max-width: 100%;"></a>
where, for example,</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e02c8523dd8bf6edd8277bfcc574720c.svg"><img alt="$$[2]=\{\ldots, -10, -4, 2, 8, 14 \ldots\}.$$" src="/sj-simmons/crypto/raw/main/svgs/e02c8523dd8bf6edd8277bfcc574720c.svg" valign="0.0px" width="223.74397814999998pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Congruence modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is more than just an equivalence relation. The familiar
algebraic (ring) structure of the integers consistently descends to equivalence
classes; e.g., <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a025aa0fb774d541e26f41ecbc1b6084.svg"><img alt="$[3] + [4] = [3 + 4] = [7] = [1]$" src="/sj-simmons/crypto/raw/main/svgs/a025aa0fb774d541e26f41ecbc1b6084.svg" valign="-4.109589000000009px" width="200.91276975pt" height="16.438356pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fabd08d9b3e345dc177462d18af34a35.svg"><img alt="$[3]*[4] = [12] = [0]$" src="/sj-simmons/crypto/raw/main/svgs/fabd08d9b3e345dc177462d18af34a35.svg" valign="-4.109589000000009px" width="136.98606734999998pt" height="16.438356pt" style="max-width: 100%;"></a> in
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b72a5807386b06a8f15ac82f41bd3eb7.svg"><img alt="$\mathbb{Z}/6.$" src="/sj-simmons/crypto/raw/main/svgs/b72a5807386b06a8f15ac82f41bd3eb7.svg" valign="-4.109589000000009px" width="31.96358384999999pt" height="16.438356pt" style="max-width: 100%;"></a> Notationally, we usually drop the square brackets and write,
for example, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bf71b22f335d66b65d2dcb7a6a7e4ae7.svg"><img alt="$3-4 \equiv 5 \mod 6$" src="/sj-simmons/crypto/raw/main/svgs/bf71b22f335d66b65d2dcb7a6a7e4ae7.svg" valign="-1.3698745500000056px" width="122.83057214999998pt" height="12.785402849999999pt" style="max-width: 100%;"></a>; or we might write simply <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d361396bb4e8e788e0c7fb9ddc39cde2.svg"><img alt="$3\cdot 4=0$" src="/sj-simmons/crypto/raw/main/svgs/d361396bb4e8e788e0c7fb9ddc39cde2.svg" valign="0.0px" width="58.447240499999985pt" height="10.5936072pt" style="max-width: 100%;"></a> if it
is already clear that we are working in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b72a5807386b06a8f15ac82f41bd3eb7.svg"><img alt="$\mathbb{Z}/6.$" src="/sj-simmons/crypto/raw/main/svgs/b72a5807386b06a8f15ac82f41bd3eb7.svg" valign="-4.109589000000009px" width="31.96358384999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">In Python, one can use the percent-sign operator to <em>reduce</em> a given integer modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; 123 % 45
33"><pre>&gt;&gt;&gt; <span class="pl-c1">123</span> <span class="pl-k">%</span> <span class="pl-c1">45</span>
33</pre></div>
<p dir="auto">Alternatively, one can use numlib to work in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bdf2e4f3f1d0f1891a0bdcaf49a9b7be.svg"><img alt="$\mathbb{Z}/45$" src="/sj-simmons/crypto/raw/main/svgs/bdf2e4f3f1d0f1891a0bdcaf49a9b7be.svg" valign="-4.109589000000009px" width="35.61656834999999pt" height="16.438356pt" style="max-width: 100%;"></a> as follows.</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; import numlib as nl
&gt;&gt;&gt; R = nl.Zmod(45)
&gt;&gt;&gt; R
Z/45
&gt;&gt;&gt; R(123)
33 + &lt;45&gt;"><pre>&gt;&gt;&gt; <span class="pl-k">import</span> numlib <span class="pl-k">as</span> nl
&gt;&gt;&gt; R <span class="pl-k">=</span> nl.Zmod(<span class="pl-c1">45</span>)
&gt;&gt;&gt; R
Z/45
&gt;&gt;&gt; R(<span class="pl-c1">123</span>)
33 + &lt;45&gt;</pre></div>
<p dir="auto">Here <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cf296d4f4491ba376822fa1933ea099f.svg"><img alt="$\langle 45\rangle$" src="/sj-simmons/crypto/raw/main/svgs/cf296d4f4491ba376822fa1933ea099f.svg" valign="-4.109589000000009px" width="29.22385289999999pt" height="16.438356pt" style="max-width: 100%;"></a> is the equivalence class <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2b761bb36685aa1e815d610294d94eab.svg"><img alt="$[0] = \{45k~|~ k \in \mathbb{Z}\}$" src="/sj-simmons/crypto/raw/main/svgs/2b761bb36685aa1e815d610294d94eab.svg" valign="-4.109589000000009px" width="136.87204079999998pt" height="16.438356pt" style="max-width: 100%;"></a>
(which is in fact an <a href="https://en.wikipedia.org/wiki/Ideal_(ring_theory)" rel="nofollow">ideal</a>
in the ring of integers) so that the notation <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aabe56f4ceb2dfc83627b3ab99dc2c60.svg"><img alt="$33 + \langle 45\rangle$" src="/sj-simmons/crypto/raw/main/svgs/aabe56f4ceb2dfc83627b3ab99dc2c60.svg" valign="-4.109589000000009px" width="65.75346194999999pt" height="16.438356pt" style="max-width: 100%;"></a> reminds us
that we are working modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f2ebeadd36ad2620cbe7f02c861c9da3.svg"><img alt="$45$" src="/sj-simmons/crypto/raw/main/svgs/f2ebeadd36ad2620cbe7f02c861c9da3.svg" valign="0.0px" width="16.438418699999993pt" height="10.5936072pt" style="max-width: 100%;"></a> (or, more abstract algebraically, modulo the ideal
generated by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f2ebeadd36ad2620cbe7f02c861c9da3.svg"><img alt="$45$" src="/sj-simmons/crypto/raw/main/svgs/f2ebeadd36ad2620cbe7f02c861c9da3.svg" valign="0.0px" width="16.438418699999993pt" height="10.5936072pt" style="max-width: 100%;"></a>).</p>
<p dir="auto">Technical note: numlib conveniently coerces types, for instance:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; x = R(123)
&gt;&gt;&gt; 67 * x + 89  # no need to write R(67) * x + R(89)
5 + &lt;45&gt;"><pre>&gt;&gt;&gt; x <span class="pl-k">=</span> R(<span class="pl-c1">123</span>)
&gt;&gt;&gt; <span class="pl-c1">67</span> <span class="pl-k">*</span> x <span class="pl-k">+</span> <span class="pl-c1">89</span>  <span class="pl-c"><span class="pl-c">#</span> no need to write R(67) * x + R(89)</span>
5 + &lt;45&gt;</pre></div>
<p dir="auto">Later we will make extensive use of numlib's implementation of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> as well
as finite fields, elliptic curves, and various quotient rings.
For the rest of Part I, we don't need the full machinery.</p>
<p dir="auto">We won't really even need the <strong>Zmod</strong> class, which introduces a slight reduction in
speed, until later sections. For the next section, we can stay in the integers,
reducing modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> as needed.</p>
<p dir="auto">However, numlib includes several other number-theoretic functions that you may
find useful as we work through the next section:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; import numlib as nl
&gt;&gt;&gt; nl.gcd(31415, 92653)
1
&gt;&gt;&gt; nl.xgcd(31415, 92653)
(1, 26597, -9018)
&gt;&gt;&gt; nl.isprime(3141592653)
False
&gt;&gt;&gt; nl.factor(3141592653)
[3, 107, 9786893]"><pre>&gt;&gt;&gt; <span class="pl-k">import</span> numlib <span class="pl-k">as</span> nl
&gt;&gt;&gt; nl.gcd(<span class="pl-c1">31415</span>, <span class="pl-c1">92653</span>)
1
&gt;&gt;&gt; nl.xgcd(<span class="pl-c1">31415</span>, <span class="pl-c1">92653</span>)
(1, 26597, -9018)
&gt;&gt;&gt; nl.isprime(<span class="pl-c1">3141592653</span>)
False
&gt;&gt;&gt; nl.factor(<span class="pl-c1">3141592653</span>)
[3, 107, 9786893]</pre></div>
<p dir="auto">One may get help on a command in the interpreter:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; help(nl.xgcd)
  Help on function xgcd in module numlib.utils:

  xgcd(a: 'Euclidean', b: 'Euclidean') -&gt; 'Tuple[Euclidean, ...]'
      Return tuple (gcd(a,b), s, t) satisfying gcd(a,b) = s*a + t*b.

      This works as expected for ints, but also with polynomials defined
      over fields."><pre>&gt;&gt;&gt; <span class="pl-c1">help</span>(nl.xgcd)
  Help on function xgcd in module numlib.utils:

  xgcd(a: 'Euclidean', b: 'Euclidean') -&gt; 'Tuple[Euclidean, ...]'
      Return tuple (gcd(a,b), s, t) satisfying gcd(a,b) = s*a + t*b.

      This works as expected for ints, but also with polynomials defined
      over fields.</pre></div>
<p dir="auto">Alternatively, you can get help on your command line:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pydoc numlib.xgcd"><pre>pydoc numlib.xgcd</pre></div>
<p dir="auto">where you may need to put <strong>pydoc3</strong>, depending on your system setup.</p>
<p dir="auto">To see all objects defined in numlib, start the Python interpreter,
type <strong>nl.</strong> and then hit the TAB key:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; nl.
nl.EllCurve(        nl.addorder_(       nl.gcd(             nl.mulorder(        nl.truemu(
nl.FPmod(           nl.affine(          nl.iproduct(        nl.mulorder_(       nl.truephi(
nl.GaloisField(     nl.affine2(         nl.isprime(         nl.phi(             nl.unserialize(
nl.Pmod(            nl.divisors(        nl.istrueprime(     nl.quotient_rings   nl.utils
nl.Zmod(            nl.elliptic_curves  nl.lcm(             nl.serialize(       nl.xgcd(
nl.Zmodp(           nl.factor(          nl.leastdivisor(    nl.sieve(
nl.addorder(        nl.factorPR(        nl.mu(              nl.squareroot("><pre>&gt;&gt;&gt; nl.
nl.EllCurve(        nl.addorder_(       nl.gcd(             nl.mulorder(        nl.truemu(
nl.FPmod(           nl.affine(          nl.iproduct(        nl.mulorder_(       nl.truephi(
nl.GaloisField(     nl.affine2(         nl.isprime(         nl.phi(             nl.unserialize(
nl.Pmod(            nl.divisors(        nl.istrueprime(     nl.quotient_rings   nl.utils
nl.Zmod(            nl.elliptic_curves  nl.lcm(             nl.serialize(       nl.xgcd(
nl.Zmodp(           nl.factor(          nl.leastdivisor(    nl.sieve(
nl.addorder(        nl.factorPR(        nl.mu(              nl.squareroot(</pre></div>
<p dir="auto">In what follows, tutorials on basic usage of a tool are broken out as the need for that tool arises.</p>
<h3 tabindex="-1" dir="auto"><a id="user-content-pseudo-random-sequences" class="anchor" aria-hidden="true" href="#pseudo-random-sequences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pseudo-random sequences</h3>
<p dir="auto">Let us implement a
<a href="https://en.wikipedia.org/wiki/Linear_congruential_generator" rel="nofollow">Linear Congruence Generator</a>.
<em>Linear congruence</em> here means that we generate the next "random" output
by applying a linear function to the current state and taking the result modulo
some fixed large number, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, called the modulus.  It doesn't matter as much in Python3,
but for C or say Rust, it makes good sense to mod by the large number <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5b7205ff89e43c26f8140c42f4b8cdc2.svg"><img alt="$2^{64}.$" src="/sj-simmons/crypto/raw/main/svgs/5b7205ff89e43c26f8140c42f4b8cdc2.svg" valign="0.0px" width="26.71243574999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a>
Here is some code that implements an LCG using numlib:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="m = 2**64
a = 123456789
c = 12121212121
state = 10**10+1

def prng():
    &quot;&quot;&quot;Return the next sequential integer between 0 and m-1, inclusive.&quot;&quot;&quot;
    global state
    state = (a * state + c) % m
    return state"><pre><span class="pl-s1">m</span> <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">64</span>
<span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-c1">123456789</span>
<span class="pl-s1">c</span> <span class="pl-c1">=</span> <span class="pl-c1">12121212121</span>
<span class="pl-s1">state</span> <span class="pl-c1">=</span> <span class="pl-c1">10</span><span class="pl-c1">**</span><span class="pl-c1">10</span><span class="pl-c1">+</span><span class="pl-c1">1</span>

<span class="pl-k">def</span> <span class="pl-en">prng</span>():
    <span class="pl-s">"""Return the next sequential integer between 0 and m-1, inclusive."""</span>
    <span class="pl-k">global</span> <span class="pl-s1">state</span>
    <span class="pl-s1">state</span> <span class="pl-c1">=</span> (<span class="pl-s1">a</span> <span class="pl-c1">*</span> <span class="pl-s1">state</span> <span class="pl-c1">+</span> <span class="pl-s1">c</span>) <span class="pl-c1">%</span> <span class="pl-s1">m</span>
    <span class="pl-k">return</span> <span class="pl-s1">state</span></pre></div>
<p dir="auto">Copy the code block above to a file called <strong>lcg.py</strong>.  Then the following program,
when run in the same directory, prints five "randomly" generated numbers.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="from lcg import prng

for _ in range(5):
    print(prng())

#1234567902244668910
#8826425326919980895
#10890877254142952100
#15231402302547497037
#10264820975732655146"><pre><span class="pl-k">from</span> <span class="pl-s1">lcg</span> <span class="pl-k">import</span> <span class="pl-s1">prng</span>

<span class="pl-k">for</span> <span class="pl-s1">_</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">5</span>):
    <span class="pl-en">print</span>(<span class="pl-en">prng</span>())

<span class="pl-c">#1234567902244668910</span>
<span class="pl-c">#8826425326919980895</span>
<span class="pl-c">#10890877254142952100</span>
<span class="pl-c">#15231402302547497037</span>
<span class="pl-c">#10264820975732655146</span></pre></div>
<p dir="auto">If you want to use a different seed, then you could do something like this:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import lcg

lcg.state = 1728  # put any integer here

for _ in range(5):
    print(lcg.prng())

#225454543513
#9387149945987420262
#9368084995109636919
#5613612028674063196
#4053038556501675877"><pre><span class="pl-k">import</span> <span class="pl-s1">lcg</span>

<span class="pl-s1">lcg</span>.<span class="pl-s1">state</span> <span class="pl-c1">=</span> <span class="pl-c1">1728</span>  <span class="pl-c"># put any integer here</span>

<span class="pl-k">for</span> <span class="pl-s1">_</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">5</span>):
    <span class="pl-en">print</span>(<span class="pl-s1">lcg</span>.<span class="pl-en">prng</span>())

<span class="pl-c">#225454543513</span>
<span class="pl-c">#9387149945987420262</span>
<span class="pl-c">#9368084995109636919</span>
<span class="pl-c">#5613612028674063196</span>
<span class="pl-c">#4053038556501675877</span></pre></div>
<p dir="auto">One can think of the above LCG implementation as generating a pseudo-random
<em>sequence</em> of numbers.  When the initial seed is 10000000001, the
determinism is exhibited rather explicitly in the first number of the output.
Of course, the next number is always completely determined by the current state.</p>
<p dir="auto">The quality of "randomness" in the sequence generated by an LCG such as the one
above, or any PRNG, is a bit subtle to assess.  A battery of tests is often deployed
when trying to detect bad PRNGs.</p>
<p dir="auto">Since there are only <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f54c544f103d398bf9c036ff710d9361.svg"><img alt="$2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/f54c544f103d398bf9c036ff710d9361.svg" valign="0.0px" width="21.324302999999993pt" height="13.380876299999999pt" style="max-width: 100%;"></a> possible outputs, the period of our pseudo-random number
generator <strong>prng</strong> is at most <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5b7205ff89e43c26f8140c42f4b8cdc2.svg"><img alt="$2^{64}.$" src="/sj-simmons/crypto/raw/main/svgs/5b7205ff89e43c26f8140c42f4b8cdc2.svg" valign="0.0px" width="26.71243574999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a></p>
<p dir="auto">Important: the PRNG above is <em>not</em> a CSPRNG — a
<em>cryptographically secure</em> pseudo random number generator — hence it is not
of suitable quality for cryptographic applications. More on CSPRNGs later.</p>
<p dir="auto">In fact, the PRNG defined above may not even have the largest possible period
(which is the modulus <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> in general and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f54c544f103d398bf9c036ff710d9361.svg"><img alt="$2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/f54c544f103d398bf9c036ff710d9361.svg" valign="0.0px" width="21.324302999999993pt" height="13.380876299999999pt" style="max-width: 100%;"></a> for our PRNG). Any positive <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a> resulting
in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1d73f7557110d4433a0cf718f299dc6b.svg"><img alt="$x_{n+k} = x_n$" src="/sj-simmons/crypto/raw/main/svgs/1d73f7557110d4433a0cf718f299dc6b.svg" valign="-3.8356081499999894px" width="75.13896224999999pt" height="10.91323035pt" style="max-width: 100%;"></a> for some <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> leads obviously to the sequence repeating. The
smallest such <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a> is the <em>period</em> — the length of the smallest <em>cycle</em> of numbers
which our pseudo-random sequence repeats.</p>
<p dir="auto">Iterating the definition <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e358a7c266bc77fd48b2150cbce0805.svg"><img alt="$x_{n+1}=ax_n+c \mod m$" src="/sj-simmons/crypto/raw/main/svgs/0e358a7c266bc77fd48b2150cbce0805.svg" valign="-3.835608150000004px" width="173.51955554999998pt" height="15.251136449999997pt" style="max-width: 100%;"></a>, one arrives at the more general
formula for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c595a3f54070ca66c9252ccd45ca1732.svg"><img alt="$x_{n+k}$" src="/sj-simmons/crypto/raw/main/svgs/c595a3f54070ca66c9252ccd45ca1732.svg" valign="-3.8356081499999894px" width="34.878414449999994pt" height="10.91323035pt" style="max-width: 100%;"></a> in terms of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/90b8e9cb0a081795c49c5615819d5d21.svg"><img alt="$x_n:$" src="/sj-simmons/crypto/raw/main/svgs/90b8e9cb0a081795c49c5615819d5d21.svg" valign="-2.4657286499999893px" width="27.47524889999999pt" height="9.54335085pt" style="max-width: 100%;"></a></p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ee2113485df040f2fc9693b67a9a27c7.svg"><img alt="\begin{align}
x_{n+k}=a^kx_n+\frac{a^k-1}{a-1}c \mod m, \notag
\end{align}" src="/sj-simmons/crypto/raw/main/svgs/ee2113485df040f2fc9693b67a9a27c7.svg" valign="0.0px" width="241.39918605pt" height="37.72265145pt" style="max-width: 100%;"></a></p>
<p dir="auto">where we have assumed that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a27e3b950c87020be8bb4ebf02facc3f.svg"><img alt="$a \ne 1$" src="/sj-simmons/crypto/raw/main/svgs/a27e3b950c87020be8bb4ebf02facc3f.svg" valign="-3.1963189500000055px" width="38.82599489999999pt" height="14.61184725pt" style="max-width: 100%;"></a> since otherwise each term in our sequence
differs, modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg"><img alt="$m,$" src="/sj-simmons/crypto/raw/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg" valign="-3.1963502999999895px" width="18.99932429999999pt" height="10.2739725pt" style="max-width: 100%;"></a> from the previous term by simply <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/857431164e0fb928019e5dcd76861f58.svg"><img alt="$c.$" src="/sj-simmons/crypto/raw/main/svgs/857431164e0fb928019e5dcd76861f58.svg" valign="0.0px" width="11.680028249999989pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> are not relatively prime, say <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/de6fa87520fd28753064edcae57d474c.svg"><img alt="$\gcd(a, m) = d,$" src="/sj-simmons/crypto/raw/main/svgs/de6fa87520fd28753064edcae57d474c.svg" valign="-4.109589000000009px" width="102.91097354999998pt" height="16.438356pt" style="max-width: 100%;"></a> then, even after
reduction modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, the integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/207458e1a12e90cde6ffea1dddf3672d.svg"><img alt="$ax_n$" src="/sj-simmons/crypto/raw/main/svgs/207458e1a12e90cde6ffea1dddf3672d.svg" valign="-2.4657286499999893px" width="26.210165849999992pt" height="9.54335085pt" style="max-width: 100%;"></a> is a multiple of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a>. Since adding <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
just shifts those numbers, larger values of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> result in a smaller periods for
our LCG.  We don't want a small period so we generally pick <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> relatively
prime.</p>
<p dir="auto">In fact, since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is a power of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/76c5792347bb90ef71cfbace628572cf.svg"><img alt="$2$" src="/sj-simmons/crypto/raw/main/svgs/76c5792347bb90ef71cfbace628572cf.svg" valign="0.0px" width="8.219209349999991pt" height="10.5936072pt" style="max-width: 100%;"></a> in our LCG, were <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> even,
then the expression above for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c595a3f54070ca66c9252ccd45ca1732.svg"><img alt="$x_{n+k}$" src="/sj-simmons/crypto/raw/main/svgs/c595a3f54070ca66c9252ccd45ca1732.svg" valign="-3.8356081499999894px" width="34.878414449999994pt" height="10.91323035pt" style="max-width: 100%;"></a> would specialize to</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/45da3fa0c5bac197f0b492f71223bd46.svg"><img alt="\begin{align}
x_{n+k}&amp;=(2\ell)^kx_n+\frac{(2\ell)^k-1}{2\ell-1}c \notag \\
       &amp;=2^k\ell^kx_n+((2\ell)^{k-1} + (2\ell)^{k-2} + \cdots + 2\ell + 1)c \notag \\
       &amp;=2^k\ell^kx_n+(2^{k-1}\ell^{k-1} + 2^{k-2}\ell^{k-2} + \cdots + 2\ell + 1)c \mod 2^{64}.\notag
\end{align}" src="/sj-simmons/crypto/raw/main/svgs/45da3fa0c5bac197f0b492f71223bd46.svg" valign="0.0px" width="479.9580456pt" height="90.45703259999999pt" style="max-width: 100%;"></a></p>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/608af5d2967c5090bb77eccfb84cabda.svg"><img alt="$k \ge 64$" src="/sj-simmons/crypto/raw/main/svgs/608af5d2967c5090bb77eccfb84cabda.svg" valign="-2.235141150000005px" width="47.43141149999999pt" height="13.650669449999999pt" style="max-width: 100%;"></a>, then the first term on the right vanishes and the constant term stops
depending on <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>; hence our sequence degenerates to a constant sequence —
pretty much the worst thing that can happen to one's PRNG.</p>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> are indeed, as is generally preferable, relatively prime, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
is invertible modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> so that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/14e12a1273c346610e9daaf5e3aee29a.svg"><img alt="$x_{n+1}$" src="/sj-simmons/crypto/raw/main/svgs/14e12a1273c346610e9daaf5e3aee29a.svg" valign="-3.8356081499999894px" width="34.16493134999999pt" height="10.91323035pt" style="max-width: 100%;"></a> determines <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/257055757fc84868cb108b5f78a1a186.svg"><img alt="$x_n;$" src="/sj-simmons/crypto/raw/main/svgs/257055757fc84868cb108b5f78a1a186.svg" valign="-3.1963502999999895px" width="22.90914944999999pt" height="10.2739725pt" style="max-width: 100%;"></a> explicitly, we
have <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/68b635c3a48f4da6878d8005ce71f1b5.svg"><img alt="$x_n = a^{-1}(x_{n+1}-c) \mod m.$" src="/sj-simmons/crypto/raw/main/svgs/68b635c3a48f4da6878d8005ce71f1b5.svg" valign="-4.109589000000009px" width="208.51967069999998pt" height="17.4904653pt" style="max-width: 100%;"></a> In this case, the first repeated value,
call it <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cb6f9168a549331aa3c962c22659d695.svg"><img alt="$x_r$" src="/sj-simmons/crypto/raw/main/svgs/cb6f9168a549331aa3c962c22659d695.svg" valign="-2.4657286499999893px" width="15.85243604999999pt" height="9.54335085pt" style="max-width: 100%;"></a>, in our sequence has to be equal to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e714a3139958da04b41e3e607a544455.svg"><img alt="$x_0$" src="/sj-simmons/crypto/raw/main/svgs/e714a3139958da04b41e3e607a544455.svg" valign="-2.4657286499999893px" width="15.94753544999999pt" height="9.54335085pt" style="max-width: 100%;"></a> (the initial state of our LCG)
since if the first repeated value were equal to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4d8443b72a1de913b4a3995119296c90.svg"><img alt="$x_j$" src="/sj-simmons/crypto/raw/main/svgs/4d8443b72a1de913b4a3995119296c90.svg" valign="-4.7031731999999895px" width="15.499497749999989pt" height="11.780795399999999pt" style="max-width: 100%;"></a> with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f85c6d002939aa5068a61da99ac32f02.svg"><img alt="$0&lt; j &lt; r$" src="/sj-simmons/crypto/raw/main/svgs/f85c6d002939aa5068a61da99ac32f02.svg" valign="-3.1963519500000044px" width="67.63784279999999pt" height="14.0378568pt" style="max-width: 100%;"></a> then necessarily
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3d73533e351ffb9b7dd759a2ece0f5bf.svg"><img alt="$x_{j-1} = a^{-1}(x_j-c) = a^{-1}(x_r-c) = x_{r-1}$" src="/sj-simmons/crypto/raw/main/svgs/3d73533e351ffb9b7dd759a2ece0f5bf.svg" valign="-4.703173200000008px" width="297.23158409999996pt" height="18.0840495pt" style="max-width: 100%;"></a>, violating that fact <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg"><img alt="$r$" src="/sj-simmons/crypto/raw/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg" valign="0.0px" width="7.87295519999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is the
index of the first repeated value.</p>
<p dir="auto">For our LCG, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is a power of 2 and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is odd; hence the first repeated value
is the initial state <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e714a3139958da04b41e3e607a544455.svg"><img alt="$x_0$" src="/sj-simmons/crypto/raw/main/svgs/e714a3139958da04b41e3e607a544455.svg" valign="-2.4657286499999893px" width="15.94753544999999pt" height="9.54335085pt" style="max-width: 100%;"></a>.  The question is whether that value recurs before
the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f54c544f103d398bf9c036ff710d9361.svg"><img alt="$2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/f54c544f103d398bf9c036ff710d9361.svg" valign="0.0px" width="21.324302999999993pt" height="13.380876299999999pt" style="max-width: 100%;"></a>th term in our sequence (which is not what we want).</p>
<p dir="auto">One can guarantee that the period of an LCG is in fact as large as possible using
the Hull-Dobell Theorem; i.e., by ensuring that</p>
<ul dir="auto">
<li><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> are relatively prime,</li>
<li><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e181cdf64450bcc9902678c74a33a624.svg"><img alt="$a-1$" src="/sj-simmons/crypto/raw/main/svgs/e181cdf64450bcc9902678c74a33a624.svg" valign="-1.3698745499999938px" width="36.99955544999999pt" height="11.96348175pt" style="max-width: 100%;"></a> is divisible by all prime factors of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, and</li>
<li><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e181cdf64450bcc9902678c74a33a624.svg"><img alt="$a-1$" src="/sj-simmons/crypto/raw/main/svgs/e181cdf64450bcc9902678c74a33a624.svg" valign="-1.3698745499999938px" width="36.99955544999999pt" height="11.96348175pt" style="max-width: 100%;"></a> is divisible by 4 if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is divisible by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ecf4fe2774fd9244b4fd56f7e76dc882.svg"><img alt="$4$" src="/sj-simmons/crypto/raw/main/svgs/ecf4fe2774fd9244b4fd56f7e76dc882.svg" valign="0.0px" width="8.219209349999991pt" height="10.5936072pt" style="max-width: 100%;"></a>.</li>
</ul>
<p dir="auto">For a proof that the three bullet points guarantee the maximum period
see <a href="#references1">Knuth</a>, pp. 17-19.</p>
<p dir="auto">If the second bullet point is satisfied then there exists a least power, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6f9bad7347b91ceebebd3ad7e6f6f2d1.svg"><img alt="$s$" src="/sj-simmons/crypto/raw/main/svgs/6f9bad7347b91ceebebd3ad7e6f6f2d1.svg" valign="0.0px" width="7.7054801999999905pt" height="7.0776222pt" style="max-width: 100%;"></a>, called
the <em>potency</em> of the LCG, such that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5337508b48bc15988009509ccf128bd7.svg"><img alt="$(a-1)^s = 0 \mod m.$" src="/sj-simmons/crypto/raw/main/svgs/5337508b48bc15988009509ccf128bd7.svg" valign="-4.109589000000009px" width="153.8923485pt" height="16.438356pt" style="max-width: 100%;"></a> If the potency is
low then successive terms of our pseudo-random sequence change too simply and hence
not very randomly.  A potency of 2, for instance, implies that the difference between
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/949707b3bc37b3be0f8b25742664879e.svg"><img alt="$(n+1)$" src="/sj-simmons/crypto/raw/main/svgs/949707b3bc37b3be0f8b25742664879e.svg" valign="-4.109589000000009px" width="50.962710149999985pt" height="16.438356pt" style="max-width: 100%;"></a>st and the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>th state of our PRNG is always <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/010edbd5f223fb0408f3f67e509f6f27.svg"><img alt="$c(1+(a-1)n).$" src="/sj-simmons/crypto/raw/main/svgs/010edbd5f223fb0408f3f67e509f6f27.svg" valign="-4.109589000000009px" width="112.42772639999998pt" height="16.438356pt" style="max-width: 100%;"></a>
Generally, a potency of at least 5 is necessary (but not sufficient) for randomness
(see <a href="#references1">Knuth</a> pp. 24-25).</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises" class="anchor" aria-hidden="true" href="#exercises"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol dir="auto">
<li>
<p dir="auto">Does the LCG defined by the program above satisfy all three bulleted conditions so that its period is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f54c544f103d398bf9c036ff710d9361.svg"><img alt="$2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/f54c544f103d398bf9c036ff710d9361.svg" valign="0.0px" width="21.324302999999993pt" height="13.380876299999999pt" style="max-width: 100%;"></a>, the largest possible? <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Brandon and Morgan worked on this and finished it in class.</strong></p>
</li>
<li>
<p dir="auto">If possible, compute the potency of the LCG above to see if it even has a chance
of being sufficiently "random". <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Marina. Sven completed this in class and sent code around on Discord.</strong></p>
</li>
<li>
<p dir="auto">Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> be positive integers and suppose that we want to reduce the product <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1590372cccb08e52e5b844dda033b7aa.svg"><img alt="$ax$" src="/sj-simmons/crypto/raw/main/svgs/1590372cccb08e52e5b844dda033b7aa.svg" valign="0.0px" width="18.08414189999999pt" height="7.0776222pt" style="max-width: 100%;"></a> modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>. Show the following (we used this above): if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c80e3d64932bb680cf2d824d13827a15.svg"><img alt="$gcd(a, m) = d$" src="/sj-simmons/crypto/raw/main/svgs/c80e3d64932bb680cf2d824d13827a15.svg" valign="-4.109589000000009px" width="97.78729124999998pt" height="16.438356pt" style="max-width: 100%;"></a> then, after reducing <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1590372cccb08e52e5b844dda033b7aa.svg"><img alt="$ax$" src="/sj-simmons/crypto/raw/main/svgs/1590372cccb08e52e5b844dda033b7aa.svg" valign="0.0px" width="18.08414189999999pt" height="7.0776222pt" style="max-width: 100%;"></a> modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, the result is a multiple of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a>. <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Montana and Shaye worked on this and Simmons sent an email about it.</strong></p>
</li>
<li>
<p dir="auto">In the previous discussion we used the fact that if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> are relatively prime, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> has a multiplicative inverse modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>; that is, there exists <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aa1f57396e688f3977a4394d3829566c.svg"><img alt="$a^{-1}\in \mathbb{Z}/m$" src="/sj-simmons/crypto/raw/main/svgs/aa1f57396e688f3977a4394d3829566c.svg" valign="-4.109589000000009px" width="80.04000015pt" height="17.4904653pt" style="max-width: 100%;"></a> such that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d23399681b00a63da8212e00b487087d.svg"><img alt="$a^{-1}a=1 \mod m$" src="/sj-simmons/crypto/raw/main/svgs/d23399681b00a63da8212e00b487087d.svg" valign="0.0px" width="127.54161914999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a>. Above we only needed its existence but what is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b42707f02d6a6fbbe96ce85d2d4ab42c.svg"><img alt="$a^{-1}$" src="/sj-simmons/crypto/raw/main/svgs/b42707f02d6a6fbbe96ce85d2d4ab42c.svg" valign="0.0px" width="25.515722099999987pt" height="13.380876299999999pt" style="max-width: 100%;"></a> if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/afa5f8f36ba3ce9a1f38d9fd25e4434b.svg"><img alt="$a=123456789$" src="/sj-simmons/crypto/raw/main/svgs/afa5f8f36ba3ce9a1f38d9fd25e4434b.svg" valign="0.0px" width="104.57966969999998pt" height="10.5936072pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a03fbd5ed34bcedfd4082b5e04a8c412.svg"><img alt="$m=2^{64}?$" src="/sj-simmons/crypto/raw/main/svgs/a03fbd5ed34bcedfd4082b5e04a8c412.svg" valign="0.0px" width="66.25953344999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Simmons did this in class with numlib's Zmod (which essentially just calls numlib's xgcd).</strong></p>
</li>
</ol>
<p dir="auto">A common initial test to gauge whether a given PRNG is <em>not</em> worthy of the term
"random" employs the
<a href="https://en.wikipedia.org/wiki/Chi-squared_distribution" rel="nofollow">Chi-squared distribution</a>,
and works as follows.</p>
<p dir="auto">Suppose that we partition the possible outputs into a small number of <em>cells</em> (or
<em>bins</em>). We can then use the LCG to generate a large sample of values and tally
how many land in each bin.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="from lcg import prng

sample_size = 12000
bins = 30

# let us split the sampled random numbers into equal bins
sample = [prng()//(2**64//bins) for _ in range(sample_size)]

def get_frequencies():
    &quot;&quot;&quot;return the list of frequencies for successive bins&quot;&quot;&quot;
    frequencies = dict()
    for bin_ in sample:
        frequencies[bin_] = frequencies.get(bin_, 0) + 1
    return list(frequencies.values())

print(*get_frequencies())"><pre><span class="pl-k">from</span> <span class="pl-s1">lcg</span> <span class="pl-k">import</span> <span class="pl-s1">prng</span>

<span class="pl-s1">sample_size</span> <span class="pl-c1">=</span> <span class="pl-c1">12000</span>
<span class="pl-s1">bins</span> <span class="pl-c1">=</span> <span class="pl-c1">30</span>

<span class="pl-c"># let us split the sampled random numbers into equal bins</span>
<span class="pl-s1">sample</span> <span class="pl-c1">=</span> [<span class="pl-en">prng</span>()<span class="pl-c1">//</span>(<span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">64</span><span class="pl-c1">//</span><span class="pl-s1">bins</span>) <span class="pl-k">for</span> <span class="pl-s1">_</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-s1">sample_size</span>)]

<span class="pl-k">def</span> <span class="pl-en">get_frequencies</span>():
    <span class="pl-s">"""return the list of frequencies for successive bins"""</span>
    <span class="pl-s1">frequencies</span> <span class="pl-c1">=</span> <span class="pl-en">dict</span>()
    <span class="pl-k">for</span> <span class="pl-s1">bin_</span> <span class="pl-c1">in</span> <span class="pl-s1">sample</span>:
        <span class="pl-s1">frequencies</span>[<span class="pl-s1">bin_</span>] <span class="pl-c1">=</span> <span class="pl-s1">frequencies</span>.<span class="pl-en">get</span>(<span class="pl-s1">bin_</span>, <span class="pl-c1">0</span>) <span class="pl-c1">+</span> <span class="pl-c1">1</span>
    <span class="pl-k">return</span> <span class="pl-en">list</span>(<span class="pl-s1">frequencies</span>.<span class="pl-en">values</span>())

<span class="pl-en">print</span>(<span class="pl-c1">*</span><span class="pl-en">get_frequencies</span>())</pre></div>
<p dir="auto">The output is</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="410 401 448 376 398 388 399 408 410 371 402 395 388 412 389 422 410 406 412 398 404 404 395 364 408 390 416 369 420 387"><pre><span class="pl-c1">410</span> <span class="pl-c1">401</span> <span class="pl-c1">448</span> <span class="pl-c1">376</span> <span class="pl-c1">398</span> <span class="pl-c1">388</span> <span class="pl-c1">399</span> <span class="pl-c1">408</span> <span class="pl-c1">410</span> <span class="pl-c1">371</span> <span class="pl-c1">402</span> <span class="pl-c1">395</span> <span class="pl-c1">388</span> <span class="pl-c1">412</span> <span class="pl-c1">389</span> <span class="pl-c1">422</span> <span class="pl-c1">410</span> <span class="pl-c1">406</span> <span class="pl-c1">412</span> <span class="pl-c1">398</span> <span class="pl-c1">404</span> <span class="pl-c1">404</span> <span class="pl-c1">395</span> <span class="pl-c1">364</span> <span class="pl-c1">408</span> <span class="pl-c1">390</span> <span class="pl-c1">416</span> <span class="pl-c1">369</span> <span class="pl-c1">420</span> <span class="pl-c1">387</span></pre></div>
<p dir="auto">The generated numbers appear to be fairly evenly distributed
across the 30 bins so that our PRNG appears to sample <em>uniformly</em>.  On the
other hand, note that we should be concerned if each bin contained exactly the
same number (400) of sample values; we wouldn't expect that even from an
actual (uniform) random number generator.</p>
<p dir="auto">One way to analyze whether we have enough, but not too much, variation in
the frequencies is to compute the test statistic</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1677857c4c0df1f93f1cc9e57600904b.svg"><img alt="$$\widetilde{\chi}^2=\frac{1}{400}\sum (f_i - 400)^2,$$" src="/sj-simmons/crypto/raw/main/svgs/1677857c4c0df1f93f1cc9e57600904b.svg" valign="0.0px" width="177.65995005pt" height="32.990165999999995pt" style="max-width: 100%;"></a></p>
<p dir="auto">where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9b6dbadab1b122f6d297345e9d3b8dd7.svg"><img alt="$f_i$" src="/sj-simmons/crypto/raw/main/svgs/9b6dbadab1b122f6d297345e9d3b8dd7.svg" valign="-3.1963503000000055px" width="12.69888674999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> is the observed frequency of values falling in the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/77a3b857d53fb44e33b53e4c8b68351a.svg"><img alt="$i$" src="/sj-simmons/crypto/raw/main/svgs/77a3b857d53fb44e33b53e4c8b68351a.svg" valign="0.0px" width="5.663225699999989pt" height="10.84150485pt" style="max-width: 100%;"></a>th bin.
For a legitimate PRNG, this statistic follows a chi-square distribution with
degrees of freedom equal to one less than the number of bins.</p>
<p dir="auto">The sampling distribution (over 5000 samples) for the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3ceecab1c4459bcbc669891b2b81a671.svg"><img alt="$\widetilde{\chi}^2$" src="/sj-simmons/crypto/raw/main/svgs/3ceecab1c4459bcbc669891b2b81a671.svg" valign="-3.1963503000000086px" width="16.837900199999993pt" height="16.5772266pt" style="max-width: 100%;"></a>
statistic for our PRNG looks like this (superimposed with the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg"><img alt="$\chi^2$" src="/sj-simmons/crypto/raw/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg" valign="-3.1963503000000086px" width="16.837900199999993pt" height="16.5772266pt" style="max-width: 100%;"></a> distribution
with appropriate degrees of freedom):</p>
<p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/images/chisq.svg"><img height="400" src="/sj-simmons/crypto/raw/main/images/chisq.svg" style="max-width: 100%;"></a>
</p>
<p dir="auto">(The program <a href="https://github.com/sj-simmons/crypto/blob/main/chisq_hist.py">chisq_hist.py</a>
generates and displays the histogram above.)</p>
<p dir="auto">Were the sampling distribution to precisely follow the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg"><img alt="$\chi^2$" src="/sj-simmons/crypto/raw/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg" valign="-3.1963503000000086px" width="16.837900199999993pt" height="16.5772266pt" style="max-width: 100%;"></a> distribution,
then the lower 5 percent of values would fall in the interval <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/53c00e8e3c8d36bcf72471ab2d2841aa.svg"><img alt="$[0, 17.71]$" src="/sj-simmons/crypto/raw/main/svgs/53c00e8e3c8d36bcf72471ab2d2841aa.svg" valign="-4.109589000000009px" width="62.10060284999999pt" height="16.438356pt" style="max-width: 100%;"></a>, the
second lowest 5 percent in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/29e6c48eeff07e575a415fd40f1c6810.svg"><img alt="$[17.71, 19.77]$" src="/sj-simmons/crypto/raw/main/svgs/29e6c48eeff07e575a415fd40f1c6810.svg" valign="-4.109589000000009px" width="91.32445409999998pt" height="16.438356pt" style="max-width: 100%;"></a>, and so on.  An easy way to get these
values in Python is to install <a href="https://scipy.org/" rel="nofollow">scipy</a> and use it as follows.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="from scipy import stats
percentiles = [round(.05*n, 2) for n in range(20)] # [0.0, 0.05, 0.1, 0.15, ..., 1.0]
[round(stats.chi2.ppf(x, df = 29), 2) for x in percentiles]
# [0.0, 17.71, 19.77, 21.25, 22.48, 23.57, 24.58, 25.54, ..., 42.56, inf]"><pre><span class="pl-k">from</span> <span class="pl-s1">scipy</span> <span class="pl-k">import</span> <span class="pl-s1">stats</span>
<span class="pl-s1">percentiles</span> <span class="pl-c1">=</span> [<span class="pl-en">round</span>(<span class="pl-c1">.05</span><span class="pl-c1">*</span><span class="pl-s1">n</span>, <span class="pl-c1">2</span>) <span class="pl-k">for</span> <span class="pl-s1">n</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">20</span>)] <span class="pl-c"># [0.0, 0.05, 0.1, 0.15, ..., 1.0]</span>
[<span class="pl-en">round</span>(<span class="pl-s1">stats</span>.<span class="pl-s1">chi2</span>.<span class="pl-en">ppf</span>(<span class="pl-s1">x</span>, <span class="pl-s1">df</span> <span class="pl-c1">=</span> <span class="pl-c1">29</span>), <span class="pl-c1">2</span>) <span class="pl-k">for</span> <span class="pl-s1">x</span> <span class="pl-c1">in</span> <span class="pl-s1">percentiles</span>]
<span class="pl-c"># [0.0, 17.71, 19.77, 21.25, 22.48, 23.57, 24.58, 25.54, ..., 42.56, inf]</span></pre></div>
<p dir="auto">The quality of one's PRNG comes into question if the bottom or top 5 percent
of the sampling distribution is too heavy (since then the corresponding
hypothesis tests would provide evidence of non-randomness); likewise, one
becomes <em>somewhat</em> concerned if the bottom or top 10 percent is too heavy (see
<a href="#references1">Knuth</a> pg. 47).</p>
<p dir="auto">Drawing a single sample, computing the test statistic above, and interpreting that
(along the lines of the previous paragraph) in the context of say a hypothesis test
would be considered a <em>local</em> test in the sense that our sample usually does not include
all of the random numbers spit out by our PRNG  — even though one should always
use a fairly large sample size for a chi-squared test.</p>
<p dir="auto">We can bump this up to more of a <em>global</em> test if we take say 5000 samples
(each still with sample size of 12000).
Here is the relevant bar chart for our LCG where the expected frequency for
each interval is 250.</p>
<p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/images/chisq_chisq.svg"><img height="400" src="/sj-simmons/crypto/raw/main/images/chisq_chisq.svg" style="max-width: 100%;"></a>
</p>
<p dir="auto">The raw frequencies are</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="255 260 239 278 261 254 256 234 251 252 220 237 255 248 251 254 242 245 235 273"><pre><span class="pl-c1">255</span> <span class="pl-c1">260</span> <span class="pl-c1">239</span> <span class="pl-c1">278</span> <span class="pl-c1">261</span> <span class="pl-c1">254</span> <span class="pl-c1">256</span> <span class="pl-c1">234</span> <span class="pl-c1">251</span> <span class="pl-c1">252</span> <span class="pl-c1">220</span> <span class="pl-c1">237</span> <span class="pl-c1">255</span> <span class="pl-c1">248</span> <span class="pl-c1">251</span> <span class="pl-c1">254</span> <span class="pl-c1">242</span> <span class="pl-c1">245</span> <span class="pl-c1">235</span> <span class="pl-c1">273</span></pre></div>
<p dir="auto">which we can use to perform the so-called <em>chi-squared on chi-squared</em> test, the
idea being to check if those latest frequencies are more-or-less what they should be.
The degrees of freedom for the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg"><img alt="$\chi^2$" src="/sj-simmons/crypto/raw/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg" valign="-3.1963503000000086px" width="16.837900199999993pt" height="16.5772266pt" style="max-width: 100%;"></a> distribution appropriate for our chi-squared
on chi-squared test is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/35424cbb8185e419dbb3279a6e71d4c3.svg"><img alt="$30-20-1 = 9.$" src="/sj-simmons/crypto/raw/main/svgs/35424cbb8185e419dbb3279a6e71d4c3.svg" valign="-1.3698745499999938px" width="115.98149309999998pt" height="11.96348175pt" style="max-width: 100%;"></a></p>
<p dir="auto">The test statistic is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dee13aa9f323d25a42aca3c7b1b80005.svg"><img alt="$13.688$" src="/sj-simmons/crypto/raw/main/svgs/dee13aa9f323d25a42aca3c7b1b80005.svg" valign="0.0px" width="45.66227159999998pt" height="10.5936072pt" style="max-width: 100%;"></a>. The area to the right under the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg"><img alt="$\chi^2$" src="/sj-simmons/crypto/raw/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg" valign="-3.1963503000000086px" width="16.837900199999993pt" height="16.5772266pt" style="max-width: 100%;"></a> distribution
with df=9 is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/619592087e8219141eb96df340222866.svg"><img alt="$0.13$" src="/sj-simmons/crypto/raw/main/svgs/619592087e8219141eb96df340222866.svg" valign="0.0px" width="29.22385289999999pt" height="10.5936072pt" style="max-width: 100%;"></a>. Hence, in a right-tailed hypothesis test with a 10% cutoff, we
fail to reject the null hypothesis that our LCG (globally) generates random numbers.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-hammer-projects-hammer" class="anchor" aria-hidden="true" href="#hammer-projects-hammer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji> Projects <g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji></h4>
<ol start="5" dir="auto">
<li>
<p dir="auto">The histogram and analysis above look pretty good but the original sampling was always split into 30 bins. Conduct the same sort of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg"><img alt="$\chi^2$" src="/sj-simmons/crypto/raw/main/svgs/a67d576e7d59b991dd010277c7351ae0.svg" valign="-3.1963503000000086px" width="16.837900199999993pt" height="16.5772266pt" style="max-width: 100%;"></a> analysis but use different (smallish) numbers of bins and varying (large) sample sizes.  <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Nargiss did this for several numbers of bins and sample sizes and posted the results on our server.</strong></p>
</li>
<li>
<p dir="auto">Replace our LCG with a Python's random number generator and compare.
The following might be helpful.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import random
def prng():
    return random.randint(0, 2**64-1)"><pre><span class="pl-k">import</span> <span class="pl-s1">random</span>
<span class="pl-k">def</span> <span class="pl-en">prng</span>():
    <span class="pl-k">return</span> <span class="pl-s1">random</span>.<span class="pl-en">randint</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">64</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)</pre></div>
</li>
</ol>
<p dir="auto">The <a href="https://en.wikipedia.org/wiki/Spectral_test" rel="nofollow">spectral test</a> is the test
most likely to uncover weakness in a LCG. For this test, we first
use the LCG to successively generate points in 2-space:
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e9d55cbd2cc4d57d6a13a807ff73df76.svg"><img alt="$(x_0, x_1), (x_1, x_2), \ldots$" src="/sj-simmons/crypto/raw/main/svgs/e9d55cbd2cc4d57d6a13a807ff73df76.svg" valign="-4.109589000000009px" width="141.05018069999997pt" height="16.438356pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fda0e4fdacdd806c1f6c8b2af0ce68da.svg"><img alt="$x_0, x_1, x_2, \ldots$" src="/sj-simmons/crypto/raw/main/svgs/fda0e4fdacdd806c1f6c8b2af0ce68da.svg" valign="-3.1963502999999895px" width="91.40398244999999pt" height="10.2739725pt" style="max-width: 100%;"></a> is the pseudo-random
sequence kicked out by our LCG.  Here we have tacitly divided each <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d7084ce258ffe96f77e4f3647b250bbf.svg"><img alt="$x_n$" src="/sj-simmons/crypto/raw/main/svgs/d7084ce258ffe96f77e4f3647b250bbf.svg" valign="-2.4657286499999893px" width="17.521011749999992pt" height="9.54335085pt" style="max-width: 100%;"></a> by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> so
that the 2D points in fact lie in the unit square <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/895386960ce4e2b78a141073901b8e71.svg"><img alt="$[0,1]\times [0,1].$" src="/sj-simmons/crypto/raw/main/svgs/895386960ce4e2b78a141073901b8e71.svg" valign="-4.109589000000009px" width="90.41091509999998pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Due to periodicity, only a finite number of distinct points will be
produced; hence, all the points can be captured by a set of parallel lines.
The maximum distance between the lines, over all arrangements of such sets of
lines, is the number in which we are interested, call it <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/25eda7b7741f869a00061a631b356db9.svg"><img alt="$d_2$" src="/sj-simmons/crypto/raw/main/svgs/25eda7b7741f869a00061a631b356db9.svg" valign="-2.4657286500000066px" width="15.10851044999999pt" height="13.881256950000001pt" style="max-width: 100%;"></a>.</p>
<p dir="auto">In fact, we want to bump up the scheme outlined above to higher dimensions;
that is, we want to compute the maximum distance, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c3fa8de7a8089002ea5653ad6b67aa67.svg"><img alt="$d_3$" src="/sj-simmons/crypto/raw/main/svgs/c3fa8de7a8089002ea5653ad6b67aa67.svg" valign="-2.4657286500000066px" width="15.10851044999999pt" height="13.881256950000001pt" style="max-width: 100%;"></a>, between parallel planes
over all arrangements in 3-space that capture all of
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b38aa07e6131068bec11e42928de000a.svg"><img alt="$(x_0, x_1, x_2), (x_1, x_2, x_3), \ldots$" src="/sj-simmons/crypto/raw/main/svgs/b38aa07e6131068bec11e42928de000a.svg" valign="-4.109589000000009px" width="189.20084369999998pt" height="16.438356pt" style="max-width: 100%;"></a>, and so on up to the maximum
distance, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/64b2437b794d4a3c8ee3812f039898de.svg"><img alt="$d_7$" src="/sj-simmons/crypto/raw/main/svgs/64b2437b794d4a3c8ee3812f039898de.svg" valign="-2.4657286500000066px" width="15.10851044999999pt" height="13.881256950000001pt" style="max-width: 100%;"></a>, between 6-dimensional parallel hyperplanes that capture all points
constructed from our sequence in 7-space.</p>
<p dir="auto">The maximum distances <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0a73c30cfdb1fd3eebfe5b2263c9bc7d.svg"><img alt="$d_2, d_3, \ldots, d_7$" src="/sj-simmons/crypto/raw/main/svgs/0a73c30cfdb1fd3eebfe5b2263c9bc7d.svg" valign="-3.1963503000000055px" width="90.80465624999998pt" height="14.611878599999999pt" style="max-width: 100%;"></a> will all be positive since
our LCG is periodic so that each set of parallel planes need only capture
a finite number of points. Also, the distances <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ccc82fe267d4bb138ce39c263e5264f4.svg"><img alt="$d_t$" src="/sj-simmons/crypto/raw/main/svgs/ccc82fe267d4bb138ce39c263e5264f4.svg" valign="-2.4657286500000066px" width="13.52175494999999pt" height="13.881256950000001pt" style="max-width: 100%;"></a> necessarily increase with the
dimension <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f942031b7fb6eec9c50bd70766082b86.svg"><img alt="$t.$" src="/sj-simmons/crypto/raw/main/svgs/f942031b7fb6eec9c50bd70766082b86.svg" valign="0.0px" width="10.50232094999999pt" height="10.110901349999999pt" style="max-width: 100%;"></a>  Heuristically, this is due to the fact that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> more-or-less
evenly distributed points in, for instance, 3-space are necessarily more spread
out than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> such points in 2-space.</p>
<p dir="auto">The idea behind the spectral test is that, were the coordinates of the points drawn
from a truly random sequence of numbers in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0ae2faac7f0b6f04f2d00a80b1a93c95.svg"><img alt="$[0,1],$" src="/sj-simmons/crypto/raw/main/svgs/0ae2faac7f0b6f04f2d00a80b1a93c95.svg" valign="-4.109589000000009px" width="37.44297479999999pt" height="16.438356pt" style="max-width: 100%;"></a> the numbers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd820c16ce8477afe22065e05d11258a.svg"><img alt="$d_2,\ldots, d_7$" src="/sj-simmons/crypto/raw/main/svgs/dd820c16ce8477afe22065e05d11258a.svg" valign="-3.1963503000000055px" width="67.56834975pt" height="14.611878599999999pt" style="max-width: 100%;"></a>
would each still of course be positive due to finite machine precision, but they would
not increase with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg"><img alt="$t$" src="/sj-simmons/crypto/raw/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg" valign="0.0px" width="5.936097749999991pt" height="10.110901349999999pt" style="max-width: 100%;"></a>.</p>
<p dir="auto">Returning to the case in which the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9fc20fb1d3825674c6a279cb0d5ca636.svg"><img alt="$x_i$" src="/sj-simmons/crypto/raw/main/svgs/9fc20fb1d3825674c6a279cb0d5ca636.svg" valign="-2.4657286499999893px" width="14.045887349999989pt" height="9.54335085pt" style="max-width: 100%;"></a> are generated by our LCG, we wish to
compute the distances <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ccc82fe267d4bb138ce39c263e5264f4.svg"><img alt="$d_t$" src="/sj-simmons/crypto/raw/main/svgs/ccc82fe267d4bb138ce39c263e5264f4.svg" valign="-2.4657286500000066px" width="13.52175494999999pt" height="13.881256950000001pt" style="max-width: 100%;"></a> and see if they are sufficiently close to zero. Since
our LCG is based on a linear function, we are naturally led to consider
a lattice of points in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg"><img alt="$t$" src="/sj-simmons/crypto/raw/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg" valign="0.0px" width="5.936097749999991pt" height="10.110901349999999pt" style="max-width: 100%;"></a>-space (<a href="#references1">Knuth</a> pp. 96-98).  And when
considering families of parallel hyperplanes that capture all points, we can assume
that neighboring hyperplanes are separated by a fixed distance which is of course
the desired <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ccc82fe267d4bb138ce39c263e5264f4.svg"><img alt="$d_t$" src="/sj-simmons/crypto/raw/main/svgs/ccc82fe267d4bb138ce39c263e5264f4.svg" valign="-2.4657286500000066px" width="13.52175494999999pt" height="13.881256950000001pt" style="max-width: 100%;"></a>.</p>
<p dir="auto"><a href="#references1">Knuth</a> and other authors consider the <em>accuracy</em>, defined
by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/38963eb4ecbffeb9606ffba0ebabd81a.svg"><img alt="$\nu_t = 1/d_t.$" src="/sj-simmons/crypto/raw/main/svgs/38963eb4ecbffeb9606ffba0ebabd81a.svg" valign="-4.109589000000009px" width="71.17388519999999pt" height="16.438356pt" style="max-width: 100%;"></a> (The quantity <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b96ce619e9618788ad604f351c957414.svg"><img alt="$\nu_t$" src="/sj-simmons/crypto/raw/main/svgs/b96ce619e9618788ad604f351c957414.svg" valign="-2.4657286499999893px" width="13.08606584999999pt" height="9.54335085pt" style="max-width: 100%;"></a> arises naturally in the sense that it
is the vector of minimal length in the dual of the lattice mentioned above;
cf. <a href="#references1">Steele, Vigna</a> pp. 3-4.)</p>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c723c4986c981ef012a4915ad205d443.svg"><img alt="$0&lt;a&lt;m$" src="/sj-simmons/crypto/raw/main/svgs/c723c4986c981ef012a4915ad205d443.svg" valign="-0.6427030499999951px" width="75.17672579999999pt" height="11.23631025pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1adf9488b49d92d50d2bf48e91e9db53.svg"><img alt="$\gcd(a,m)=1$" src="/sj-simmons/crypto/raw/main/svgs/1adf9488b49d92d50d2bf48e91e9db53.svg" valign="-4.109589000000009px" width="98.00799524999998pt" height="16.438356pt" style="max-width: 100%;"></a>, then the accuracy <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b96ce619e9618788ad604f351c957414.svg"><img alt="$\nu_t$" src="/sj-simmons/crypto/raw/main/svgs/b96ce619e9618788ad604f351c957414.svg" valign="-2.4657286499999893px" width="13.08606584999999pt" height="9.54335085pt" style="max-width: 100%;"></a> admits
a concise characterization:</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f5e567f281e5af11ee140baca0bb1fc7.svg"><img alt="$$\nu_t = \min_{(x_1, \ldots, x_t)\in \mathbb{Z}^t}\left\{\sqrt{x_1^2+\cdots+x_t^2}~\bigg|~ x_1+ax_2+\cdots+a^{t-1}x_t = 0 \mod m\right\}$$" src="/sj-simmons/crypto/raw/main/svgs/f5e567f281e5af11ee140baca0bb1fc7.svg" valign="0.0px" width="533.71664775pt" height="39.45246194999999pt" style="max-width: 100%;"></a></p>
<p dir="auto">where the minimum is over all non-zero vectors with integer coefficients.</p>
<p dir="auto">However, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is large, then even <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9473daf474f8d39427c1a99ddb5ad626.svg"><img alt="$\nu_2$" src="/sj-simmons/crypto/raw/main/svgs/9473daf474f8d39427c1a99ddb5ad626.svg" valign="-2.4657286499999893px" width="14.672819699999991pt" height="9.54335085pt" style="max-width: 100%;"></a> can be difficult to brute-force compute.
<a href="#references1">Knuth</a> (pg. 102) gives the following 3-step algorithm to
compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9473daf474f8d39427c1a99ddb5ad626.svg"><img alt="$\nu_2$" src="/sj-simmons/crypto/raw/main/svgs/9473daf474f8d39427c1a99ddb5ad626.svg" valign="-2.4657286499999893px" width="14.672819699999991pt" height="9.54335085pt" style="max-width: 100%;"></a> (the algorithm for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ede699741d5f4a7ccb70c527c870347e.svg"><img alt="$\nu_t,$" src="/sj-simmons/crypto/raw/main/svgs/ede699741d5f4a7ccb70c527c870347e.svg" valign="-3.1963502999999895px" width="18.47418539999999pt" height="10.2739725pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c44c088d3144b176acdcb65339ca5d09.svg"><img alt="$t&gt;2,$" src="/sj-simmons/crypto/raw/main/svgs/c44c088d3144b176acdcb65339ca5d09.svg" valign="-3.196350299999994px" width="40.639161749999985pt" height="13.789957499999998pt" style="max-width: 100%;"></a> is more involved):</p>
<ol dir="auto">
<li>Initialize variables <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1885ee8b398072d6a6882c6f3fa76090.svg"><img alt="$h, h', p, p', r$" src="/sj-simmons/crypto/raw/main/svgs/1885ee8b398072d6a6882c6f3fa76090.svg" valign="-3.1963502999999998px" width="81.80360099999999pt" height="15.5544147pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6f9bad7347b91ceebebd3ad7e6f6f2d1.svg"><img alt="$s$" src="/sj-simmons/crypto/raw/main/svgs/6f9bad7347b91ceebebd3ad7e6f6f2d1.svg" valign="0.0px" width="7.7054801999999905pt" height="7.0776222pt" style="max-width: 100%;"></a> as follows. Set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ba4d90f8718a9abf7abdc256257f82b8.svg"><img alt="$h\leftarrow a,$" src="/sj-simmons/crypto/raw/main/svgs/ba4d90f8718a9abf7abdc256257f82b8.svg" valign="-3.1963503000000055px" width="48.297093899999986pt" height="14.611878599999999pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5bd097ec7dc5155686a2d7bf871c06eb.svg"><img alt="$h'\leftarrow m,$" src="/sj-simmons/crypto/raw/main/svgs/5bd097ec7dc5155686a2d7bf871c06eb.svg" valign="-3.1963502999999998px" width="58.652914649999985pt" height="15.5544147pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/762aa9943ae65b43dc6702d7e9eef128.svg"><img alt="$p \leftarrow 1,$" src="/sj-simmons/crypto/raw/main/svgs/762aa9943ae65b43dc6702d7e9eef128.svg" valign="-3.196350299999994px" width="46.62660089999999pt" height="13.789957499999998pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/54636acb26ede68ecbed257f91ad3d41.svg"><img alt="$p' \leftarrow 0,$" src="/sj-simmons/crypto/raw/main/svgs/54636acb26ede68ecbed257f91ad3d41.svg" valign="-3.1963502999999998px" width="51.238476299999995pt" height="15.5544147pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ee0e89fee5aa88e5e5e7bede8ae5347a.svg"><img alt="$s \leftarrow 1+a^2.$" src="/sj-simmons/crypto/raw/main/svgs/ee0e89fee5aa88e5e5e7bede8ae5347a.svg" valign="-1.3698729000000083px" width="82.21631879999998pt" height="14.750749199999998pt" style="max-width: 100%;"></a></li>
<li>Next, set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/20f9396d3e1d3d90cd913fdb47f07f4b.svg"><img alt="$q\leftarrow \lfloor h'/h \rfloor,$" src="/sj-simmons/crypto/raw/main/svgs/20f9396d3e1d3d90cd913fdb47f07f4b.svg" valign="-4.109589px" width="84.45013664999999pt" height="16.4676534pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/45c1459d617e1a1df58883ec459ea7ba.svg"><img alt="$u \leftarrow h'-qh,$" src="/sj-simmons/crypto/raw/main/svgs/45c1459d617e1a1df58883ec459ea7ba.svg" valign="-3.1963502999999998px" width="91.12047944999999pt" height="15.5544147pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f5a827340b26f056a5af8ae5095d49a6.svg"><img alt="$v\leftarrow p'-qp.$" src="/sj-simmons/crypto/raw/main/svgs/f5a827340b26f056a5af8ae5095d49a6.svg" valign="-3.1963502999999998px" width="87.86695334999999pt" height="15.5544147pt" style="max-width: 100%;"></a>  If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5827192c35bdb75e01cc8d501d9ece8f.svg"><img alt="$u^2+v^2&lt; s,$" src="/sj-simmons/crypto/raw/main/svgs/5827192c35bdb75e01cc8d501d9ece8f.svg" valign="-3.1963503000000086px" width="86.99756009999999pt" height="16.5772266pt" style="max-width: 100%;"></a> then set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/90f43f71c97f37f079138ea519b368c1.svg"><img alt="$s=u^2+v^2,$" src="/sj-simmons/crypto/raw/main/svgs/90f43f71c97f37f079138ea519b368c1.svg" valign="-3.1963503000000086px" width="86.99756009999999pt" height="16.5772266pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f6e10c172fced41e9a7ac13da86c3f42.svg"><img alt="$h'\leftarrow h,$" src="/sj-simmons/crypto/raw/main/svgs/f6e10c172fced41e9a7ac13da86c3f42.svg" valign="-3.1963502999999998px" width="53.69092904999999pt" height="15.5544147pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c575e4d4e508df4cf341ac223d82b5fc.svg"><img alt="$h\leftarrow u,$" src="/sj-simmons/crypto/raw/main/svgs/c575e4d4e508df4cf341ac223d82b5fc.svg" valign="-3.1963503000000055px" width="49.01821154999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/085036e3e0786da85023f02800a628c9.svg"><img alt="$p'\leftarrow p,$" src="/sj-simmons/crypto/raw/main/svgs/085036e3e0786da85023f02800a628c9.svg" valign="-3.1963502999999998px" width="51.289832549999986pt" height="15.5544147pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/083dc0bd63a15acb5b7632eb8f31eaea.svg"><img alt="$p\leftarrow v$" src="/sj-simmons/crypto/raw/main/svgs/083dc0bd63a15acb5b7632eb8f31eaea.svg" valign="-3.1963502999999895px" width="42.39902699999999pt" height="10.2739725pt" style="max-width: 100%;"></a> and repeat step 2; otherwise, go to step 3.</li>
<li>Set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8dd82d2e01b67312a699f263c90efc69.svg"><img alt="$u\leftarrow u -h,$" src="/sj-simmons/crypto/raw/main/svgs/8dd82d2e01b67312a699f263c90efc69.svg" valign="-3.1963503000000055px" width="78.51967529999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a>  <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aac212b5f4c9719c04914d025c537f23.svg"><img alt="$v \leftarrow v-p.$" src="/sj-simmons/crypto/raw/main/svgs/aac212b5f4c9719c04914d025c537f23.svg" valign="-3.19635195px" width="75.61426619999999pt" height="12.785402849999999pt" style="max-width: 100%;"></a> If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5827192c35bdb75e01cc8d501d9ece8f.svg"><img alt="$u^2+v^2&lt; s,$" src="/sj-simmons/crypto/raw/main/svgs/5827192c35bdb75e01cc8d501d9ece8f.svg" valign="-3.1963503000000086px" width="86.99756009999999pt" height="16.5772266pt" style="max-width: 100%;"></a> then set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cac28d8f2bc47c77c010e1e8adaa2901.svg"><img alt="$s=u^2+v^2.$" src="/sj-simmons/crypto/raw/main/svgs/cac28d8f2bc47c77c010e1e8adaa2901.svg" valign="-1.3698729000000083px" width="86.99756009999999pt" height="14.750749199999998pt" style="max-width: 100%;"></a> Output <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/693647fc4ca168023923d273eca84673.svg"><img alt="$\nu_2 = \sqrt{s}.$" src="/sj-simmons/crypto/raw/main/svgs/693647fc4ca168023923d273eca84673.svg" valign="-3.940686749999999px" width="63.382738649999986pt" height="16.438356pt" style="max-width: 100%;"></a></li>
</ol>
<p dir="auto">How are the numbers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c7260eb4ab1637d03de7308f52f924a5.svg"><img alt="$\nu_j$" src="/sj-simmons/crypto/raw/main/svgs/c7260eb4ab1637d03de7308f52f924a5.svg" valign="-4.7031731999999895px" width="14.224781999999989pt" height="11.780795399999999pt" style="max-width: 100%;"></a> used to determine which LCG perform best? We want the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/10cd08470937e1ffdd2da17b17f31ab6.svg"><img alt="$d_t,$" src="/sj-simmons/crypto/raw/main/svgs/10cd08470937e1ffdd2da17b17f31ab6.svg" valign="-3.1963503000000055px" width="18.90987614999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2694751a2a66535c88159d27b3a87245.svg"><img alt="$t=2, \ldots, 7,$" src="/sj-simmons/crypto/raw/main/svgs/2694751a2a66535c88159d27b3a87245.svg" valign="-3.196350299999994px" width="85.38778709999998pt" height="13.789957499999998pt" style="max-width: 100%;"></a> to be small, though they will necessarily increase with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg"><img alt="$t$" src="/sj-simmons/crypto/raw/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg" valign="0.0px" width="5.936097749999991pt" height="10.110901349999999pt" style="max-width: 100%;"></a> even
if for good performing LCGs. Since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7bb18e0c45fe84739e9bfcae3a125532.svg"><img alt="$\nu_t=1/d_t,$" src="/sj-simmons/crypto/raw/main/svgs/7bb18e0c45fe84739e9bfcae3a125532.svg" valign="-4.109589000000009px" width="71.17388519999999pt" height="16.438356pt" style="max-width: 100%;"></a> we want the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b96ce619e9618788ad604f351c957414.svg"><img alt="$\nu_t$" src="/sj-simmons/crypto/raw/main/svgs/b96ce619e9618788ad604f351c957414.svg" valign="-2.4657286499999893px" width="13.08606584999999pt" height="9.54335085pt" style="max-width: 100%;"></a> to be large.
<a href="#references1">Knuth</a> (pg. 105) gives the following rule of thumb: <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/333a623fd09f05df04e433bb4baa8f2b.svg"><img alt="$\nu_t\ge 2^{30/t}.$" src="/sj-simmons/crypto/raw/main/svgs/333a623fd09f05df04e433bb4baa8f2b.svg" valign="-2.465728649999995px" width="74.2389681pt" height="17.06121615pt" style="max-width: 100%;"></a></p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-1" class="anchor" aria-hidden="true" href="#exercises-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol start="7" dir="auto">
<li>Show that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7ae1ff3d92039dbc06e050ad364145d5.svg"><img alt="$\nu_t \le \sqrt{a^2+1}$" src="/sj-simmons/crypto/raw/main/svgs/7ae1ff3d92039dbc06e050ad364145d5.svg" valign="-2.465728650000001px" width="93.89827754999999pt" height="16.821868799999997pt" style="max-width: 100%;"></a> for all <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg"><img alt="$t$" src="/sj-simmons/crypto/raw/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg" valign="0.0px" width="5.936097749999991pt" height="10.110901349999999pt" style="max-width: 100%;"></a>.</li>
<li>Implement the algorithm above and use it to compute the accuracy <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9473daf474f8d39427c1a99ddb5ad626.svg"><img alt="$\nu_2$" src="/sj-simmons/crypto/raw/main/svgs/9473daf474f8d39427c1a99ddb5ad626.svg" valign="-2.4657286499999893px" width="14.672819699999991pt" height="9.54335085pt" style="max-width: 100%;"></a> for our LCG (for which <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/afa5f8f36ba3ce9a1f38d9fd25e4434b.svg"><img alt="$a=123456789$" src="/sj-simmons/crypto/raw/main/svgs/afa5f8f36ba3ce9a1f38d9fd25e4434b.svg" valign="0.0px" width="104.57966969999998pt" height="10.5936072pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2c0d775f4ac8a5e8615cdf9cf2c1db95.svg"><img alt="$m=2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/2c0d775f4ac8a5e8615cdf9cf2c1db95.svg" valign="0.0px" width="57.67503389999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a>). <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Laura. And then we did this together in class.</strong></li>
</ol>
<p dir="auto">Now, since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2c0d775f4ac8a5e8615cdf9cf2c1db95.svg"><img alt="$m=2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/2c0d775f4ac8a5e8615cdf9cf2c1db95.svg" valign="0.0px" width="57.67503389999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> is so large, many smallish choices of the multiplier <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> immediately
determine <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/79f155422f397afe48afe2bb036af005.svg"><img alt="$\nu_2.$" src="/sj-simmons/crypto/raw/main/svgs/79f155422f397afe48afe2bb036af005.svg" valign="-2.4657286499999893px" width="20.06095739999999pt" height="9.54335085pt" style="max-width: 100%;"></a>  In fact, according to <a href="#references1">Steele, Vigna</a>, Proposition 1,
for a full period LCG with modulus <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> and multiplier <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, one has <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e50073ff4ba2b4f7da22f38e75ecbf67.svg"><img alt="$\nu_t=\sqrt{a^2+1}$" src="/sj-simmons/crypto/raw/main/svgs/e50073ff4ba2b4f7da22f38e75ecbf67.svg" valign="-2.465728650000001px" width="93.89827754999999pt" height="16.821868799999997pt" style="max-width: 100%;"></a>
whenever <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/93a28b794675fc4f3adb3a6107926aca.svg"><img alt="$a&lt;\sqrt[t]{m};$" src="/sj-simmons/crypto/raw/main/svgs/93a28b794675fc4f3adb3a6107926aca.svg" valign="-3.940686749999999px" width="63.37152689999999pt" height="16.438356pt" style="max-width: 100%;"></a> and this is true for all <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d0ee488bf730f627d5394f0bc3972ae5.svg"><img alt="$t\ge 2$" src="/sj-simmons/crypto/raw/main/svgs/d0ee488bf730f627d5394f0bc3972ae5.svg" valign="-2.2351411499999947px" width="36.07293689999999pt" height="12.82874835pt" style="max-width: 100%;"></a>.</p>
<p dir="auto">For large <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, <a href="#references1">Knuth</a> (on page 105) proposes another quantity
called the <em>merit</em>,</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1f3232c21092e42bec6a35c0f377a91d.svg"><img alt="$$\mu_t=\frac{\pi^{t/2}\nu_t^t}{(t/2)!m}$$" src="/sj-simmons/crypto/raw/main/svgs/1f3232c21092e42bec6a35c0f377a91d.svg" valign="0.0px" width="93.74211495pt" height="41.101633650000004pt" style="max-width: 100%;"></a></p>
<p dir="auto">where, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg"><img alt="$t$" src="/sj-simmons/crypto/raw/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg" valign="0.0px" width="5.936097749999991pt" height="10.110901349999999pt" style="max-width: 100%;"></a> is odd, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4467628e209c91d40d7a1f539598e56c.svg"><img alt="$\left(\frac{t}{2}\right)! = \left(\frac{t}{2}\right)
\left(\frac{t-1}{2}\right) \cdots \left(\frac{1}{2}\right) \sqrt{\pi}.$" src="/sj-simmons/crypto/raw/main/svgs/4467628e209c91d40d7a1f539598e56c.svg" valign="-5.753531849999993px" width="202.35048734999998pt" height="19.726228499999998pt" style="max-width: 100%;"></a></p>
<p dir="auto">The merit <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/87eefe082e181864d1321025c2705ecd.svg"><img alt="$\mu_t$" src="/sj-simmons/crypto/raw/main/svgs/87eefe082e181864d1321025c2705ecd.svg" valign="-3.1963502999999895px" width="14.870715749999988pt" height="10.2739725pt" style="max-width: 100%;"></a> is the volume of a certain ellipsoid (called a <em>figure of merit</em>)
in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg"><img alt="$t$" src="/sj-simmons/crypto/raw/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg" valign="0.0px" width="5.936097749999991pt" height="10.110901349999999pt" style="max-width: 100%;"></a>-space:</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0affd46b9b28f924f744e7a6edfeaf54.svg"><img alt="$$(x_1m-x_2a-\cdots-x_ta^{t-1})^2+x_2^2+\cdots+x_t^2 \le \nu_t^2.$$" src="/sj-simmons/crypto/raw/main/svgs/0affd46b9b28f924f744e7a6edfeaf54.svg" valign="0.0px" width="358.77412065pt" height="18.312383099999998pt" style="max-width: 100%;"></a></p>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/87eefe082e181864d1321025c2705ecd.svg"><img alt="$\mu_t$" src="/sj-simmons/crypto/raw/main/svgs/87eefe082e181864d1321025c2705ecd.svg" valign="-3.1963502999999895px" width="14.870715749999988pt" height="10.2739725pt" style="max-width: 100%;"></a> is small, say <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c38405962bf08af010a310c68f2a0bdd.svg"><img alt="$\mu_t&lt;0.1$" src="/sj-simmons/crypto/raw/main/svgs/c38405962bf08af010a310c68f2a0bdd.svg" valign="-3.196350299999994px" width="58.614885449999996pt" height="13.789957499999998pt" style="max-width: 100%;"></a>, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is not a good
multiplier because said ellipsoid is unlikely to capture points corresponding
to random numbers generated by our LCG.  If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b533f731e0256a92cfe5fe47fd15c732.svg"><img alt="$\mu_t&gt;0.1$" src="/sj-simmons/crypto/raw/main/svgs/b533f731e0256a92cfe5fe47fd15c732.svg" valign="-3.196350299999994px" width="58.614885449999996pt" height="13.789957499999998pt" style="max-width: 100%;"></a> or, better, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/46dc8ee9f162c24e5faa3d3629f7384d.svg"><img alt="$\mu_t&gt;1.0$" src="/sj-simmons/crypto/raw/main/svgs/46dc8ee9f162c24e5faa3d3629f7384d.svg" valign="-3.196350299999994px" width="58.614885449999996pt" height="13.789957499999998pt" style="max-width: 100%;"></a>,
then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is a good multiplier. (Note: it turns out that Knuth's condition
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6f215968c71e9a106c285db640cb8e13.svg"><img alt="$\mu_t &gt; 1.0$" src="/sj-simmons/crypto/raw/main/svgs/6f215968c71e9a106c285db640cb8e13.svg" valign="-3.196350299999994px" width="58.614885449999996pt" height="13.789957499999998pt" style="max-width: 100%;"></a> is essentially the requirement that the LCG's lattice behaves
like a random <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg"><img alt="$t$" src="/sj-simmons/crypto/raw/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg" valign="0.0px" width="5.936097749999991pt" height="10.110901349999999pt" style="max-width: 100%;"></a>-dimensional lattice in that,  up to scaling, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/87eefe082e181864d1321025c2705ecd.svg"><img alt="$\mu_t$" src="/sj-simmons/crypto/raw/main/svgs/87eefe082e181864d1321025c2705ecd.svg" valign="-3.1963502999999895px" width="14.870715749999988pt" height="10.2739725pt" style="max-width: 100%;"></a> is the
expected length of the shortest vector in a random <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg"><img alt="$t$" src="/sj-simmons/crypto/raw/main/svgs/4f4f4e395762a3af4575de74c019ebb5.svg" valign="0.0px" width="5.936097749999991pt" height="10.110901349999999pt" style="max-width: 100%;"></a>-dimensional lattice. See
the discussion
<a href="https://crypto.stackexchange.com/questions/97844/average-spectral-score-of-multiplier-in-lcg" rel="nofollow">here</a>.)</p>
<p dir="auto">The advantage of looking at <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/87eefe082e181864d1321025c2705ecd.svg"><img alt="$\mu_t$" src="/sj-simmons/crypto/raw/main/svgs/87eefe082e181864d1321025c2705ecd.svg" valign="-3.1963502999999895px" width="14.870715749999988pt" height="10.2739725pt" style="max-width: 100%;"></a> instead of just <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b96ce619e9618788ad604f351c957414.svg"><img alt="$\nu_t$" src="/sj-simmons/crypto/raw/main/svgs/b96ce619e9618788ad604f351c957414.svg" valign="-2.4657286499999893px" width="13.08606584999999pt" height="9.54335085pt" style="max-width: 100%;"></a> is that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/87eefe082e181864d1321025c2705ecd.svg"><img alt="$\mu_t$" src="/sj-simmons/crypto/raw/main/svgs/87eefe082e181864d1321025c2705ecd.svg" valign="-3.1963502999999895px" width="14.870715749999988pt" height="10.2739725pt" style="max-width: 100%;"></a> can
be used to compare different multipliers for a fixed <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg"><img alt="$m.$" src="/sj-simmons/crypto/raw/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg" valign="0.0px" width="18.99932429999999pt" height="7.0776222pt" style="max-width: 100%;"></a>  For instance, with
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> fixed at <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f54c544f103d398bf9c036ff710d9361.svg"><img alt="$2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/f54c544f103d398bf9c036ff710d9361.svg" valign="0.0px" width="21.324302999999993pt" height="13.380876299999999pt" style="max-width: 100%;"></a>, we wish to find a multiplier <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> with not only <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c44c5c5de2f9993727644e337ce1dca2.svg"><img alt="$\nu_2,$" src="/sj-simmons/crypto/raw/main/svgs/c44c5c5de2f9993727644e337ce1dca2.svg" valign="-3.1963502999999895px" width="20.06095739999999pt" height="10.2739725pt" style="max-width: 100%;"></a>
but also <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8615699836ecb78ef8a53e8d3263850c.svg"><img alt="$\mu_2,$" src="/sj-simmons/crypto/raw/main/svgs/8615699836ecb78ef8a53e8d3263850c.svg" valign="-3.1963502999999895px" width="21.84560729999999pt" height="10.2739725pt" style="max-width: 100%;"></a> sufficiently large relative to other multipliers.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-2" class="anchor" aria-hidden="true" href="#exercises-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol start="9" dir="auto">
<li>Compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d9324c21b00105263d6f54123813d99c.svg"><img alt="$\mu_2$" src="/sj-simmons/crypto/raw/main/svgs/d9324c21b00105263d6f54123813d99c.svg" valign="-3.1963502999999895px" width="16.45747124999999pt" height="10.2739725pt" style="max-width: 100%;"></a> for our LCG; i.e., <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7543ddf5c75fb86912c49588ae0fd6e2.svg"><img alt="$a=123456789,$" src="/sj-simmons/crypto/raw/main/svgs/7543ddf5c75fb86912c49588ae0fd6e2.svg" valign="-3.196350299999994px" width="109.14589289999998pt" height="13.789957499999998pt" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a404936c9122ffe075a49b205e698627.svg"><img alt="$m=2^{64}.$" src="/sj-simmons/crypto/raw/main/svgs/a404936c9122ffe075a49b205e698627.svg" valign="0.0px" width="63.063166649999985pt" height="13.380876299999999pt" style="max-width: 100%;"></a> Is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> a good multiplier based on <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d9324c21b00105263d6f54123813d99c.svg"><img alt="$\mu_2$" src="/sj-simmons/crypto/raw/main/svgs/d9324c21b00105263d6f54123813d99c.svg" valign="-3.1963502999999895px" width="16.45747124999999pt" height="10.2739725pt" style="max-width: 100%;"></a>?  <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>In class.</strong></li>
<li>What if we leave the modulus at <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c7fdaf695852cd6459cc4165d25b86b2.svg"><img alt="$m = 2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/c7fdaf695852cd6459cc4165d25b86b2.svg" valign="0.0px" width="57.67503389999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> but take the multiplier to be <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/16a5f39906ca313c4ef3f388684127b8.svg"><img alt="$a =$" src="/sj-simmons/crypto/raw/main/svgs/16a5f39906ca313c4ef3f388684127b8.svg" valign="0.0px" width="26.04068609999999pt" height="7.0776222pt" style="max-width: 100%;"></a> 214319739410341? Is this <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> a good multiplier? (This multiplier is recommended in <a href="#references1">Steele, Vigna</a> on pg. 18.) <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>In class.</strong></li>
<li><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji><strong>Challenge</strong><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji> When <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c7fdaf695852cd6459cc4165d25b86b2.svg"><img alt="$m = 2^{64}$" src="/sj-simmons/crypto/raw/main/svgs/c7fdaf695852cd6459cc4165d25b86b2.svg" valign="0.0px" width="57.67503389999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/16a5f39906ca313c4ef3f388684127b8.svg"><img alt="$a =$" src="/sj-simmons/crypto/raw/main/svgs/16a5f39906ca313c4ef3f388684127b8.svg" valign="0.0px" width="26.04068609999999pt" height="7.0776222pt" style="max-width: 100%;"></a> 214319739410341, find <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b96ce619e9618788ad604f351c957414.svg"><img alt="$\nu_t$" src="/sj-simmons/crypto/raw/main/svgs/b96ce619e9618788ad604f351c957414.svg" valign="-2.4657286499999893px" width="13.08606584999999pt" height="9.54335085pt" style="max-width: 100%;"></a> for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a1b101a367cf06ca257ded541b352ac1.svg"><img alt="$3 \le t \le 6$" src="/sj-simmons/crypto/raw/main/svgs/a1b101a367cf06ca257ded541b352ac1.svg" valign="-2.2351411499999947px" width="66.20977769999999pt" height="12.82874835pt" style="max-width: 100%;"></a> by either directly implementing the algorithm in <a href="#references1">Knuth</a> or by comparing
with the definitions and listed values in <a href="#references1">Steele, Vigna</a>.
Also compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/87eefe082e181864d1321025c2705ecd.svg"><img alt="$\mu_t$" src="/sj-simmons/crypto/raw/main/svgs/87eefe082e181864d1321025c2705ecd.svg" valign="-3.1963502999999895px" width="14.870715749999988pt" height="10.2739725pt" style="max-width: 100%;"></a> for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4572a9d4690118768057d1b4e6e1f08a.svg"><img alt="$3 \le t \le 6.$" src="/sj-simmons/crypto/raw/main/svgs/4572a9d4690118768057d1b4e6e1f08a.svg" valign="-2.2351411499999947px" width="70.77600089999999pt" height="12.82874835pt" style="max-width: 100%;"></a> What do those gauges say about the randomness of our LCG? <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Code for this was posted.</strong></li>
<li>(Optional) <a href="#references1">Steele, Vigna</a> recommends the smaller multiplier <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/306767c88ebd3a3b9965443894593881.svg"><img alt="$a = 15828829061$" src="/sj-simmons/crypto/raw/main/svgs/306767c88ebd3a3b9965443894593881.svg" valign="0.0px" width="121.0180884pt" height="10.5936072pt" style="max-width: 100%;"></a> (where still <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f27dc0f5c226f6b1999562f2658836c1.svg"><img alt="$m = 2^{64})$" src="/sj-simmons/crypto/raw/main/svgs/f27dc0f5c226f6b1999562f2658836c1.svg" valign="-4.109589000000009px" width="64.88965889999999pt" height="17.4904653pt" style="max-width: 100%;"></a>; hence, let us assume that that value for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> leads to good performance on all spectral tests. But show that it rejected by the chi-square on chi-square test above. <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Simmons did this in class.</strong></li>
</ol>
<p dir="auto">In addition to the chi-squared and spectral tests, there are several other
commonly applied tests to assess the performance of an LCG or, more generally,
a PRNG.  The <em>Kolmogorov-Smirnov</em> test works well with small sample sizes and therefore
applies locally but perhaps not globally (to the entire cycle of ones PRNG) —
unless one uses a <em>Kolmogorov-Smirnov on Kolmogorov-Smirnov</em> test.</p>
<p dir="auto">Similarly global tests may not apply locally.  The spectral test (discussed above)
looks at the complete cycle and hence applies globally, but that alone has nothing
to do with non-randomness.  In our case the complete cycle as a set is just the
numbers from <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/29632a9bf827ce0200454dd32fc3be82.svg"><img alt="$0$" src="/sj-simmons/crypto/raw/main/svgs/29632a9bf827ce0200454dd32fc3be82.svg" valign="0.0px" width="8.219209349999991pt" height="10.5936072pt" style="max-width: 100%;"></a> to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/70919d0639b61c93f2ba69ed9151b157.svg"><img alt="$2^{64}-1.$" src="/sj-simmons/crypto/raw/main/svgs/70919d0639b61c93f2ba69ed9151b157.svg" valign="-1.3698729000000083px" width="55.022835449999995pt" height="14.750749199999998pt" style="max-width: 100%;"></a>
In the spectral test the <em>order</em> of the numbers determines the location of the points
in 2-, 3-, 4-dimensional, etc., space.  (If we did a spectral test in 1-space, we would
get simply <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1608b7b22440e2629345d65cc6ab25bf.svg"><img alt="$d_1=\nu_1=1.$" src="/sj-simmons/crypto/raw/main/svgs/1608b7b22440e2629345d65cc6ab25bf.svg" valign="-2.4657286500000066px" width="88.04585129999998pt" height="13.881256950000001pt" style="max-width: 100%;"></a>)</p>
<p dir="auto">In modern times, researchers might perform a deeper analysis by applying a spectral
test to sequences with lag <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg"><img alt="$\ell$" src="/sj-simmons/crypto/raw/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg" valign="0.0px" width="6.849367799999992pt" height="11.4155283pt" style="max-width: 100%;"></a> — for an LCG where the lag is
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/324bb9a44b26d043ac3a75823ee59f2b.svg"><img alt="$\ell=3$" src="/sj-simmons/crypto/raw/main/svgs/324bb9a44b26d043ac3a75823ee59f2b.svg" valign="0.0px" width="36.98620694999999pt" height="11.4155283pt" style="max-width: 100%;"></a>, one would apply the spectral test to, for instance, points in 3-space that
look like <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/714736f073b3fb5998266181214e88a2.svg"><img alt="$(x_0,x_2,x_4),(x_1, x_3, x_5),\ldots.$" src="/sj-simmons/crypto/raw/main/svgs/714736f073b3fb5998266181214e88a2.svg" valign="-4.109589000000009px" width="196.5067269pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">The spectral test is a <em>theoretical</em> test in the sense that we has an algorithm
for computing <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b96ce619e9618788ad604f351c957414.svg"><img alt="$\nu_t$" src="/sj-simmons/crypto/raw/main/svgs/b96ce619e9618788ad604f351c957414.svg" valign="-2.4657286499999893px" width="13.08606584999999pt" height="9.54335085pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/87eefe082e181864d1321025c2705ecd.svg"><img alt="$\mu_t$" src="/sj-simmons/crypto/raw/main/svgs/87eefe082e181864d1321025c2705ecd.svg" valign="-3.1963502999999895px" width="14.870715749999988pt" height="10.2739725pt" style="max-width: 100%;"></a> before even implementing the actual PRNG.  Meanwhile,
the chi-squared and Kolmogorov-Smirnov test are <em>empirical</em> in that we first implement
the our LCG and perform statistical test on samples drawn from it.</p>
<ol start="13" dir="auto">
<li><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji><strong>Challenge project</strong><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji> In a lag spectral test with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/abb1926322a209cf283283af782fd3d4.svg"><img alt="$\ell&gt;1$" src="/sj-simmons/crypto/raw/main/svgs/abb1926322a209cf283283af782fd3d4.svg" valign="-0.6427030500000053px" width="36.98620694999999pt" height="12.05823135pt" style="max-width: 100%;"></a> of an LCG, do the points still form a lattice?  If so, does Knuth's algorithm apply and/or can it be modified to compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd09f2a455dbdb35d20123edda4a8d97.svg"><img alt="$\nu_t?$" src="/sj-simmons/crypto/raw/main/svgs/dd09f2a455dbdb35d20123edda4a8d97.svg" valign="-2.4657286500000066px" width="21.67055054999999pt" height="13.881256950000001pt" style="max-width: 100%;"></a></li>
</ol>
<h3 tabindex="-1" dir="auto"><a id="user-content-cryptographic-security" class="anchor" aria-hidden="true" href="#cryptographic-security"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cryptographic security</h3>
<p dir="auto">The discussion and exercises above did not turn up evidence of non-randomness for the
following LCG.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="m = 2**64
a = 214319739410341
c = 12121212121
state = 10**10+1

def prng():
    &quot;&quot;&quot;Return the next sequential integer between 0 and m-1, inclusive.&quot;&quot;&quot;
    global state
    state = (a * state + c) % m
    return state"><pre><span class="pl-s1">m</span> <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">64</span>
<span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-c1">214319739410341</span>
<span class="pl-s1">c</span> <span class="pl-c1">=</span> <span class="pl-c1">12121212121</span>
<span class="pl-s1">state</span> <span class="pl-c1">=</span> <span class="pl-c1">10</span><span class="pl-c1">**</span><span class="pl-c1">10</span><span class="pl-c1">+</span><span class="pl-c1">1</span>

<span class="pl-k">def</span> <span class="pl-en">prng</span>():
    <span class="pl-s">"""Return the next sequential integer between 0 and m-1, inclusive."""</span>
    <span class="pl-k">global</span> <span class="pl-s1">state</span>
    <span class="pl-s1">state</span> <span class="pl-c1">=</span> (<span class="pl-s1">a</span> <span class="pl-c1">*</span> <span class="pl-s1">state</span> <span class="pl-c1">+</span> <span class="pl-s1">c</span>) <span class="pl-c1">%</span> <span class="pl-s1">m</span>
    <span class="pl-k">return</span> <span class="pl-s1">state</span></pre></div>
<p dir="auto">The LCG above is still, at least, a candidate for a viable PRNG (Pseudo-random number
generator) though several additional tests would need to be applied to bar against
non-randomness. But what does pseudo-random really mean?</p>
<p dir="auto">In Computational Complexity Theory, a distribution is <em>pseudo-random</em> against a class of
<em>adversaries</em> if no adversary (think of an adversary as an algorithm or a test or some
other <em>distinguisher</em> or <em>observer</em>) from the class can distinguish it (with not
insignificant advantage) from the uniform distribution.</p>
<p dir="auto">That certain adversaries cannot distinguish a pseudo-random distribution from a
uniform distribution corresponds to our intuitive notion that pseudo-random numbers
should <em>look like</em> random numbers.
A PRNG is a deterministic algorithm whose generated sequence appears to be pseudo-random
based on whichever statistical tests (e.g., the spectral test) are appropriate given
the application at hand.</p>
<p dir="auto">The difference, in the context of complexity-based modern <em>cryptography</em>, is that the
generated numbers <em>must</em> be indistinguishable from random numbers for <em>all</em> adversaries, even
adversaries with advanced computational capabilities; said differently, random numbers
in cryptography are numbers whose value cannot be predicted before they are
generated, even with knowledge of previously generated numbers.</p>
<p dir="auto">More mathematically, if random numbers are to be drawn from a set with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> elements
(such as <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/41e684c9fa6df2ed9a097c7c352629ca.svg"><img alt="$\{0, 1, \ldots, n-1\}$" src="/sj-simmons/crypto/raw/main/svgs/41e684c9fa6df2ed9a097c7c352629ca.svg" valign="-4.109589000000009px" width="114.88941419999999pt" height="16.438356pt" style="max-width: 100%;"></a>), the requirement is that an adversary cannot predict the number
with likelihood non-negligibly greater than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d77e685bfa7e0c249fa2e10b3d67677.svg"><img alt="$1/n$" src="/sj-simmons/crypto/raw/main/svgs/2d77e685bfa7e0c249fa2e10b3d67677.svg" valign="-4.109589000000009px" width="26.30529494999999pt" height="16.438356pt" style="max-width: 100%;"></a> — the same as guessing.</p>
<p dir="auto">Equivalently, one can reformulate this as: given <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a> consecutive random numbers from
our sequence, any observer given <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aa9d1dc08f682f546eeee2869762ff90.svg"><img alt="$k-1$" src="/sj-simmons/crypto/raw/main/svgs/aa9d1dc08f682f546eeee2869762ff90.svg" valign="-1.3698745500000056px" width="37.38576269999999pt" height="12.785402849999999pt" style="max-width: 100%;"></a> of them cannot predict <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>th one with likelihood
significantly greater than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3fbc1952936c005853aa5dcba1b29090.svg"><img alt="$1/n.$" src="/sj-simmons/crypto/raw/main/svgs/3fbc1952936c005853aa5dcba1b29090.svg" valign="-4.109589000000009px" width="30.87151979999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Our LCG fails spectacularly to be cryptographically secure, as does any LCG whose
whose modulus is a power of 2 since its lower bits are easily seen to be predictable.
We will now work out.the details for those special moduli. Importantly, <em>any</em>
LCG is predictable in that, a partial sequence of the output can be used to
generate the rest of the sequence, even without explicit knowledge of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg"><img alt="$m.$" src="/sj-simmons/crypto/raw/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg" valign="0.0px" width="18.99932429999999pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> divide that modulus <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> of an LCG defined by
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/60f1e89ee25580012c6674006bc5df57.svg"><img alt="$x_{n+1}=ax_n +c \mod m,$" src="/sj-simmons/crypto/raw/main/svgs/60f1e89ee25580012c6674006bc5df57.svg" valign="-3.835608150000004px" width="178.08578039999998pt" height="15.251136449999997pt" style="max-width: 100%;"></a> and set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e942787b962c28fa9c219cfa29dfa581.svg"><img alt="$y_n = x_n \mod d.$" src="/sj-simmons/crypto/raw/main/svgs/e942787b962c28fa9c219cfa29dfa581.svg" valign="-3.1963503000000055px" width="118.33502504999997pt" height="14.611878599999999pt" style="max-width: 100%;"></a>
Now, for some integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg"><img alt="$\ell$" src="/sj-simmons/crypto/raw/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg" valign="0.0px" width="6.849367799999992pt" height="11.4155283pt" style="max-width: 100%;"></a>, we have</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9dc89200c8b9584446387a91c6b00273.svg"><img alt="$$x_{n+1} = ax_n + c + d\ell,$$" src="/sj-simmons/crypto/raw/main/svgs/9dc89200c8b9584446387a91c6b00273.svg" valign="0.0px" width="151.20428895pt" height="15.251136449999997pt" style="max-width: 100%;"></a></p>
<p dir="auto">so that, modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a>,</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c2c9cf76f4b7ed1bcebf8cbb7e25c47d.svg"><img alt="$$y_{n+1} = x_{n+1} = ax_n + c + d\ell = ax_n + c = ay_n + c.$$" src="/sj-simmons/crypto/raw/main/svgs/c2c9cf76f4b7ed1bcebf8cbb7e25c47d.svg" valign="0.0px" width="357.74705339999997pt" height="15.251136449999997pt" style="max-width: 100%;"></a></p>
<p dir="auto">In other words, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, then when we reduce modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a>, in turn, each of the
numbers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1ef9a5a71de299847eb1f8a3e573f241.svg"><img alt="$x_0, x_1, \ldots$" src="/sj-simmons/crypto/raw/main/svgs/1ef9a5a71de299847eb1f8a3e573f241.svg" valign="-3.1963502999999895px" width="67.32865259999998pt" height="10.2739725pt" style="max-width: 100%;"></a> we get another LCG <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/681a1278c3f92f50665ce825720522ee.svg"><img alt="$y_0, y_1, \ldots$" src="/sj-simmons/crypto/raw/main/svgs/681a1278c3f92f50665ce825720522ee.svg" valign="-3.1963502999999895px" width="64.65753854999998pt" height="10.2739725pt" style="max-width: 100%;"></a> but with modulus
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> — which, as such, can't have period greater than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d94d6868b0dbbea61050c0cabe84f89.svg"><img alt="$d.$" src="/sj-simmons/crypto/raw/main/svgs/2d94d6868b0dbbea61050c0cabe84f89.svg" valign="0.0px" width="13.12218764999999pt" height="11.4155283pt" style="max-width: 100%;"></a></p>
<p dir="auto">The LCG we constructed above has modulus <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a404936c9122ffe075a49b205e698627.svg"><img alt="$m=2^{64}.$" src="/sj-simmons/crypto/raw/main/svgs/a404936c9122ffe075a49b205e698627.svg" valign="0.0px" width="63.063166649999985pt" height="13.380876299999999pt" style="max-width: 100%;"></a> Taking say <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9ab78716524228e52e840ca8a0b08ac1.svg"><img alt="$d=16$" src="/sj-simmons/crypto/raw/main/svgs/9ab78716524228e52e840ca8a0b08ac1.svg" valign="0.0px" width="46.91201294999998pt" height="11.4155283pt" style="max-width: 100%;"></a> corresponds
to looking only at the least significant 4 bits of the numbers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4a456007b04b555833cbe67251952c59.svg"><img alt="$x_0, x_1, \ldots.$" src="/sj-simmons/crypto/raw/main/svgs/4a456007b04b555833cbe67251952c59.svg" valign="-3.1963502999999895px" width="74.63453579999998pt" height="10.2739725pt" style="max-width: 100%;"></a>
The sequence of those least significant 4 bits cannot be very random because its
period is at most 16.</p>
<p dir="auto">Or just take <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3a0185bb14ebc07d6c47efb8b322ad3f.svg"><img alt="$d=2.$" src="/sj-simmons/crypto/raw/main/svgs/3a0185bb14ebc07d6c47efb8b322ad3f.svg" valign="0.0px" width="43.25902844999999pt" height="11.4155283pt" style="max-width: 100%;"></a>  Reducing modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e675da7c7f7c3d89bc6087aab1186a27.svg"><img alt="$d=2$" src="/sj-simmons/crypto/raw/main/svgs/e675da7c7f7c3d89bc6087aab1186a27.svg" valign="0.0px" width="38.69280359999998pt" height="11.4155283pt" style="max-width: 100%;"></a> any LCG that has modulus a power of 2 and
both <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> odd we get <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fe4e035666fca4c33110843c97204146.svg"><img alt="$y_{n+1} = y_n + 1.$" src="/sj-simmons/crypto/raw/main/svgs/fe4e035666fca4c33110843c97204146.svg" valign="-3.835608149999995px" width="105.45290414999998pt" height="14.42921535pt" style="max-width: 100%;"></a>  Hence, the least significant bit
always alternates, and the terms of our original sequence <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c535c09bb36ceeefb36eb2ece911b331.svg"><img alt="$x_0, x_1,\ldots$" src="/sj-simmons/crypto/raw/main/svgs/c535c09bb36ceeefb36eb2ece911b331.svg" valign="-3.1963502999999895px" width="67.32865259999998pt" height="10.2739725pt" style="max-width: 100%;"></a> are,
alternatively, even and odd.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise" class="anchor" aria-hidden="true" href="#exercise"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="14" dir="auto">
<li>Suppose we use our LCG to generate two consecutive numbers, and that you are given only one of them. Based solely on that value (suppose that you forgot <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, other than that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> are odd and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is a power of 2), can you predict the other with probability of success greater then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1fba2581e53b2adee9136e4fb04c3ba6.svg"><img alt="$1/(m-1)=1/(2^{64}-1)?$" src="/sj-simmons/crypto/raw/main/svgs/1fba2581e53b2adee9136e4fb04c3ba6.svg" valign="-4.109589000000009px" width="181.32803865pt" height="17.4904653pt" style="max-width: 100%;"></a> (I.e., better than guessing?) If so, with what likelihood? <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Marina and Alvaro saw in class what to do here, and Simmons later sent an email about it.</strong></li>
</ol>
<p dir="auto">In modern cryptography, one assumes that adversaries know which methodology is
begin employed. The point is to develop tools in which say a <em>key</em> or maybe the
initial state of a PRNG must be kept secret but not the method and its theoretical
justification.  (But even the initial state of an LCG could potentially be uncovered
given partial output.)</p>
<p dir="auto">To be clear, an LCG should <em>never</em> be used when a CSPRNG —  a cryptographically
secure pseudo-random number generator — is required.  Moreover, passing some
battery of statistical test is necessary but not sufficient for cryptographic
security. If your PRNG does not at least appear to be random, then it has no chance
whatever of being cryptographically secure.</p>
<p dir="auto">LCGs are not appropriate for cryptographic applications, they are however useful in
that they are simple to implement and easy to understand so that they may be
of use in say embedded systems, or in simulations, or in applications where some
not necessarily robust stochasticity is needed.</p>
<p dir="auto">Suppose one has an application in mind for which an LCG is appropriate. Often
the situation with the lower bits not being random is not an issue.  If it is
an issue, then there are fixes.
One fix is to lop off the lower bits, after maybe first increasing the power of 2
defining <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> — the idea being that the most significant bits should still be random.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-1" class="anchor" aria-hidden="true" href="#exercise-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="15" dir="auto">
<li>Another fix is to change the modulus to a prime or, in our case, to say <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/169fc71c677bab4f7ed36d42f71e4edf.svg"><img alt="$2^{64}-1,$" src="/sj-simmons/crypto/raw/main/svgs/169fc71c677bab4f7ed36d42f71e4edf.svg" valign="-3.1963503000000086px" width="55.022835449999995pt" height="16.5772266pt" style="max-width: 100%;"></a> which factors as <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/420447c84bd7f4130dc256cba7c87fef.svg"><img alt="$3\cdot 5\cdot 17\cdot 257\cdot 641\cdot 65537\cdot 6700417$" src="/sj-simmons/crypto/raw/main/svgs/420447c84bd7f4130dc256cba7c87fef.svg" valign="0.0px" width="252.05449829999992pt" height="10.5936072pt" style="max-width: 100%;"></a>. Change (only) the modulus in our LCG and print out say the first 100 numbers, each taken modulo 2.  Of course, we now have a tertiary problem.  Print out the first 100 numbers, each taken modulo 3. (Note: changing the modulus could potentially break full periodicity and favorable performance on tests, everything would have to be rechecked.)</li>
</ol>
<p dir="auto">See also <a href="https://en.wikipedia.org/wiki/Permuted_congruential_generator" rel="nofollow">permuted congruential generators</a>.</p>
<p dir="auto">Lastly, are there any cryptographically secure PRNGs? Answer: yes. We'll look
at one below whose security relies on the infeasibility of factoring products
of large primes and follows from certain basic number-theory results
(see <a href="#blum-blum-shub">Blum Blum Shub</a>).</p>
<a id="user-content-references1">
</a><h4 tabindex="-1" dir="auto"><a></a><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h4>
<ul dir="auto">
<li>Donald Knuth, The Art of Computer Programming, 3rd Edition,
Volume 2: Seminumerical Algorithms, 1998.</li>
<li>Guy Steele and Sebastian Vigna, Computationally Easy, Spectrally Good
Multipliers for Congruential Pseudo-Random Number Generators.
<a href="https://arxiv.org/abs/2001.05304" rel="nofollow">arxiv.org/abs/2001.05304</a>, 2021.</li>
</ul>
<p align="right" dir="auto">  <a href="#contents"> contents </a> </p>
<h2 tabindex="-1" dir="auto"><a id="user-content-ii-numero-algebraic-practicalities" class="anchor" aria-hidden="true" href="#ii-numero-algebraic-practicalities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>II. Numero-algebraic practicalities</h2>
<h3 tabindex="-1" dir="auto"><a id="user-content-prime-fields" class="anchor" aria-hidden="true" href="#prime-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prime fields</h3>
<p dir="auto">Note that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e927310f36765b5ad74fbd34bdb938dd.svg"><img alt="$2\cdot 11 = 1$" src="/sj-simmons/crypto/raw/main/svgs/e927310f36765b5ad74fbd34bdb938dd.svg" valign="0.0px" width="66.66644984999998pt" height="10.5936072pt" style="max-width: 100%;"></a> modulo 21 so that 2 has 11 as its multiplicative inverse in
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3731d4bdedc964b8cdbf897e6ea86d26.svg"><img alt="$\mathbb{Z}/21.$" src="/sj-simmons/crypto/raw/main/svgs/3731d4bdedc964b8cdbf897e6ea86d26.svg" valign="-4.109589000000009px" width="40.18279319999999pt" height="16.438356pt" style="max-width: 100%;"></a>  Meanwhile, in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e4c03b084fef61df3489a70d833a595b.svg"><img alt="$\mathbb{Z}/21,$" src="/sj-simmons/crypto/raw/main/svgs/e4c03b084fef61df3489a70d833a595b.svg" valign="-4.109589000000009px" width="40.18279319999999pt" height="16.438356pt" style="max-width: 100%;"></a> 3 can have no multiplicative inverse
since it is a <em>zero divisor</em>: <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/87051d27ad5184bf612b2d73a5741539.svg"><img alt="$3\cdot 7 = 0 \mod 21$" src="/sj-simmons/crypto/raw/main/svgs/87051d27ad5184bf612b2d73a5741539.svg" valign="0.0px" width="122.83057214999998pt" height="11.4155283pt" style="max-width: 100%;"></a> (since, then, 3 having a multiplicative
inverse <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cd1706e14c67b920b4d846ac8e7e94b2.svg"><img alt="$3^{-1}$" src="/sj-simmons/crypto/raw/main/svgs/cd1706e14c67b920b4d846ac8e7e94b2.svg" valign="0.0px" width="25.04577734999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> would lead to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ffb37c45f2327f5e942485fed57d77e9.svg"><img alt="$7 =7\cdot 1= 7\cdot 3 \cdot 3^{-1}=0\cdot 3^{-1}=0$" src="/sj-simmons/crypto/raw/main/svgs/ffb37c45f2327f5e942485fed57d77e9.svg" valign="0.0px" width="244.42824944999998pt" height="13.380876299999999pt" style="max-width: 100%;"></a> in
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fa63889ae12dd06142230d83f9a54f90.svg"><img alt="$\mathbb{Z}/21).$" src="/sj-simmons/crypto/raw/main/svgs/fa63889ae12dd06142230d83f9a54f90.svg" valign="-4.109589000000009px" width="46.57551029999998pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">A commutative ring (such as <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a>) for which every non-zero element has a
multiplicative inverse is called a <em>field</em>.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-3" class="anchor" aria-hidden="true" href="#exercises-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol dir="auto">
<li>Show that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> is a field if and only if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is prime.</li>
<li>Show that multiplicative inverses in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> (or any ring) are unique.</li>
</ol>
<p dir="auto">If an element of a ring admits a multiplicative inverse, it is called a <em>unit</em>.
The units in a ring form a multiplicative group.</p>
<p dir="auto">The multiplicative group of units in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> is often denoted <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b28f4c4bcb1bc94d5ff2e276a1f76558.svg"><img alt="$(\mathbb{Z}/n)^*.$" src="/sj-simmons/crypto/raw/main/svgs/b28f4c4bcb1bc94d5ff2e276a1f76558.svg" valign="-4.109589000000009px" width="53.953772399999984pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-2" class="anchor" aria-hidden="true" href="#exercise-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="3" dir="auto">
<li>How does the order of the group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cc450b1fd7ccdc41e54fbd9d0ee2bd9c.svg"><img alt="$(\mathbb{Z}/n)^*$" src="/sj-simmons/crypto/raw/main/svgs/cc450b1fd7ccdc41e54fbd9d0ee2bd9c.svg" valign="-4.109589000000009px" width="48.565654499999994pt" height="16.438356pt" style="max-width: 100%;"></a> depend on <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d538473761d79a0d6d90fc487c6f4b06.svg"><img alt="$n?$" src="/sj-simmons/crypto/raw/main/svgs/d538473761d79a0d6d90fc487c6f4b06.svg" valign="0.0px" width="17.62946624999999pt" height="11.4155283pt" style="max-width: 100%;"></a></li>
</ol>
<p dir="auto">Above we used the numlib function <strong>Zmod</strong> to create a class representing <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4ee8f29e8fc6ff907c10277ad56123ba.svg"><img alt="$\mathbb{Z}/n,$" src="/sj-simmons/crypto/raw/main/svgs/4ee8f29e8fc6ff907c10277ad56123ba.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a>
where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> may or may not be prime.  We often want to work in a field so we pick <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
to be a prime, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a>.  Then, it is best to go ahead and tell that to numlib, by using <strong>Zmodp</strong>
instead of <strong>Zmod</strong> (because the resulting class is then faster and has more functionality).</p>
<p dir="auto">Here is an example.</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; import numlib as nl
&gt;&gt;&gt; nl.isprime(2027)  # True
&gt;&gt;&gt; F = nl.Zmodp(2027)  # Note: 2027 is prime
&gt;&gt;&gt; F  # Z/2027
&gt;&gt;&gt; x = F(100)
&gt;&gt;&gt; x   # 100 + &lt;2027&gt;
&gt;&gt;&gt; x**1000  # 2022 + &lt;2027&gt;
&gt;&gt;&gt; x**-1  # 750 + &lt;2027&gt;"><pre>&gt;&gt;&gt; <span class="pl-k">import</span> numlib <span class="pl-k">as</span> nl
&gt;&gt;&gt; nl.isprime(<span class="pl-c1">2027</span>)  <span class="pl-c"><span class="pl-c">#</span> True</span>
&gt;&gt;&gt; F <span class="pl-k">=</span> nl.Zmodp(<span class="pl-c1">2027</span>)  <span class="pl-c"><span class="pl-c">#</span> Note: 2027 is prime</span>
&gt;&gt;&gt; F  <span class="pl-c"><span class="pl-c">#</span> Z/2027</span>
&gt;&gt;&gt; x <span class="pl-k">=</span> F(<span class="pl-c1">100</span>)
&gt;&gt;&gt; x   <span class="pl-c"><span class="pl-c">#</span> 100 + &lt;2027&gt;</span>
&gt;&gt;&gt; x<span class="pl-k">**</span><span class="pl-c1">1000</span>  <span class="pl-c"><span class="pl-c">#</span> 2022 + &lt;2027&gt;</span>
&gt;&gt;&gt; x<span class="pl-k">**-</span><span class="pl-c1">1</span>  <span class="pl-c"><span class="pl-c">#</span> 750 + &lt;2027&gt;</span></pre></div>
<h3 tabindex="-1" dir="auto"><a id="user-content-generating-primes" class="anchor" aria-hidden="true" href="#generating-primes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generating primes</h3>
<p dir="auto">We will need some fairly large prime numbers — 200 bits, say, for now; so primes between
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6419e4c20073a492fb859e12e29e24a4.svg"><img alt="$2^{199}$" src="/sj-simmons/crypto/raw/main/svgs/6419e4c20073a492fb859e12e29e24a4.svg" valign="0.0px" width="27.87685064999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8ead495e1e0f713f33e7a75e00656907.svg"><img alt="$2^{200}.$" src="/sj-simmons/crypto/raw/main/svgs/8ead495e1e0f713f33e7a75e00656907.svg" valign="0.0px" width="33.264976799999985pt" height="13.380876299999999pt" style="max-width: 100%;"></a></p>
<p dir="auto">One way to generate such a prime would be to iterate through numbers larger that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6419e4c20073a492fb859e12e29e24a4.svg"><img alt="$2^{199}$" src="/sj-simmons/crypto/raw/main/svgs/6419e4c20073a492fb859e12e29e24a4.svg" valign="0.0px" width="27.87685064999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> until we
find one that is prime.  Alternatively, one could randomly generate sequences of zeros and ones of
length 200 and check if the corresponding decimal number is prime.  Python has a built-in function that
generates an integer from random bits:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import random
k = 200
decimal = random.getrandbits(k)"><pre><span class="pl-k">import</span> <span class="pl-s1">random</span>
<span class="pl-s1">k</span> <span class="pl-c1">=</span> <span class="pl-c1">200</span>
<span class="pl-s1">decimal</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">getrandbits</span>(<span class="pl-s1">k</span>)</pre></div>
<p dir="auto">Of course, depending on whether the most significant random bit is zero or one, we might get a
number somewhat less than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/04b77b579deb4c01c96f2efb9ff878d3.svg"><img alt="$2^{199};$" src="/sj-simmons/crypto/raw/main/svgs/04b77b579deb4c01c96f2efb9ff878d3.svg" valign="-3.1963503000000086px" width="33.264976799999985pt" height="16.5772266pt" style="max-width: 100%;"></a> so let us set the most significant bit to one and, while
we are at it, set also the least significant bit to 1 since primes beyond 2 must be odd:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="decimal |= (1 &lt;&lt; k - 1) | 1"><pre><span class="pl-s1">decimal</span> |= (<span class="pl-c1">1</span> <span class="pl-c1">&lt;&lt;</span> <span class="pl-s1">k</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span>) <span class="pl-c1">|</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto">The variable <strong>decimal</strong> is now an integer whose binary representation has length 200 and both begins
and ends with 1; i.e., <strong>decimal</strong> is a random (depending on the robustness of <strong>getrandbits</strong>)
odd integer between <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6419e4c20073a492fb859e12e29e24a4.svg"><img alt="$2^{199}$" src="/sj-simmons/crypto/raw/main/svgs/6419e4c20073a492fb859e12e29e24a4.svg" valign="0.0px" width="27.87685064999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8ead495e1e0f713f33e7a75e00656907.svg"><img alt="$2^{200}.$" src="/sj-simmons/crypto/raw/main/svgs/8ead495e1e0f713f33e7a75e00656907.svg" valign="0.0px" width="33.264976799999985pt" height="13.380876299999999pt" style="max-width: 100%;"></a></p>
<p dir="auto">Beyond using the fact that a prime larger than 2 must be odd, there are various other quick ways
to test whether a candidate large, odd integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is <em>likely</em> prime.  These include
<a href="https://en.wikipedia.org/wiki/Fermat_primality_test" rel="nofollow">Fermat's primality test</a> which checks to see
if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> <em>acts like</em> a prime: namely, whether <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7e196034fb79710624494a8bb1d4813b.svg"><img alt="$a^{n-1} = 1 \mod n$" src="/sj-simmons/crypto/raw/main/svgs/7e196034fb79710624494a8bb1d4813b.svg" valign="0.0px" width="122.41226084999998pt" height="13.380876299999999pt" style="max-width: 100%;"></a> for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> equal,
in turn, to say 2, 3, and 5, as would be the case, by Fermat's Little Theorem (see below), if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
were in fact prime.</p>
<p dir="auto">Rather than implement Fermat's and related primality tests yourself to detect whether <strong>decimal</strong> is prime,
feel free to use <a href="https://github.com/sj-simmons/numlib">numlib</a>'s implementation:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import numlib
numlib.isprime(decimal) # True or False according to whether decimal is prime"><pre><span class="pl-k">import</span> <span class="pl-s1">numlib</span>
<span class="pl-s1">numlib</span>.<span class="pl-en">isprime</span>(<span class="pl-s1">decimal</span>) <span class="pl-c"># True or False according to whether decimal is prime</span></pre></div>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-3" class="anchor" aria-hidden="true" href="#exercise-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="4" dir="auto">
<li>Write a function, using the scheme outlined above, that returns a <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit prime. <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Homework.</strong></li>
</ol>
<p dir="auto">At issue is the fact that larger primes are harder to find. The difficulty is gauged by the Prime
Number Theorem.  If we define <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ab6b1f726144febfe19f0c5d987822fa.svg"><img alt="$\pi(n)$" src="/sj-simmons/crypto/raw/main/svgs/ab6b1f726144febfe19f0c5d987822fa.svg" valign="-4.109589000000009px" width="32.61239849999999pt" height="16.438356pt" style="max-width: 100%;"></a> to be the number of primes less than or equal to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, then
the theorem states that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ab6b1f726144febfe19f0c5d987822fa.svg"><img alt="$\pi(n)$" src="/sj-simmons/crypto/raw/main/svgs/ab6b1f726144febfe19f0c5d987822fa.svg" valign="-4.109589000000009px" width="32.61239849999999pt" height="16.438356pt" style="max-width: 100%;"></a> is well-approximated by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9bbe784fa51a44e5989bc0b2cac489c3.svg"><img alt="$n/\ln(n)$" src="/sj-simmons/crypto/raw/main/svgs/9bbe784fa51a44e5989bc0b2cac489c3.svg" valign="-4.109589000000009px" width="57.17672729999999pt" height="16.438356pt" style="max-width: 100%;"></a> in the sense that</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bbbfdbd8c7959c658b17fe94615640ac.svg"><img alt="$$\lim_{n\rightarrow\infty}\pi(n)\cdot\ln(n)/n=1.$$" src="/sj-simmons/crypto/raw/main/svgs/bbbfdbd8c7959c658b17fe94615640ac.svg" valign="0.0px" width="170.7003078pt" height="22.1917806pt" style="max-width: 100%;"></a></p>
<p dir="auto">The Prime Number Theorem implies that the number of primes between <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e1f67948de7f97ecae4757c305597fe.svg"><img alt="$2^{k-1}$" src="/sj-simmons/crypto/raw/main/svgs/2e1f67948de7f97ecae4757c305597fe.svg" valign="0.0px" width="32.31180644999999pt" height="13.95621975pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b26c1428d8122e80fc36d46fdfb1ca57.svg"><img alt="$2^{k}$" src="/sj-simmons/crypto/raw/main/svgs/b26c1428d8122e80fc36d46fdfb1ca57.svg" valign="0.0px" width="15.48523844999999pt" height="13.95621975pt" style="max-width: 100%;"></a>
is approximately</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/edd036110e6fc23acd88a7c88c0f7c4f.svg"><img alt="$$\frac{2^{k}}{\ln(2^{k})}-\frac{2^{k-1}}{\ln(2^{k-1})}=\frac{2^{k-1}}{\ln(2)}\left(\frac{2}{k}-\frac{1}{k-1}\right)=\frac{2^{k-1}}{\ln(2)}\frac{k-2}{k(k-1)};$$" src="/sj-simmons/crypto/raw/main/svgs/edd036110e6fc23acd88a7c88c0f7c4f.svg" valign="0.0px" width="418.69159199999996pt" height="40.6935375pt" style="max-width: 100%;"></a></p>
<p dir="auto">hence, the probability <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> of a uniformly drawn number between <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e1f67948de7f97ecae4757c305597fe.svg"><img alt="$2^{k-1}$" src="/sj-simmons/crypto/raw/main/svgs/2e1f67948de7f97ecae4757c305597fe.svg" valign="0.0px" width="32.31180644999999pt" height="13.95621975pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b26c1428d8122e80fc36d46fdfb1ca57.svg"><img alt="$2^{k}$" src="/sj-simmons/crypto/raw/main/svgs/b26c1428d8122e80fc36d46fdfb1ca57.svg" valign="0.0px" width="15.48523844999999pt" height="13.95621975pt" style="max-width: 100%;"></a> being
prime is approximately <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ba4fb647bc16756d617d1280f33496f1.svg"><img alt="$p = (k-2)/(\ln(2)k(k-1))$" src="/sj-simmons/crypto/raw/main/svgs/ba4fb647bc16756d617d1280f33496f1.svg" valign="-4.109589000000009px" width="195.31391055pt" height="16.438356pt" style="max-width: 100%;"></a> which, for large <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/902e83fb24d54487d5ceebd041639ffb.svg"><img alt="$k,$" src="/sj-simmons/crypto/raw/main/svgs/902e83fb24d54487d5ceebd041639ffb.svg" valign="-3.1963503000000055px" width="13.64158619999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> becomes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/da7229fb613ee83e3c176de402c7d29d.svg"><img alt="$p \approx 1/(\ln(2)k).$" src="/sj-simmons/crypto/raw/main/svgs/da7229fb613ee83e3c176de402c7d29d.svg" valign="-4.109589000000009px" width="107.75695094999999pt" height="16.438356pt" style="max-width: 100%;"></a>
But since your program from the last exercise doesn't bother with even numbers, a given candidate <strong>decimal</strong>
has a likelihood of about <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e555980e9b695645e92caf5d9af89aa7.svg"><img alt="$p = 2/(\ln(2)k)$" src="/sj-simmons/crypto/raw/main/svgs/e555980e9b695645e92caf5d9af89aa7.svg" valign="-4.109589000000009px" width="103.19072609999999pt" height="16.438356pt" style="max-width: 100%;"></a> of being prime.
It is an basic fact from probability theory (see e.g., section 2.1 of
<a href="https://github.com/sj-simmons/probthry/blob/main/primer.pdf">Simmons' primer on random variables</a>) that,
on average, one expects to test about <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6c97d8dd61ac519e745292cae1789830.svg"><img alt="$1/p=k\ln(2)/2$" src="/sj-simmons/crypto/raw/main/svgs/6c97d8dd61ac519e745292cae1789830.svg" valign="-4.109589000000009px" width="109.5833706pt" height="16.438356pt" style="max-width: 100%;"></a> numbers before turning up one that is
indeed prime.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-4" class="anchor" aria-hidden="true" href="#exercise-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="5" dir="auto">
<li>Write a program that verifies that the expected number of tries before your prime generating function returns a 200-bit prime is about <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9e6f25ea02c1b59eff12628ea34c16eb.svg"><img alt="$200\ln(2)/2\approx 69.$" src="/sj-simmons/crypto/raw/main/svgs/9e6f25ea02c1b59eff12628ea34c16eb.svg" valign="-4.109589000000009px" width="121.46129489999998pt" height="16.438356pt" style="max-width: 100%;"></a> <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Nargiss posted this.</strong></li>
</ol>
<p dir="auto">Note: since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> is small, the variance here is very large so that the time it takes for your
program to find a single prime can vary greatly; said variance is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/07b12faa29e1cf6d90eece6f9c72b99f.svg"><img alt="$(1-p)/p^2 \approx 4735.2$" src="/sj-simmons/crypto/raw/main/svgs/07b12faa29e1cf6d90eece6f9c72b99f.svg" valign="-4.109589000000009px" width="140.81053799999998pt" height="17.4904653pt" style="max-width: 100%;"></a> so that
the standard deviation of the number of tries before finding a 200 bit prime is about <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6ce6d2d54a6388aaebd027e35aebb86b.svg"><img alt="$68.8.$" src="/sj-simmons/crypto/raw/main/svgs/6ce6d2d54a6388aaebd027e35aebb86b.svg" valign="0.0px" width="33.79007609999999pt" height="10.5936072pt" style="max-width: 100%;"></a> (The
standard deviation is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44ca9338a2247d7391f898c6588a020d.svg"><img alt="$\sqrt{(1-p)/p^2},$" src="/sj-simmons/crypto/raw/main/svgs/44ca9338a2247d7391f898c6588a020d.svg" valign="-5.013835199999992px" width="94.23517949999999pt" height="19.726228499999998pt" style="max-width: 100%;"></a> which is approximately <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b6bd4fb45663b60f83a799556b0eeffb.svg"><img alt="$1/p$" src="/sj-simmons/crypto/raw/main/svgs/b6bd4fb45663b60f83a799556b0eeffb.svg" valign="-4.109589000000009px" width="24.70898594999999pt" height="16.438356pt" style="max-width: 100%;"></a> for small <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c984e348f5a9e47e87ef86e2ed395d6c.svg"><img alt="$p.)$" src="/sj-simmons/crypto/raw/main/svgs/c984e348f5a9e47e87ef86e2ed395d6c.svg" valign="-4.109589000000009px" width="19.22950754999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-4" class="anchor" aria-hidden="true" href="#exercises-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol start="6" dir="auto">
<li>Estimate the probability that two uniformly chosen <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit primes are equal. <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>In class.</strong></li>
<li>What is the expected number of tries and the associated standard deviation when finding a 2048-bit
prime. <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>In class.</strong></li>
<li>(Optional) Write a program that displays the sampling distribution for the number of tries before finding a prime using the method outlined above. The mean and standard deviation should both be about <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bc2aede8e8ec573d7068e3c67fedf605.svg"><img alt="$69.$" src="/sj-simmons/crypto/raw/main/svgs/bc2aede8e8ec573d7068e3c67fedf605.svg" valign="0.0px" width="21.00464354999999pt" height="10.5936072pt" style="max-width: 100%;"></a></li>
</ol>
<h3 tabindex="-1" dir="auto"><a id="user-content-eulers-totient-function" class="anchor" aria-hidden="true" href="#eulers-totient-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Euler's totient function</h3>
<p dir="auto">The following is a basic result in elementary number theory.</p>
<p dir="auto"><strong>Fermat's Little Theorem</strong>:  If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> is a prime and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is an integer not divisible by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a>, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e621949487c8c972e5637f0848ac82e.svg"><img alt="$a^{p-1} \equiv 1 \mod p$" src="/sj-simmons/crypto/raw/main/svgs/2e621949487c8c972e5637f0848ac82e.svg" valign="-3.1963503000000086px" width="119.46638879999998pt" height="16.5772266pt" style="max-width: 100%;"></a>.</p>
<p dir="auto">For those who know some group theory this follows immediately from the fact that the order of
any element of a finite group must divide the order of the group. Here, the relevant group is
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d4a5869404cba9f337568cf3e5f6817.svg"><img alt="$(\mathbb{Z}/p\mathbb{Z})^*,$" src="/sj-simmons/crypto/raw/main/svgs/2d4a5869404cba9f337568cf3e5f6817.svg" valign="-4.109589000000009px" width="63.31640369999999pt" height="16.438356pt" style="max-width: 100%;"></a> the multiplicative group of units in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4eb71a5f1d780863eb3bf3c2cf2c59d0.svg"><img alt="$\mathbb{Z}/p\mathbb{Z},$" src="/sj-simmons/crypto/raw/main/svgs/4eb71a5f1d780863eb3bf3c2cf2c59d0.svg" valign="-4.109589000000009px" width="42.973882049999986pt" height="16.438356pt" style="max-width: 100%;"></a>
which has order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad55de588e0025342173e657988d28d.svg"><img alt="$p-1.$" src="/sj-simmons/crypto/raw/main/svgs/2ad55de588e0025342173e657988d28d.svg" valign="-3.196350299999994px" width="41.14719179999999pt" height="13.789957499999998pt" style="max-width: 100%;"></a></p>
<p dir="auto">If you are not familiar with basic group theory, then see for example
<a href="https://en.wikipedia.org/wiki/Proofs_of_Fermat%27s_little_theorem" rel="nofollow">this wikipedia page</a>
for other proofs of Fermat's Little Theorem.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-5" class="anchor" aria-hidden="true" href="#exercise-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="9" dir="auto">
<li>Use your program above to generate a 200-bit prime <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and then verify that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e621949487c8c972e5637f0848ac82e.svg"><img alt="$a^{p-1} \equiv 1 \mod p$" src="/sj-simmons/crypto/raw/main/svgs/2e621949487c8c972e5637f0848ac82e.svg" valign="-3.1963503000000086px" width="119.46638879999998pt" height="16.5772266pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is, say, 1234567, or any positive integer less than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a>. Note: you may wish to use Python's built-in <a href="https://docs.python.org/3/library/functions.html#pow" rel="nofollow">pow() function</a>.</li>
</ol>
<p dir="auto">Below we will need the following generalization of Fermat's Little Theorem.</p>
<p dir="auto"><strong>Euler's Theorem</strong>:  If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is positive integer and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is an integer relatively prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>,
then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/88f651bf1424bb07d157e024ce66e75f.svg"><img alt="$a^{\phi(n)} \equiv 1 \mod n.$" src="/sj-simmons/crypto/raw/main/svgs/88f651bf1424bb07d157e024ce66e75f.svg" valign="0.0px" width="128.3300799pt" height="14.5954875pt" style="max-width: 100%;"></a></p>
<p dir="auto">Here <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg"><img alt="$\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg" valign="-4.109589000000009px" width="32.44685399999999pt" height="16.438356pt" style="max-width: 100%;"></a> is Euler's totient function which returns the number of positive integers less than
and relatively prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg"><img alt="$n.$" src="/sj-simmons/crypto/raw/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">Notice that Euler's Theorem specializes to Fermat's Little Theorem if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is prime since, then,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1b0d94292d544c37a22b1f0f7f9a7b13.svg"><img alt="$\phi(n)=n-1.$" src="/sj-simmons/crypto/raw/main/svgs/1b0d94292d544c37a22b1f0f7f9a7b13.svg" valign="-4.109589000000009px" width="97.10798459999998pt" height="16.438356pt" style="max-width: 100%;"></a>  Moreover, Euler's Theorem also follows from basic group theory where the ambient
group is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3864234dcb7744587a117c9e1a7290ea.svg"><img alt="$(\mathbb{Z}/n\mathbb{Z})^*$" src="/sj-simmons/crypto/raw/main/svgs/3864234dcb7744587a117c9e1a7290ea.svg" valign="-4.109589000000009px" width="59.52459479999999pt" height="16.438356pt" style="max-width: 100%;"></a>, the multiplicative group of units in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/94d333ba0aaa5e9c8ce88690986075c2.svg"><img alt="$\mathbb{Z}/n\mathbb{Z}$" src="/sj-simmons/crypto/raw/main/svgs/94d333ba0aaa5e9c8ce88690986075c2.svg" valign="-4.109589000000009px" width="40.00396784999999pt" height="16.438356pt" style="max-width: 100%;"></a>,
which has order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4b539e947954886e594105a91f42f29b.svg"><img alt="$\phi(n).$" src="/sj-simmons/crypto/raw/main/svgs/4b539e947954886e594105a91f42f29b.svg" valign="-4.109589000000009px" width="37.01307719999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">An <em>arithmetic</em> (i.e., defined on positive integers) function <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/190083ef7a1625fbc75f243cffb9c96d.svg"><img alt="$f$" src="/sj-simmons/crypto/raw/main/svgs/190083ef7a1625fbc75f243cffb9c96d.svg" valign="-3.1963503000000055px" width="9.81741584999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a>  is <em>multiplicative</em>
if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4397377cf2d4936bc7c8e91b31aa8d24.svg"><img alt="$f(mn)=f(m)f(n)$" src="/sj-simmons/crypto/raw/main/svgs/4397377cf2d4936bc7c8e91b31aa8d24.svg" valign="-4.109589000000009px" width="138.3261231pt" height="16.438356pt" style="max-width: 100%;"></a> whenever <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> are relatively prime. For instance, Euler's totient function,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg"><img alt="$\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg" valign="-4.109589000000009px" width="32.44685399999999pt" height="16.438356pt" style="max-width: 100%;"></a>, is multiplicative — a fact that we will fairly easily establish using, yet again,
elementary group theory.</p>
<p dir="auto">We noted above that the order of an element of a finite group necessarily divides the order of the
group.  For cyclic groups, the situation is particularly nice.  Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> be a cyclic group of order
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> (feel free to think of the additive group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4ee8f29e8fc6ff907c10277ad56123ba.svg"><img alt="$\mathbb{Z}/n,$" src="/sj-simmons/crypto/raw/main/svgs/4ee8f29e8fc6ff907c10277ad56123ba.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a> to which <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> is necessarily isomorphic).
Let us show that for any divisor <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg"><img alt="$\ell$" src="/sj-simmons/crypto/raw/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg" valign="0.0px" width="6.849367799999992pt" height="11.4155283pt" style="max-width: 100%;"></a> of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, there are precisely <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5f5759f7d5f03fa367a510e38faa9564.svg"><img alt="$\phi(\ell)$" src="/sj-simmons/crypto/raw/main/svgs/5f5759f7d5f03fa367a510e38faa9564.svg" valign="-4.109589000000009px" width="29.429343899999992pt" height="16.438356pt" style="max-width: 100%;"></a> elements of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> with
order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fb1f7152c7b8bdf9af1fe835ef63d16f.svg"><img alt="$\ell.$" src="/sj-simmons/crypto/raw/main/svgs/fb1f7152c7b8bdf9af1fe835ef63d16f.svg" valign="0.0px" width="11.41559099999999pt" height="11.4155283pt" style="max-width: 100%;"></a></p>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg"><img alt="$g$" src="/sj-simmons/crypto/raw/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg" valign="-3.1963502999999895px" width="8.430376349999989pt" height="10.2739725pt" style="max-width: 100%;"></a> is a generator for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> then, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1c2ad7b226d405075b7e0ddc1c06d4fc.svg"><img alt="$g^{n/\ell}$" src="/sj-simmons/crypto/raw/main/svgs/1c2ad7b226d405075b7e0ddc1c06d4fc.svg" valign="-3.1963502999999966px" width="28.793918999999992pt" height="17.7918378pt" style="max-width: 100%;"></a> must have order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fb1f7152c7b8bdf9af1fe835ef63d16f.svg"><img alt="$\ell.$" src="/sj-simmons/crypto/raw/main/svgs/fb1f7152c7b8bdf9af1fe835ef63d16f.svg" valign="0.0px" width="11.41559099999999pt" height="11.4155283pt" style="max-width: 100%;"></a>  So that's
one element of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fb1f7152c7b8bdf9af1fe835ef63d16f.svg"><img alt="$\ell.$" src="/sj-simmons/crypto/raw/main/svgs/fb1f7152c7b8bdf9af1fe835ef63d16f.svg" valign="0.0px" width="11.41559099999999pt" height="11.4155283pt" style="max-width: 100%;"></a>  To get all elements of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg"><img alt="$\ell$" src="/sj-simmons/crypto/raw/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg" valign="0.0px" width="6.849367799999992pt" height="11.4155283pt" style="max-width: 100%;"></a>, consider elements of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> of the
form <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a4e92cbcb8062164d549fb5be7c4486c.svg"><img alt="$g^{jn/\ell}$" src="/sj-simmons/crypto/raw/main/svgs/a4e92cbcb8062164d549fb5be7c4486c.svg" valign="-3.1963502999999966px" width="34.89840749999999pt" height="17.7918378pt" style="max-width: 100%;"></a> for positive integers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e3f1da1aaacd6a674d0b71c67336cc8b.svg"><img alt="$j.$" src="/sj-simmons/crypto/raw/main/svgs/e3f1da1aaacd6a674d0b71c67336cc8b.svg" valign="-3.1963519500000044px" width="11.363396549999988pt" height="14.0378568pt" style="max-width: 100%;"></a> Plainly, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b54ba8b3a68a276df50a9245327894d7.svg"><img alt="$(g^{jn/\ell})^\ell=g^{jn}=(g^n)^j=e_G^j=e_G$" src="/sj-simmons/crypto/raw/main/svgs/b54ba8b3a68a276df50a9245327894d7.svg" valign="-4.830949199999992px" width="239.67260624999997pt" height="20.3445957pt" style="max-width: 100%;"></a>
where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9429b25a05247d478d2bc0dd5dd8c5fb.svg"><img alt="$e_G$" src="/sj-simmons/crypto/raw/main/svgs/9429b25a05247d478d2bc0dd5dd8c5fb.svg" valign="-2.4657286499999893px" width="17.88863174999999pt" height="9.54335085pt" style="max-width: 100%;"></a> is the identity element in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg"><img alt="$G.$" src="/sj-simmons/crypto/raw/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg" valign="0.0px" width="17.49086789999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> But, in general, the order of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a4e92cbcb8062164d549fb5be7c4486c.svg"><img alt="$g^{jn/\ell}$" src="/sj-simmons/crypto/raw/main/svgs/a4e92cbcb8062164d549fb5be7c4486c.svg" valign="-3.1963502999999966px" width="34.89840749999999pt" height="17.7918378pt" style="max-width: 100%;"></a> could be less
than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg"><img alt="$\ell$" src="/sj-simmons/crypto/raw/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg" valign="0.0px" width="6.849367799999992pt" height="11.4155283pt" style="max-width: 100%;"></a>.  That happens precisely when <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f90975402559b778ebd2536d9db864e5.svg"><img alt="$\gcd(j,\ell)=d&gt;1$" src="/sj-simmons/crypto/raw/main/svgs/f90975402559b778ebd2536d9db864e5.svg" valign="-4.109589000000009px" width="119.00587544999998pt" height="16.438356pt" style="max-width: 100%;"></a> since, then,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0f219bd42b33f2290d50e54b162229a1.svg"><img alt="$(g^{jn/\ell})^{\ell/d}=g^{jn/d}=(g^n)^{j/d}=e_G^{j/d}=e_G$" src="/sj-simmons/crypto/raw/main/svgs/0f219bd42b33f2290d50e54b162229a1.svg" valign="-4.8309492000000045px" width="289.8555957pt" height="21.99987075pt" style="max-width: 100%;"></a> so that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a4e92cbcb8062164d549fb5be7c4486c.svg"><img alt="$g^{jn/\ell}$" src="/sj-simmons/crypto/raw/main/svgs/a4e92cbcb8062164d549fb5be7c4486c.svg" valign="-3.1963502999999966px" width="34.89840749999999pt" height="17.7918378pt" style="max-width: 100%;"></a> has order dividing <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5fc195293a644038cf8e808d8c142036.svg"><img alt="$\ell/d.$" src="/sj-simmons/crypto/raw/main/svgs/5fc195293a644038cf8e808d8c142036.svg" valign="-4.109589000000009px" width="28.19076479999999pt" height="16.438356pt" style="max-width: 100%;"></a>
Hence, there are exactly <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5f5759f7d5f03fa367a510e38faa9564.svg"><img alt="$\phi(\ell)$" src="/sj-simmons/crypto/raw/main/svgs/5f5759f7d5f03fa367a510e38faa9564.svg" valign="-4.109589000000009px" width="29.429343899999992pt" height="16.438356pt" style="max-width: 100%;"></a> elements of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/78880a93871995159c9b84e1adcb28c4.svg"><img alt="$\ell;$" src="/sj-simmons/crypto/raw/main/svgs/78880a93871995159c9b84e1adcb28c4.svg" valign="-3.1963503000000055px" width="11.41559099999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> namely, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a4e92cbcb8062164d549fb5be7c4486c.svg"><img alt="$g^{jn/\ell}$" src="/sj-simmons/crypto/raw/main/svgs/a4e92cbcb8062164d549fb5be7c4486c.svg" valign="-3.1963502999999966px" width="34.89840749999999pt" height="17.7918378pt" style="max-width: 100%;"></a> where
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/72e89b1806f48ed2f77b94acec8cfcb6.svg"><img alt="$1\le j&lt; d$" src="/sj-simmons/crypto/raw/main/svgs/72e89b1806f48ed2f77b94acec8cfcb6.svg" valign="-3.1963503000000055px" width="68.32085204999998pt" height="14.611878599999999pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/10849dc45db1c776493beeca9d8ef751.svg"><img alt="$\gcd(j,\ell)=1.$" src="/sj-simmons/crypto/raw/main/svgs/10849dc45db1c776493beeca9d8ef751.svg" valign="-4.109589000000009px" width="93.09850439999998pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Applying the proceeding discussion in a special case: notice that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> has <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg"><img alt="$\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg" valign="-4.109589000000009px" width="32.44685399999999pt" height="16.438356pt" style="max-width: 100%;"></a>
generators; namely, the elements <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/36b5afebdba34564d884d347484ac0c7.svg"><img alt="$j$" src="/sj-simmons/crypto/raw/main/svgs/36b5afebdba34564d884d347484ac0c7.svg" valign="-3.1963519500000044px" width="7.710416999999989pt" height="14.0378568pt" style="max-width: 100%;"></a> that are relatively prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> as integers.</p>
<p dir="auto">Let us also note down that if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg"><img alt="$g$" src="/sj-simmons/crypto/raw/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg" valign="-3.1963502999999895px" width="8.430376349999989pt" height="10.2739725pt" style="max-width: 100%;"></a> is a generator of a group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is an integer
satisfying <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/507a9feb099894d3e45b0a0a75963a4f.svg"><img alt="$g^m=e_G,$" src="/sj-simmons/crypto/raw/main/svgs/507a9feb099894d3e45b0a0a75963a4f.svg" valign="-3.1963519500000044px" width="66.11152514999999pt" height="14.116037099999998pt" style="max-width: 100%;"></a> then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> necessarily divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>. To see this, first recall that, by the
definition of <em>order</em>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is the <em>least</em> positive integer satisfying <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ec144d80e243cbf773dc26098d90cf9c.svg"><img alt="$g^n=e_G.$" src="/sj-simmons/crypto/raw/main/svgs/ec144d80e243cbf773dc26098d90cf9c.svg" valign="-3.1963519500000044px" width="62.572697549999994pt" height="14.116037099999998pt" style="max-width: 100%;"></a> Then use the
division algorithm to write <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/98575f149192ef4cf4f39fc8ef815d77.svg"><img alt="$m=qn+r$" src="/sj-simmons/crypto/raw/main/svgs/98575f149192ef4cf4f39fc8ef815d77.svg" valign="-3.19635195px" width="82.10984099999999pt" height="12.785402849999999pt" style="max-width: 100%;"></a> for some integers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg"><img alt="$r$" src="/sj-simmons/crypto/raw/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg" valign="0.0px" width="7.87295519999999pt" height="7.0776222pt" style="max-width: 100%;"></a> with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7633545dac4328a6866b724e6564d331.svg"><img alt="$0\le r &lt; n$" src="/sj-simmons/crypto/raw/main/svgs/7633545dac4328a6866b724e6564d331.svg" valign="-2.2351411499999947px" width="69.79430204999998pt" height="12.82874835pt" style="max-width: 100%;"></a>. We have
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7d9dfa709c06b120aec786840f32f1d6.svg"><img alt="$e_G=g^m=g^{qn+r}=(g^n)^qg^r = g^r.$" src="/sj-simmons/crypto/raw/main/svgs/7d9dfa709c06b120aec786840f32f1d6.svg" valign="-4.109589000000009px" width="241.07211149999998pt" height="17.1982437pt" style="max-width: 100%;"></a> If follows immediately that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1b0129678603dff06573a74c88866a5a.svg"><img alt="$r=0$" src="/sj-simmons/crypto/raw/main/svgs/1b0129678603dff06573a74c88866a5a.svg" valign="0.0px" width="38.009795999999994pt" height="10.5936072pt" style="max-width: 100%;"></a> since otherwise <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg"><img alt="$r$" src="/sj-simmons/crypto/raw/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg" valign="0.0px" width="7.87295519999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is
a positive integer less than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> satisfying <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c39926d74ccdf01b9e002e44b76fc6bc.svg"><img alt="$g^r=e_G.$" src="/sj-simmons/crypto/raw/main/svgs/c39926d74ccdf01b9e002e44b76fc6bc.svg" valign="-3.1963519500000044px" width="60.90408059999998pt" height="14.116037099999998pt" style="max-width: 100%;"></a></p>
<p dir="auto">Now, to see that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f50853d41be7d55874e952eb0d80c53e.svg"><img alt="$\phi$" src="/sj-simmons/crypto/raw/main/svgs/f50853d41be7d55874e952eb0d80c53e.svg" valign="-3.1963503000000055px" width="9.794543549999991pt" height="14.611878599999999pt" style="max-width: 100%;"></a> is multiplicative, let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7b9a0316a2fcd7f01cfd556eedf72e96.svg"><img alt="$H$" src="/sj-simmons/crypto/raw/main/svgs/7b9a0316a2fcd7f01cfd556eedf72e96.svg" valign="0.0px" width="14.99998994999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> be cyclic groups of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>
and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, respectively, and let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg"><img alt="$g$" src="/sj-simmons/crypto/raw/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg" valign="-3.1963502999999895px" width="8.430376349999989pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad9d098b937e46f9f58968551adac57.svg"><img alt="$h$" src="/sj-simmons/crypto/raw/main/svgs/2ad9d098b937e46f9f58968551adac57.svg" valign="0.0px" width="9.47111549999999pt" height="11.4155283pt" style="max-width: 100%;"></a> be, respectively, generators for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7b9a0316a2fcd7f01cfd556eedf72e96.svg"><img alt="$H$" src="/sj-simmons/crypto/raw/main/svgs/7b9a0316a2fcd7f01cfd556eedf72e96.svg" valign="0.0px" width="14.99998994999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>. Consider
the product <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bb6a5c9aca14cc04df52dc2b0175f8f3.svg"><img alt="$G\times H$" src="/sj-simmons/crypto/raw/main/svgs/bb6a5c9aca14cc04df52dc2b0175f8f3.svg" valign="-1.369874549999991px" width="48.01582499999999pt" height="12.6027363pt" style="max-width: 100%;"></a>.  We claim that, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> are relatively prime, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bb6a5c9aca14cc04df52dc2b0175f8f3.svg"><img alt="$G\times H$" src="/sj-simmons/crypto/raw/main/svgs/bb6a5c9aca14cc04df52dc2b0175f8f3.svg" valign="-1.369874549999991px" width="48.01582499999999pt" height="12.6027363pt" style="max-width: 100%;"></a> is a
cyclic group of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/57b4da86b04bbeb1e8cacc81bc6cf95c.svg"><img alt="$mn.$" src="/sj-simmons/crypto/raw/main/svgs/57b4da86b04bbeb1e8cacc81bc6cf95c.svg" valign="0.0px" width="28.86620054999999pt" height="7.0776222pt" style="max-width: 100%;"></a> Note that</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bdb157e24bb85127e8b81bbbebe2095a.svg"><img alt="$$(g,h)^{mn}=(g^{mn},h^{mn})=((g^m)^n,(h^n)^m)=(e_G, e_H)=e_{G\times H}.$$" src="/sj-simmons/crypto/raw/main/svgs/bdb157e24bb85127e8b81bbbebe2095a.svg" valign="0.0px" width="436.04847329999996pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Hence, whatever the order of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aac259452e7e6c3323a67127751b0420.svg"><img alt="$(g,h)$" src="/sj-simmons/crypto/raw/main/svgs/aac259452e7e6c3323a67127751b0420.svg" valign="-4.109589000000009px" width="37.99278944999999pt" height="16.438356pt" style="max-width: 100%;"></a>, call it <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>, we must have that it divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/57b4da86b04bbeb1e8cacc81bc6cf95c.svg"><img alt="$mn.$" src="/sj-simmons/crypto/raw/main/svgs/57b4da86b04bbeb1e8cacc81bc6cf95c.svg" valign="0.0px" width="28.86620054999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
To prove our claim, we must show that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e482c73e1741b27cd59b521c3f47e0b1.svg"><img alt="$mn$" src="/sj-simmons/crypto/raw/main/svgs/e482c73e1741b27cd59b521c3f47e0b1.svg" valign="0.0px" width="24.29997734999999pt" height="7.0776222pt" style="max-width: 100%;"></a> divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>, so that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9da8276d1af83f61442b78e3e88a8e42.svg"><img alt="$k=mn.$" src="/sj-simmons/crypto/raw/main/svgs/9da8276d1af83f61442b78e3e88a8e42.svg" valign="0.0px" width="59.85919334999999pt" height="11.4155283pt" style="max-width: 100%;"></a>
Looking at just the first component of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aaeed85b89084dd8b856a4631124a5d6.svg"><img alt="$(g^k,h^k)=(g,h)^k=e_{G\times H}=(e_G,e_H)$" src="/sj-simmons/crypto/raw/main/svgs/aaeed85b89084dd8b856a4631124a5d6.svg" valign="-4.109588999999991px" width="265.5570373499999pt" height="18.06580875pt" style="max-width: 100%;"></a>, we see that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>
divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>; similarly, looking at only the second component, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>. But then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e482c73e1741b27cd59b521c3f47e0b1.svg"><img alt="$mn$" src="/sj-simmons/crypto/raw/main/svgs/e482c73e1741b27cd59b521c3f47e0b1.svg" valign="0.0px" width="24.29997734999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
must divide <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a> since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> are relatively prime.</p>
<p dir="auto">Finally, we show that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f50853d41be7d55874e952eb0d80c53e.svg"><img alt="$\phi$" src="/sj-simmons/crypto/raw/main/svgs/f50853d41be7d55874e952eb0d80c53e.svg" valign="-3.1963503000000055px" width="9.794543549999991pt" height="14.611878599999999pt" style="max-width: 100%;"></a> is multiplicative.</p>
<p dir="auto"><strong>Proof that Euler's totient function is multiplicative</strong>. Under our assumtions, the product group
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bb6a5c9aca14cc04df52dc2b0175f8f3.svg"><img alt="$G\times H$" src="/sj-simmons/crypto/raw/main/svgs/bb6a5c9aca14cc04df52dc2b0175f8f3.svg" valign="-1.369874549999991px" width="48.01582499999999pt" height="12.6027363pt" style="max-width: 100%;"></a> has order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/57b4da86b04bbeb1e8cacc81bc6cf95c.svg"><img alt="$mn.$" src="/sj-simmons/crypto/raw/main/svgs/57b4da86b04bbeb1e8cacc81bc6cf95c.svg" valign="0.0px" width="28.86620054999999pt" height="7.0776222pt" style="max-width: 100%;"></a>  It's also cyclic (since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> are relatively prime). Therefore,
the number of generators of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bb6a5c9aca14cc04df52dc2b0175f8f3.svg"><img alt="$G\times H$" src="/sj-simmons/crypto/raw/main/svgs/bb6a5c9aca14cc04df52dc2b0175f8f3.svg" valign="-1.369874549999991px" width="48.01582499999999pt" height="12.6027363pt" style="max-width: 100%;"></a> is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ce057debe3a7c04d3a5694e05225ad6a.svg"><img alt="$\phi(mn)$" src="/sj-simmons/crypto/raw/main/svgs/ce057debe3a7c04d3a5694e05225ad6a.svg" valign="-4.109589000000009px" width="46.87995344999998pt" height="16.438356pt" style="max-width: 100%;"></a>.  On the other hand, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aac259452e7e6c3323a67127751b0420.svg"><img alt="$(g,h)$" src="/sj-simmons/crypto/raw/main/svgs/aac259452e7e6c3323a67127751b0420.svg" valign="-4.109589000000009px" width="37.99278944999999pt" height="16.438356pt" style="max-width: 100%;"></a> is a generator
if and only if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg"><img alt="$g$" src="/sj-simmons/crypto/raw/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg" valign="-3.1963502999999895px" width="8.430376349999989pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad9d098b937e46f9f58968551adac57.svg"><img alt="$h$" src="/sj-simmons/crypto/raw/main/svgs/2ad9d098b937e46f9f58968551adac57.svg" valign="0.0px" width="9.47111549999999pt" height="11.4155283pt" style="max-width: 100%;"></a> generate, respectively, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7b9a0316a2fcd7f01cfd556eedf72e96.svg"><img alt="$H$" src="/sj-simmons/crypto/raw/main/svgs/7b9a0316a2fcd7f01cfd556eedf72e96.svg" valign="0.0px" width="14.99998994999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>.  But <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> has <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/432970ec6ad24aeb09c0b9dfd3953475.svg"><img alt="$\phi(m)$" src="/sj-simmons/crypto/raw/main/svgs/432970ec6ad24aeb09c0b9dfd3953475.svg" valign="-4.109589000000009px" width="37.01307719999999pt" height="16.438356pt" style="max-width: 100%;"></a> generators
and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7b9a0316a2fcd7f01cfd556eedf72e96.svg"><img alt="$H$" src="/sj-simmons/crypto/raw/main/svgs/7b9a0316a2fcd7f01cfd556eedf72e96.svg" valign="0.0px" width="14.99998994999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> has <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg"><img alt="$\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg" valign="-4.109589000000009px" width="32.44685399999999pt" height="16.438356pt" style="max-width: 100%;"></a>, so that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/38ce0d967ffd76c9dcbf729606c963a8.svg"><img alt="$\phi(mn)=\phi(m)\phi(n).$" src="/sj-simmons/crypto/raw/main/svgs/38ce0d967ffd76c9dcbf729606c963a8.svg" valign="-4.109589000000009px" width="142.82373929999997pt" height="16.438356pt" style="max-width: 100%;"></a> <g-emoji class="g-emoji" alias="black_medium_square" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/25fc.png">◼️</g-emoji></p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-5" class="anchor" aria-hidden="true" href="#exercises-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol start="10" dir="auto">
<li>
<p dir="auto">Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/621b951cef42642ea5a952eb172401e6.svg"><img alt="$n=p_1p_2\cdots p_n$" src="/sj-simmons/crypto/raw/main/svgs/621b951cef42642ea5a952eb172401e6.svg" valign="-3.1963503000000086px" width="104.12845904999998pt" height="10.502306099999998pt" style="max-width: 100%;"></a> be a product of distinct primes. Show that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c0b068721938ed3edf5374996d6cfb6c.svg"><img alt="$\phi(n)=\prod_{i=1}^n (p_i-1).$" src="/sj-simmons/crypto/raw/main/svgs/c0b068721938ed3edf5374996d6cfb6c.svg" valign="-4.931582700000004px" width="151.41177479999996pt" height="18.150897599999997pt" style="max-width: 100%;"></a></p>
</li>
<li>
<p dir="auto">Show that for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> prime and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> a positive integer, we have <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/de6109f10acb98d33d39ffb55390c8e9.svg"><img alt="$\phi(p^e)=p^{e-1}(p-1).$" src="/sj-simmons/crypto/raw/main/svgs/de6109f10acb98d33d39ffb55390c8e9.svg" valign="-4.109589000000009px" width="145.91553734999997pt" height="17.4904653pt" style="max-width: 100%;"></a> Hint: this is just a counting argument. Which positive integers less than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/45ac76e91416ad4fa83cd4d2462dea7a.svg"><img alt="$p^e$" src="/sj-simmons/crypto/raw/main/svgs/45ac76e91416ad4fa83cd4d2462dea7a.svg" valign="-3.1963519500000044px" width="14.50748474999999pt" height="14.116037099999998pt" style="max-width: 100%;"></a> are <em>not</em> relatively prime with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f367873a30f9b543e23cbaa538dfae4e.svg"><img alt="$p?$" src="/sj-simmons/crypto/raw/main/svgs/f367873a30f9b543e23cbaa538dfae4e.svg" valign="-3.1963503000000055px" width="16.03315724999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a></p>
</li>
</ol>
<p dir="auto">By the Fundamental Theorem of Arithmetic, any positive integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/358039a361da9e2940dba6fc766af1c4.svg"><img alt="$n&gt;1$" src="/sj-simmons/crypto/raw/main/svgs/358039a361da9e2940dba6fc766af1c4.svg" valign="-0.6427030499999951px" width="40.00371704999999pt" height="11.23631025pt" style="max-width: 100%;"></a> can be
written (uniquely, up to order) as a product of (positive powers of) distinct primes:
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6b7fd072681d124353c6692834a613f8.svg"><img alt="$n=p_1^{e_1}p_2^{e_2}\cdots p_k^{e_k}$" src="/sj-simmons/crypto/raw/main/svgs/6b7fd072681d124353c6692834a613f8.svg" valign="-4.958771399999998px" width="120.80351909999999pt" height="17.3194725pt" style="max-width: 100%;"></a>;  hence,</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d32849a7a1079a07ee6a67cee3781726.svg"><img alt="$$\phi(n)=\phi\left(\prod_{i=1}^k p_i^{e_i}\right)=\prod_{i=1}^k \phi\left(p_i^{e_i}\right)=\prod_{i=1}^k p_i^{e_i-1}(p_i-1).$$" src="/sj-simmons/crypto/raw/main/svgs/d32849a7a1079a07ee6a67cee3781726.svg" valign="0.0px" width="372.0267177pt" height="49.315569599999996pt" style="max-width: 100%;"></a></p>
<p dir="auto">While showing, above, that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f50853d41be7d55874e952eb0d80c53e.svg"><img alt="$\phi$" src="/sj-simmons/crypto/raw/main/svgs/f50853d41be7d55874e952eb0d80c53e.svg" valign="-3.1963503000000055px" width="9.794543549999991pt" height="14.611878599999999pt" style="max-width: 100%;"></a> is multiplicative, we proved:</p>
<p dir="auto"><strong>Proposition</strong>. If positive integers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> are relatively prime, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e80f294d6d2150aae9a2d709807e5e0f.svg"><img alt="$\mathbb{Z}/mn\cong \mathbb{Z}/n\times\mathbb{Z}/m$" src="/sj-simmons/crypto/raw/main/svgs/e80f294d6d2150aae9a2d709807e5e0f.svg" valign="-4.109589000000009px" width="148.14322049999998pt" height="16.438356pt" style="max-width: 100%;"></a> as rings. Moreover, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d75a1fe265e71b8fbd39154cab485d7e.svg"><img alt="$(\mathbb{Z}/mn)^* \cong (\mathbb{Z}/n)^* \times (\mathbb{Z}/m)^*$" src="/sj-simmons/crypto/raw/main/svgs/d75a1fe265e71b8fbd39154cab485d7e.svg" valign="-4.109589000000009px" width="208.3488924pt" height="16.438356pt" style="max-width: 100%;"></a>
as multiplicative groups.</p>
<p dir="auto"><strong>Proof</strong>. Arguing as above, except additively, the map <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/995d140a6fe30225897e70143a750cd6.svg"><img alt="$x \mapsto (x \mod m, x \mod n)$" src="/sj-simmons/crypto/raw/main/svgs/995d140a6fe30225897e70143a750cd6.svg" valign="-4.109589000000009px" width="194.03668349999998pt" height="16.438356pt" style="max-width: 100%;"></a>, where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> generates
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c8b3d4f7d2deabec23c20e9348fc1b28.svg"><img alt="$\mathbb{Z}/mn$" src="/sj-simmons/crypto/raw/main/svgs/c8b3d4f7d2deabec23c20e9348fc1b28.svg" valign="-4.109589000000009px" width="43.478126999999986pt" height="16.438356pt" style="max-width: 100%;"></a>, is necessarily an isomorphism of additive groups that one easily checks is also a ring homomorphism (that, then, restricts to an isomorphism of multiplicative groups). <g-emoji class="g-emoji" alias="black_medium_square" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/25fc.png">◼️</g-emoji></p>
<p dir="auto">More generally, one has the <a href="https://en.wikipedia.org/wiki/Multiplicative_group_of_integers_modulo_n#General_composite_numbers" rel="nofollow">Chinese Remainder Theorem</a>.</p>
<h2 tabindex="-1" dir="auto"><a id="user-content-iii-leveraging-the-intractability-of-integer-factorization" class="anchor" aria-hidden="true" href="#iii-leveraging-the-intractability-of-integer-factorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>III. Leveraging the intractability of integer factorization</h2>
<h3 tabindex="-1" dir="auto"><a id="user-content-plain-rsa" class="anchor" aria-hidden="true" href="#plain-rsa"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plain RSA</h3>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> <em>Plain</em>, or so-called <em>textbook</em>, RSA is inherently and dangerously insecure for
real-world cryptographical applications; nonetheless, it is an accessible illustration of the
fundamental <em>trapdoor</em> mechanism in modern cryptography. And, it can be enhanced and made into
a secure public-key cryptosystem, as we will see.</p>
<p dir="auto">In modern times, you can create and publish (on, say, your personal webpage) a <em>public key</em> that can
then be used (by someone called, say, Athena) to encrypt a private message to you.  Only you can
decrypt Athena's encrypted message, so it doesn't matter if a bad actor sees Athena's encrypted
message that she is sending to you.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-how-to-set-up-your-keys" class="anchor" aria-hidden="true" href="#how-to-set-up-your-keys"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to set up your keys</h4>
<p dir="auto">Important: since your enciphering key is public, a bad actor might try to intercept Athena's
encrypted message and modify or replace it with a malicious message encrypted with your public key. Then you
decrypt the bad actor's message thinking that it is from Athena.  We need to bar against this
weakness but, for now, let us ignore it.</p>
<p dir="auto">To create your public key in the
<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)" rel="nofollow">RSA cryptosystem</a>,
you first choose two large primes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> (which you will keep
secret) and multiply them together obtaining <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg"><img alt="$n=pq$" src="/sj-simmons/crypto/raw/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a>.  You also choose a
positive integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> that is relative prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44a813ff292c05aaf762724c775fdc40.svg"><img alt="$\phi(n)=(p-1)(q-1)$" src="/sj-simmons/crypto/raw/main/svgs/44a813ff292c05aaf762724c775fdc40.svg" valign="-4.109589000000009px" width="152.75480549999997pt" height="16.438356pt" style="max-width: 100%;"></a>.
Your <em>public key</em> then consists of the pair of numbers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e4c8fb755110974bbd1aa4b0fe60b068.svg"><img alt="$\{n, e\}.$" src="/sj-simmons/crypto/raw/main/svgs/e4c8fb755110974bbd1aa4b0fe60b068.svg" valign="-4.109589000000009px" width="45.83154014999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">In order to, in the future, decrypt messages that were encrypted using
your public key, you go ahead and invert <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c537080963df3a027296931f59849a4c.svg"><img alt="$\phi(n);$" src="/sj-simmons/crypto/raw/main/svgs/c537080963df3a027296931f59849a4c.svg" valign="-4.109589000000009px" width="37.01307719999999pt" height="16.438356pt" style="max-width: 100%;"></a> that is,
you find the least positive integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> that satisfies
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4b1628e2ac81a62aa475fabe3d5a0199.svg"><img alt="$ed\equiv 1 \mod \phi(n).$" src="/sj-simmons/crypto/raw/main/svgs/4b1628e2ac81a62aa475fabe3d5a0199.svg" valign="-4.109589000000009px" width="131.30493255pt" height="16.438356pt" style="max-width: 100%;"></a> Then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/de3bd9768742ee7537342ce023ae5d20.svg"><img alt="$\{n, d\}$" src="/sj-simmons/crypto/raw/main/svgs/de3bd9768742ee7537342ce023ae5d20.svg" valign="-4.109589000000009px" width="42.167142599999984pt" height="16.438356pt" style="max-width: 100%;"></a> is your decryption key
<em>which you must keep secret</em>.</p>
<p dir="auto">At this stage, you can actually delete, forget, and/or erase both <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a>.  But keep <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/de3bd9768742ee7537342ce023ae5d20.svg"><img alt="$\{n, d\}$" src="/sj-simmons/crypto/raw/main/svgs/de3bd9768742ee7537342ce023ae5d20.svg" valign="-4.109589000000009px" width="42.167142599999984pt" height="16.438356pt" style="max-width: 100%;"></a> and keep <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> secret always.</p>
<p dir="auto">Now suppose that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is a positive integer representing the <em>plaintext</em>
message that Athena wants to encrypt and send to you.  Athena encrypts <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>
producing another integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> called the <em>ciphertext</em> as follows:</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aa9d5ede41bc7ae9036d7d74fe20f446.svg"><img alt="$$c = m^e \mod n.$$" src="/sj-simmons/crypto/raw/main/svgs/aa9d5ede41bc7ae9036d7d74fe20f446.svg" valign="0.0px" width="118.3806822pt" height="11.741602949999999pt" style="max-width: 100%;"></a></p>
<p dir="auto">Athena can then send the ciphertext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> to you or, say, publish it on her
webpage. Short of discovering an efficient way to factor products of large primes
and assuming that you didn't leak <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> or <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a>, then you are the
only person on the planet who can decrypt <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> back into the plaintext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg"><img alt="$m.$" src="/sj-simmons/crypto/raw/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg" valign="0.0px" width="18.99932429999999pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<h4 tabindex="-1" dir="auto"><a id="user-content-how-to-decrypt" class="anchor" aria-hidden="true" href="#how-to-decrypt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to decrypt</h4>
<p dir="auto">Now, how do you decrypt Athena's encrypted message <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5d744b7f76c38e8f14aa14d9188b3e77.svg"><img alt="$c?$" src="/sj-simmons/crypto/raw/main/svgs/5d744b7f76c38e8f14aa14d9188b3e77.svg" valign="0.0px" width="14.87639504999999pt" height="11.4155283pt" style="max-width: 100%;"></a>  Answer: you simply
compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7ba5604bf251006144ead611882a0799.svg"><img alt="$c^d$" src="/sj-simmons/crypto/raw/main/svgs/7ba5604bf251006144ead611882a0799.svg" valign="0.0px" width="13.95688139999999pt" height="13.95621975pt" style="max-width: 100%;"></a> modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85bc1f723bdc744666d4f2241b1031f7.svg"><img alt="$n,$" src="/sj-simmons/crypto/raw/main/svgs/85bc1f723bdc744666d4f2241b1031f7.svg" valign="-3.1963502999999895px" width="14.433101099999991pt" height="10.2739725pt" style="max-width: 100%;"></a> which is actually <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg"><img alt="$m,$" src="/sj-simmons/crypto/raw/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg" valign="-3.1963502999999895px" width="18.99932429999999pt" height="10.2739725pt" style="max-width: 100%;"></a> the original message. To
show this, we claim that, for any integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg"><img alt="$m,$" src="/sj-simmons/crypto/raw/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg" valign="-3.1963502999999895px" width="18.99932429999999pt" height="10.2739725pt" style="max-width: 100%;"></a></p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b353fe483ec32004347501aab5ec74a3.svg"><img alt="$$m^{ed}\equiv m \mod n;$$" src="/sj-simmons/crypto/raw/main/svgs/b353fe483ec32004347501aab5ec74a3.svg" valign="0.0px" width="132.54305625pt" height="17.9744895pt" style="max-width: 100%;"></a></p>
<p dir="auto">this, then, implies that decryption works since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7891fc5a08de5cefc977fefd8d7e52ca.svg"><img alt="$c^d = (m^e)^d = m^{ed} = m$" src="/sj-simmons/crypto/raw/main/svgs/7891fc5a08de5cefc977fefd8d7e52ca.svg" valign="-4.109588999999991px" width="165.24213254999998pt" height="18.06580875pt" style="max-width: 100%;"></a>
modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85bc1f723bdc744666d4f2241b1031f7.svg"><img alt="$n,$" src="/sj-simmons/crypto/raw/main/svgs/85bc1f723bdc744666d4f2241b1031f7.svg" valign="-3.1963502999999895px" width="14.433101099999991pt" height="10.2739725pt" style="max-width: 100%;"></a> as desired.</p>
<p dir="auto"><strong>Proof of claim</strong>. First assume that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is relatively prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg"><img alt="$n.$" src="/sj-simmons/crypto/raw/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> Then</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4f154fc257727d29cdda5f563c22ed92.svg"><img alt="$$m^{ed} \equiv m^{1+k \phi(n)} \equiv m\left(m^{\phi(n)}\right)^k \equiv m(1)^k \equiv m \mod n,$$" src="/sj-simmons/crypto/raw/main/svgs/4f154fc257727d29cdda5f563c22ed92.svg" valign="0.0px" width="393.7453476pt" height="33.5163048pt" style="max-width: 100%;"></a></p>
<p dir="auto">where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a> is an integer satisfying <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/91fcc71ea647cc943d91ca6153a24274.svg"><img alt="$ed = 1 + k \phi(n),$" src="/sj-simmons/crypto/raw/main/svgs/91fcc71ea647cc943d91ca6153a24274.svg" valign="-4.109589000000009px" width="112.52657294999997pt" height="16.438356pt" style="max-width: 100%;"></a> and we have used
the fact that, by Euler's Theorem, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8223f7c7893b0cd0e2330950d72619ac.svg"><img alt="$m^{\phi(n)} \equiv 1 \mod n,$" src="/sj-simmons/crypto/raw/main/svgs/8223f7c7893b0cd0e2330950d72619ac.svg" valign="-3.1963502999999966px" width="134.07402525pt" height="17.7918378pt" style="max-width: 100%;"></a> whenever <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is relatively
prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg"><img alt="$n.$" src="/sj-simmons/crypto/raw/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is not relatively prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg"><img alt="$n=pq$" src="/sj-simmons/crypto/raw/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a> then either <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> or <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> divides
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg"><img alt="$m,$" src="/sj-simmons/crypto/raw/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg" valign="-3.1963502999999895px" width="18.99932429999999pt" height="10.2739725pt" style="max-width: 100%;"></a> or both <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> divide <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg"><img alt="$m.$" src="/sj-simmons/crypto/raw/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg" valign="0.0px" width="18.99932429999999pt" height="7.0776222pt" style="max-width: 100%;"></a>  In the latter case, since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> are distinct
primes, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> must be a multiple of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85bc1f723bdc744666d4f2241b1031f7.svg"><img alt="$n,$" src="/sj-simmons/crypto/raw/main/svgs/85bc1f723bdc744666d4f2241b1031f7.svg" valign="-3.1963502999999895px" width="14.433101099999991pt" height="10.2739725pt" style="max-width: 100%;"></a>
and so <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ba75e6ee667f32fca0a2154cf3ae7d60.svg"><img alt="$m^{ed}\equiv m \mod n,$" src="/sj-simmons/crypto/raw/main/svgs/ba75e6ee667f32fca0a2154cf3ae7d60.svg" valign="-3.1963519499999897px" width="127.06373954999998pt" height="17.1525717pt" style="max-width: 100%;"></a> since, modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, both <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9d7ff1dd3de851361fc4f6ec02eea159.svg"><img alt="$m^{ed}$" src="/sj-simmons/crypto/raw/main/svgs/9d7ff1dd3de851361fc4f6ec02eea159.svg" valign="0.0px" width="27.51309659999999pt" height="13.95621975pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> are zero.</p>
<p dir="auto">Assume without loss of generality that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a>, but not <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a>, divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg"><img alt="$m.$" src="/sj-simmons/crypto/raw/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg" valign="0.0px" width="18.99932429999999pt" height="7.0776222pt" style="max-width: 100%;"></a> Then, clearly
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7885bcab49010c5e69a3d12371607ba4.svg"><img alt="$m^{ed}-m.$" src="/sj-simmons/crypto/raw/main/svgs/7885bcab49010c5e69a3d12371607ba4.svg" valign="-1.3698745499999894px" width="67.42550924999999pt" height="15.3260943pt" style="max-width: 100%;"></a> Also, by Fermat's Little Theorem, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/45d983201c33a829e17186837a6dd1f0.svg"><img alt="$m^{p-1} \equiv  1 \mod p$" src="/sj-simmons/crypto/raw/main/svgs/45d983201c33a829e17186837a6dd1f0.svg" valign="-3.1963503000000086px" width="125.21033579999997pt" height="16.5772266pt" style="max-width: 100%;"></a> since
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> doesn't divide <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg"><img alt="$m.$" src="/sj-simmons/crypto/raw/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg" valign="0.0px" width="18.99932429999999pt" height="7.0776222pt" style="max-width: 100%;"></a> Hence, similarly to above,</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d2e1f7ef66b309636ce7f6193faa201e.svg"><img alt="$$m^{ed} \equiv m^{1+k \phi(n)} \equiv m\left(m^{\phi(n)}\right)^k \equiv m\left(m^{(p-1)(q-1)}\right)^k \equiv m\left(m^{p-1}\right)^{(q-1)k}\equiv m \mod p;$$" src="/sj-simmons/crypto/raw/main/svgs/d2e1f7ef66b309636ce7f6193faa201e.svg" valign="0.0px" width="610.8324948pt" height="33.5163048pt" style="max-width: 100%;"></a></p>
<p dir="auto">so that, also, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7885bcab49010c5e69a3d12371607ba4.svg"><img alt="$m^{ed}-m.$" src="/sj-simmons/crypto/raw/main/svgs/7885bcab49010c5e69a3d12371607ba4.svg" valign="-1.3698745499999894px" width="67.42550924999999pt" height="15.3260943pt" style="max-width: 100%;"></a> Now, since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> are distinct primes, each
of which divide <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/52f839ba44523f0c909dd150e1b525d9.svg"><img alt="$m^{ed}-m,$" src="/sj-simmons/crypto/raw/main/svgs/52f839ba44523f0c909dd150e1b525d9.svg" valign="-3.1963519499999897px" width="67.42550924999999pt" height="17.1525717pt" style="max-width: 100%;"></a> it must be the case that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg"><img alt="$n=pq$" src="/sj-simmons/crypto/raw/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a> divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a2c0789c86768f334a5f7b29b53f1c3d.svg"><img alt="$m^{ed}-m;$" src="/sj-simmons/crypto/raw/main/svgs/a2c0789c86768f334a5f7b29b53f1c3d.svg" valign="-3.1963519499999897px" width="67.42550924999999pt" height="17.1525717pt" style="max-width: 100%;"></a> that is,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e89fb65e943b070be03eb5c757a8c842.svg"><img alt="$m^{ed} \equiv m \mod n$" src="/sj-simmons/crypto/raw/main/svgs/e89fb65e943b070be03eb5c757a8c842.svg" valign="0.0px" width="122.49751469999998pt" height="13.95621975pt" style="max-width: 100%;"></a> when <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is not relatively prime <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg"><img alt="$n.$" src="/sj-simmons/crypto/raw/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">Therefore, the equality <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e89fb65e943b070be03eb5c757a8c842.svg"><img alt="$m^{ed} \equiv m \mod n$" src="/sj-simmons/crypto/raw/main/svgs/e89fb65e943b070be03eb5c757a8c842.svg" valign="0.0px" width="122.49751469999998pt" height="13.95621975pt" style="max-width: 100%;"></a> holds for all <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg"><img alt="$m,$" src="/sj-simmons/crypto/raw/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg" valign="-3.1963502999999895px" width="18.99932429999999pt" height="10.2739725pt" style="max-width: 100%;"></a> since it holds when <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is
relatively prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, and also when it is not. <g-emoji class="g-emoji" alias="black_medium_square" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/25fc.png">◼️</g-emoji></p>
<p dir="auto">Note that not even Athena can decrypt her own ciphertext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> since she does
not have <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d94d6868b0dbbea61050c0cabe84f89.svg"><img alt="$d.$" src="/sj-simmons/crypto/raw/main/svgs/2d94d6868b0dbbea61050c0cabe84f89.svg" valign="0.0px" width="13.12218764999999pt" height="11.4155283pt" style="max-width: 100%;"></a> She only has <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> (and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>) so she can only encrypt.</p>
<p dir="auto">So how is it that your public key can't be reverse engineered by a bad actor?
Everyone has your encryption key <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e4c8fb755110974bbd1aa4b0fe60b068.svg"><img alt="$\{n, e\}.$" src="/sj-simmons/crypto/raw/main/svgs/e4c8fb755110974bbd1aa4b0fe60b068.svg" valign="-4.109589000000009px" width="45.83154014999999pt" height="16.438356pt" style="max-width: 100%;"></a> But to compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> from <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, one
must invert <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> modulo not <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, but modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4b539e947954886e594105a91f42f29b.svg"><img alt="$\phi(n).$" src="/sj-simmons/crypto/raw/main/svgs/4b539e947954886e594105a91f42f29b.svg" valign="-4.109589000000009px" width="37.01307719999999pt" height="16.438356pt" style="max-width: 100%;"></a>  And that's the trapdoor;
computing <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg"><img alt="$\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg" valign="-4.109589000000009px" width="32.44685399999999pt" height="16.438356pt" style="max-width: 100%;"></a> when <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg"><img alt="$n=pq$" src="/sj-simmons/crypto/raw/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a>, a product of large primes, is very, very time
consuming — it's essentially equivalent to factoring <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> into <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/45448f736dff1ed4d20005287b78bdb5.svg"><img alt="$pq$" src="/sj-simmons/crypto/raw/main/svgs/45448f736dff1ed4d20005287b78bdb5.svg" valign="-3.1963502999999895px" width="16.19867369999999pt" height="10.2739725pt" style="max-width: 100%;"></a>; i.e.,
finding a divisor of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>.</p>
<p dir="auto">Let us test drive the RSA scheme.</p>
<p dir="auto">Cryptographers very often use the Fermat prime <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/246dcb0ee0fb9e9f1e803ccd8a99f694.svg"><img alt="$e=2^{16}+1=65537$" src="/sj-simmons/crypto/raw/main/svgs/246dcb0ee0fb9e9f1e803ccd8a99f694.svg" valign="-1.3698729000000083px" width="143.04205739999998pt" height="14.750749199999998pt" style="max-width: 100%;"></a> for
their RSA encrypting exponent (partly because raising to the 65537th power mainly
consists of squarings). Then they generate primes until they
find distinct <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> that satisfy <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/458780abcbdf019c1decf5f58ea19ba0.svg"><img alt="$\gcd(e, (p-1)(q-1))=1.$" src="/sj-simmons/crypto/raw/main/svgs/458780abcbdf019c1decf5f58ea19ba0.svg" valign="-4.109589000000009px" width="185.49642539999996pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Suppose that you use your program above and find the following two
200-bit primes.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = 1162281642500018516457695142918123385886797686236787603454999
q = 1576485350800305182150586120662765326256410287326195239351103"><pre><span class="pl-s1">p</span> <span class="pl-c1">=</span> <span class="pl-c1">1162281642500018516457695142918123385886797686236787603454999</span>
<span class="pl-s1">q</span> <span class="pl-c1">=</span> <span class="pl-c1">1576485350800305182150586120662765326256410287326195239351103</span></pre></div>
<p dir="auto">Let your public key be <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cbafb9a3db34ec0c1a7e97b39ce1922.svg"><img alt="$\{n, e\},$" src="/sj-simmons/crypto/raw/main/svgs/8cbafb9a3db34ec0c1a7e97b39ce1922.svg" valign="-4.109589000000009px" width="45.83154014999999pt" height="16.438356pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9031a800c7cdc076f354cc5ff9cafbb8.svg"><img alt="$e=65537$" src="/sj-simmons/crypto/raw/main/svgs/9031a800c7cdc076f354cc5ff9cafbb8.svg" valign="0.0px" width="70.66781535pt" height="10.5936072pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is the product
of the two primes in the previous code-block.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-6" class="anchor" aria-hidden="true" href="#exercises-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol dir="auto">
<li>
<p dir="auto">Verify that your key <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9031a800c7cdc076f354cc5ff9cafbb8.svg"><img alt="$e=65537$" src="/sj-simmons/crypto/raw/main/svgs/9031a800c7cdc076f354cc5ff9cafbb8.svg" valign="0.0px" width="70.66781535pt" height="10.5936072pt" style="max-width: 100%;"></a> is indeed relatively prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg"><img alt="$\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg" valign="-4.109589000000009px" width="32.44685399999999pt" height="16.438356pt" style="max-width: 100%;"></a> for your <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg"><img alt="$n.$" src="/sj-simmons/crypto/raw/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
</li>
<li>
<p dir="auto">Suppose that Carmichael uses your private key <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg"><img alt="$\{n, e\}$" src="/sj-simmons/crypto/raw/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg" valign="-4.109589000000009px" width="41.265316949999985pt" height="16.438356pt" style="max-width: 100%;"></a> to encrypt a (numeric) message. What is your
decrypting exponent, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7194e1d4b173c3ff8fec4422c3f90097.svg"><img alt="$d,$" src="/sj-simmons/crypto/raw/main/svgs/7194e1d4b173c3ff8fec4422c3f90097.svg" valign="-3.1963503000000055px" width="13.12218764999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> and what was the original message if the ciphertext you receive from Carmichael is:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="1228656544646342294930925759475188964963998457780851975302427012554675014888739125369008335923675038120110871984093074455"><pre><span class="pl-c1">1228656544646342294930925759475188964963998457780851975302427012554675014888739125369008335923675038120110871984093074455</span></pre></div>
</li>
</ol>
<a id="user-content-arthurmarvin">
<ol start="3" dir="auto">
<li>
<p dir="auto"><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji><strong>Challenge</strong><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji> Marvin can't be bothered to use large primes, so his public key is <img alt="$\{n, e\}=$" src="/sj-simmons/crypto/raw/main/svgs/08190cb050929da6f85279c0ab82dc8a.svg" valign="-4.109589000000009px" width="58.616848949999984pt" height="16.438356pt" style="max-width: 100%;"> {932311734169679424087726241879, 65537}. Arthur sends Marvin the following encrypted very secret message. You break Marvin's encryption, and intercept and decode the following ciphertext.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="504779851614048359547310249856"><pre><span class="pl-c1">504779851614048359547310249856</span></pre></div>
<p dir="auto">What is Arthur's plaintext to Marvin? <g-emoji class="g-emoji" alias="medal_sports" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c5.png">🏅</g-emoji> <strong>Marina</strong>, <strong>Laura</strong>, <strong>Alvaro</strong>,
<strong>Nargiss</strong>, <strong>Morgan</strong>, <strong>Sven</strong>, <strong>Jalen</strong>, <strong>Brandon</strong>, <strong>Nathan</strong></p>
<p dir="auto">Can you also decrypt the following intercepted ciphertext? <g-emoji class="g-emoji" alias="medal_sports" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c5.png">🏅</g-emoji> <strong>Laura</strong>, <strong>Marina</strong>, <strong>Alvaro</strong>, <strong>Nargiss</strong>, <strong>Morgan</strong>, <strong>Sven</strong>, <strong>Jalen</strong>, <strong>Brandon</strong>, <strong>Nathan</strong></p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="538940096304536933932071588652"><pre><span class="pl-c1">538940096304536933932071588652</span></pre></div>
</li>
</ol>
</a><h4 tabindex="-1" dir="auto"><a></a><a id="user-content-fermat-factoring-attack" class="anchor" aria-hidden="true" href="#fermat-factoring-attack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fermat-factoring attack</h4>
<p dir="auto">This attack on RSA is in play when the two primes <img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"> and <img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"> are relatively
close together. Why is <img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"> and <img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"> being close a weakness?  First, notice that</p>
<p align="center" dir="auto"><img alt="\begin{align}
 n = pq &amp;= \left(\frac{p+q}{2}\right)^2 - \left(\frac{p-q}{2}\right)^2. \notag
\end{align}" src="/sj-simmons/crypto/raw/main/svgs/120ca06a6b4c9aa73c839222e9ca541a.svg" valign="0.0px" width="240.91877535pt" height="42.80407395pt" style="max-width: 100%;"></p>
<p dir="auto">Let us assume that <img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"> and <img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"> are distinct odd primes with <img alt="$p&gt;q.$" src="/sj-simmons/crypto/raw/main/svgs/fe18ee93b206e9cd5410c2687f1fbc49.svg" valign="-3.1963502999999966px" width="42.68250854999999pt" height="12.05823135pt" style="max-width: 100%;">  If we set
<img alt="$a=(p+q)/2$" src="/sj-simmons/crypto/raw/main/svgs/6dabf8768ec7dd1dca58ce2a7a4b8b89.svg" valign="-4.109589000000009px" width="96.12048269999998pt" height="16.438356pt" style="max-width: 100%;"> and <img alt="$b=(p-q)/2$" src="/sj-simmons/crypto/raw/main/svgs/40b11dcb40a1cfe374eda802d9e93f23.svg" valign="-4.109589000000009px" width="94.48612469999999pt" height="16.438356pt" style="max-width: 100%;">, then <img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"> and <img alt="$b$" src="/sj-simmons/crypto/raw/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg" valign="0.0px" width="7.054796099999991pt" height="11.4155283pt" style="max-width: 100%;"> are positive integers and the last expression
on the right in the equality above factors, so that</p>
<p align="center" dir="auto"><img alt="$$n=a^2-b^2=(a+b)(a-b),$$" src="/sj-simmons/crypto/raw/main/svgs/f37302ade02cf04f6d42d65d86be5704.svg" valign="0.0px" width="206.0935734pt" height="18.312383099999998pt" style="max-width: 100%;"></p>
<p dir="auto">which is just <img alt="$pq.$" src="/sj-simmons/crypto/raw/main/svgs/7c81531e7dd2a54da35d1f8a8e6dd385.svg" valign="-3.1963502999999895px" width="20.764878749999987pt" height="10.2739725pt" style="max-width: 100%;">  If we can efficiently find <img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"> and <img alt="$b$" src="/sj-simmons/crypto/raw/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg" valign="0.0px" width="7.054796099999991pt" height="11.4155283pt" style="max-width: 100%;">, then we've
effectively found <img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"> and <img alt="$q.$" src="/sj-simmons/crypto/raw/main/svgs/2e25588bd69787207bf5da9706a3070f.svg" valign="-3.1963502999999895px" width="12.49431149999999pt" height="10.2739725pt" style="max-width: 100%;"></p>
<p dir="auto">If <img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"> and <img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"> are close to each other, then <img alt="$b$" src="/sj-simmons/crypto/raw/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg" valign="0.0px" width="7.054796099999991pt" height="11.4155283pt" style="max-width: 100%;"> is small. Looking at <img alt="$n+b^2 = a^2,$" src="/sj-simmons/crypto/raw/main/svgs/17d49a25b3f451a80cbed84595e910f3.svg" valign="-3.1963503000000086px" width="86.93479244999999pt" height="16.5772266pt" style="max-width: 100%;">
we could incrementally look for the smallest positive integer <img alt="$b$" src="/sj-simmons/crypto/raw/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg" valign="0.0px" width="7.054796099999991pt" height="11.4155283pt" style="max-width: 100%;"> such that <img alt="$n+b^2$" src="/sj-simmons/crypto/raw/main/svgs/b0e51415eb6e5ce6c19eeea5cd862534.svg" valign="-1.3698729000000083px" width="43.565410349999986pt" height="14.750749199999998pt" style="max-width: 100%;"> is
a perfect square (that smallest positive integer would have to be <img alt="$a).$" src="/sj-simmons/crypto/raw/main/svgs/049a2698b7480a3b580afdf957ad5e4c.svg" valign="-4.109589000000009px" width="19.64809439999999pt" height="16.438356pt" style="max-width: 100%;"> Such a search
would take <img alt="$b=(p-q)/2$" src="/sj-simmons/crypto/raw/main/svgs/40b11dcb40a1cfe374eda802d9e93f23.svg" valign="-4.109589000000009px" width="94.48612469999999pt" height="16.438356pt" style="max-width: 100%;"> steps and, each step, we'd have to check whether the
number <img alt="$n+b^2$" src="/sj-simmons/crypto/raw/main/svgs/b0e51415eb6e5ce6c19eeea5cd862534.svg" valign="-1.3698729000000083px" width="43.565410349999986pt" height="14.750749199999998pt" style="max-width: 100%;"> is a perfect square. Fermat's factoring method does better.</p>
<p dir="auto">First, notice that, if <img alt="$b$" src="/sj-simmons/crypto/raw/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg" valign="0.0px" width="7.054796099999991pt" height="11.4155283pt" style="max-width: 100%;"> is manageably small in the equality <img alt="$n+b^2=a^2$" src="/sj-simmons/crypto/raw/main/svgs/87f2706d0438596747159a030c363d5e.svg" valign="-1.3698729000000083px" width="81.54665474999999pt" height="14.750749199999998pt" style="max-width: 100%;">, then we
have that <img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;">, which is bounded below by <img alt="$\sqrt{n}$" src="/sj-simmons/crypto/raw/main/svgs/4fd78aba72015f7697ab298a89ec8a9c.svg" valign="-3.940686749999999px" width="23.565549149999992pt" height="16.438356pt" style="max-width: 100%;">, shouldn't be hugely larger than <img alt="$\sqrt{n}.$" src="/sj-simmons/crypto/raw/main/svgs/17b40019388603fede3e78d493732825.svg" valign="-3.940686749999999px" width="28.13177234999999pt" height="16.438356pt" style="max-width: 100%;">
Also, <img alt="$a^2-n =b^2;$" src="/sj-simmons/crypto/raw/main/svgs/5a9aa6721384bd8fe11df516dd003e64.svg" valign="-3.1963503000000086px" width="86.93479244999999pt" height="16.5772266pt" style="max-width: 100%;"> so let us try to find <img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"> by starting with <img alt="$a = \lceil\sqrt{n}\rceil$" src="/sj-simmons/crypto/raw/main/svgs/8b88a03370f2f59aada5be95bb364b74.svg" valign="-4.109588999999997px" width="68.78424299999999pt" height="16.607258249999997pt" style="max-width: 100%;">
and incrementing it until <img alt="$a^2-n$" src="/sj-simmons/crypto/raw/main/svgs/c5405a628f1c3bd1bea686634a9db29c.svg" valign="-1.3698729000000083px" width="46.02168119999999pt" height="14.750749199999998pt" style="max-width: 100%;"> is a perfect square (which must be <img alt="$b^2).$" src="/sj-simmons/crypto/raw/main/svgs/294092b5fadf2bcf89f34e837ec61dc3.svg" valign="-4.109589000000009px" width="25.38819689999999pt" height="17.4904653pt" style="max-width: 100%;">
Algorithmically, one could do something like:</p>
<ol dir="auto">
<li>Set <img alt="$a \leftarrow \lceil\sqrt{n}\rceil$" src="/sj-simmons/crypto/raw/main/svgs/fb42dfd64b0590b4ff097cdc307b9396.svg" valign="-4.109588999999997px" width="72.43721264999999pt" height="16.607258249999997pt" style="max-width: 100%;"> and <img alt="$b2\leftarrow a^2-n.$" src="/sj-simmons/crypto/raw/main/svgs/4b119712635ff64a33861b150b04341c.svg" valign="-1.3698729000000083px" width="91.4325126pt" height="14.750749199999998pt" style="max-width: 100%;"></li>
<li>If <img alt="$b2$" src="/sj-simmons/crypto/raw/main/svgs/b5522aeb42ad4c7fed8330a435caced5.svg" valign="0.0px" width="15.274005449999992pt" height="11.4155283pt" style="max-width: 100%;"> is a perfect square, go to step 3; otherwise set <img alt="$a \leftarrow a + 1$" src="/sj-simmons/crypto/raw/main/svgs/94ed1f7251b3a458f663664586034777.svg" valign="-1.3698745499999938px" width="71.25930899999999pt" height="11.96348175pt" style="max-width: 100%;">,  <img alt="$b2\leftarrow a^2-n$" src="/sj-simmons/crypto/raw/main/svgs/3301faf4a8768eda399103e0655c89af.svg" valign="-1.3698729000000083px" width="86.86628774999998pt" height="14.750749199999998pt" style="max-width: 100%;"> and repeat step 2.</li>
<li>Return <img alt="$a- \sqrt{b2}.$" src="/sj-simmons/crypto/raw/main/svgs/fe7f3ca3e995e638f765c40703475869.svg" valign="-1.7717139000000102px" width="62.31922289999999pt" height="16.438356pt" style="max-width: 100%;"></li>
</ol>
<p dir="auto">Notice that the discussion above doesn't use that <img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"> and <img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"> are prime, so that the algorithm
returns a factor for any product of odd, or of even, (positive) integers, not just odd primes.</p>
<p dir="auto">How many steps should this take? Consider <img alt="$(\sqrt{n}+i)^2-n=b^2.$" src="/sj-simmons/crypto/raw/main/svgs/aec0f32946eb20f122ace7f9e7c3b318.svg" valign="-4.109589000000009px" width="140.35103775pt" height="17.4904653pt" style="max-width: 100%;"> Solving this for <img alt="$i$" src="/sj-simmons/crypto/raw/main/svgs/77a3b857d53fb44e33b53e4c8b68351a.svg" valign="0.0px" width="5.663225699999989pt" height="10.84150485pt" style="max-width: 100%;">, we
get</p>
<p align="center" dir="auto"><img alt="\begin{align}
i =\sqrt{b^2+n}-\sqrt{n}&amp;=\left(\sqrt{b^2+n}-\sqrt{n}\right)\frac{\sqrt{b^2+n}+\sqrt{n}}{\sqrt{b^2+n}+\sqrt{n}}\notag\\
&amp;=\frac{b^2}{\sqrt{b^2+n}+\sqrt{n}}.\notag
\end{align}" src="/sj-simmons/crypto/raw/main/svgs/7b3e647097116322de4ee061842fc5c8.svg" valign="0.0px" width="384.55300124999997pt" height="90.84562079999999pt" style="max-width: 100%;"></p>
<p dir="auto">Looking just at the denominator in the last expression,</p>
<p align="center" dir="auto"><img alt="\begin{align}
\sqrt{b^2+n}+\sqrt{n}=\sqrt{a^2}+\sqrt{n}&amp;=a+\sqrt{n} \notag\\
&amp;=\frac{p+q}{2}+\sqrt{n} \notag\\
&amp;&gt;\frac{q+q}{2}+\sqrt{q^2} = 2q;  \notag
\end{align}" src="/sj-simmons/crypto/raw/main/svgs/4aef6531b17b0e4c690f1da18eb7ec02.svg" valign="0.0px" width="356.09242515pt" height="99.84233984999999pt" style="max-width: 100%;"></p>
<p dir="auto">so that <img alt="$i&lt;\frac{b^2}{2q}=\frac{(p-q)^2}{8q}.$" src="/sj-simmons/crypto/raw/main/svgs/a1f437e1cce7af2f4cab5b4ab455ab6f.svg" valign="-7.906039350000006px" width="115.12336274999998pt" height="26.13616665pt" style="max-width: 100%;">  If <img alt="$(p-q)^2$" src="/sj-simmons/crypto/raw/main/svgs/d0d363e77ee37cf60874f95302961af5.svg" valign="-4.109589000000009px" width="55.627826099999986pt" height="17.4904653pt" style="max-width: 100%;"> is small relative to <img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;">, then
the algorithm has a chance of completing and, in each step, we check whether a number
less than <img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"> is a perfect square.</p>
<p dir="auto">The next exercise test-drives this attack. First, though, the following code snippets
may prove useful if you are using Python.  The issue is that an obvious way to check if
an integer <img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"> is a square is to check if its square root is an integer.  The problem is that
Python's float method <strong>is_integer</strong> fails for large values of <img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;">, as do other obvious
methods employing floats.</p>
<p dir="auto">To stay completely in the realm of integers, one could use a bisection method:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def sqroot(n):
    &quot;&quot;&quot;return sqrt(n) if integer n is a perfect square; otherwise, return 0&quot;&quot;&quot;
    assert type(n) is int and n &gt; 0
    lower, upper = 1, n
    while lower + 1 &lt; upper:
        middle = (lower + upper)//2
        if middle * middle &lt; n:
            lower = middle
        else:
            upper = middle
    return lower if lower ** 2 == n else upper if upper ** 2 == n else 0"><pre><span class="pl-k">def</span> <span class="pl-en">sqroot</span>(<span class="pl-s1">n</span>):
    <span class="pl-s">"""return sqrt(n) if integer n is a perfect square; otherwise, return 0"""</span>
    <span class="pl-k">assert</span> <span class="pl-en">type</span>(<span class="pl-s1">n</span>) <span class="pl-c1">is</span> <span class="pl-s1">int</span> <span class="pl-c1">and</span> <span class="pl-s1">n</span> <span class="pl-c1">&gt;</span> <span class="pl-c1">0</span>
    <span class="pl-s1">lower</span>, <span class="pl-s1">upper</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span>, <span class="pl-s1">n</span>
    <span class="pl-k">while</span> <span class="pl-s1">lower</span> <span class="pl-c1">+</span> <span class="pl-c1">1</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">upper</span>:
        <span class="pl-s1">middle</span> <span class="pl-c1">=</span> (<span class="pl-s1">lower</span> <span class="pl-c1">+</span> <span class="pl-s1">upper</span>)<span class="pl-c1">//</span><span class="pl-c1">2</span>
        <span class="pl-k">if</span> <span class="pl-s1">middle</span> <span class="pl-c1">*</span> <span class="pl-s1">middle</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">n</span>:
            <span class="pl-s1">lower</span> <span class="pl-c1">=</span> <span class="pl-s1">middle</span>
        <span class="pl-k">else</span>:
            <span class="pl-s1">upper</span> <span class="pl-c1">=</span> <span class="pl-s1">middle</span>
    <span class="pl-k">return</span> <span class="pl-s1">lower</span> <span class="pl-k">if</span> <span class="pl-s1">lower</span> <span class="pl-c1">**</span> <span class="pl-c1">2</span> <span class="pl-c1">==</span> <span class="pl-s1">n</span> <span class="pl-k">else</span> <span class="pl-s1">upper</span> <span class="pl-k">if</span> <span class="pl-s1">upper</span> <span class="pl-c1">**</span> <span class="pl-c1">2</span> <span class="pl-c1">==</span> <span class="pl-s1">n</span> <span class="pl-k">else</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">Similarly, taking the ceiling of the square root of a large integer fails; consider
using this instead:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def ceil_sqroot(n):
    &quot;&quot;&quot;return integer ceiling(sqrt(n)) where n is a positive integer&quot;&quot;&quot;
    assert type(n) is int and n &gt; 0
    lower, upper = 1, n
    while lower + 1 &lt; upper:
        middle = (lower + upper)//2
        if middle * middle &lt; n:
            lower = middle
        else:
            upper = middle
    return upper"><pre><span class="pl-k">def</span> <span class="pl-en">ceil_sqroot</span>(<span class="pl-s1">n</span>):
    <span class="pl-s">"""return integer ceiling(sqrt(n)) where n is a positive integer"""</span>
    <span class="pl-k">assert</span> <span class="pl-en">type</span>(<span class="pl-s1">n</span>) <span class="pl-c1">is</span> <span class="pl-s1">int</span> <span class="pl-c1">and</span> <span class="pl-s1">n</span> <span class="pl-c1">&gt;</span> <span class="pl-c1">0</span>
    <span class="pl-s1">lower</span>, <span class="pl-s1">upper</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span>, <span class="pl-s1">n</span>
    <span class="pl-k">while</span> <span class="pl-s1">lower</span> <span class="pl-c1">+</span> <span class="pl-c1">1</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">upper</span>:
        <span class="pl-s1">middle</span> <span class="pl-c1">=</span> (<span class="pl-s1">lower</span> <span class="pl-c1">+</span> <span class="pl-s1">upper</span>)<span class="pl-c1">//</span><span class="pl-c1">2</span>
        <span class="pl-k">if</span> <span class="pl-s1">middle</span> <span class="pl-c1">*</span> <span class="pl-s1">middle</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">n</span>:
            <span class="pl-s1">lower</span> <span class="pl-c1">=</span> <span class="pl-s1">middle</span>
        <span class="pl-k">else</span>:
            <span class="pl-s1">upper</span> <span class="pl-c1">=</span> <span class="pl-s1">middle</span>
    <span class="pl-k">return</span> <span class="pl-s1">upper</span></pre></div>
<p dir="auto">Note that the algorithm in each function has order <img alt="$\log(n).$" src="/sj-simmons/crypto/raw/main/svgs/19c4da6002a94773ccd0397302d0fd3f.svg" valign="-4.109589000000009px" width="48.45144479999999pt" height="16.438356pt" style="max-width: 100%;"></p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-zapchallengeszap" class="anchor" aria-hidden="true" href="#exercises-zapchallengeszap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><del>Exercises</del> <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji>Challenges<g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji></h4>
<ol start="4" dir="auto">
<li>
<p dir="auto">Robertson uses 512-bit primes to generate his RSA public-key.  For his encryption key <img alt="$\{n, e\}$" src="/sj-simmons/crypto/raw/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg" valign="-4.109589000000009px" width="41.265316949999985pt" height="16.438356pt" style="max-width: 100%;">, he uses <img alt="$e =$" src="/sj-simmons/crypto/raw/main/svgs/5ea054d9d68928a88e3fac889ab224ac.svg" valign="0.0px" width="25.00566914999999pt" height="7.0776222pt" style="max-width: 100%;"> 65537 and <img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"> equal to (in hex):</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0x50886174e2215b2a1af3aa90b4856cc816f2d93732342613699c424c8b4a9e022974cf8aadd449dd8c80149f76854c61f139b4f7180acbdf49971d867809d4cb06603a3c5645295f0083b276f0f751f5bc71630d0c1c84ef65306ae9efd9820fc8bc162d07ea1ff9bf5dc4720f72dc4a6d33ffdcfc4a1f7847df61eeaa56c5bd"><pre><span class="pl-c1">0x50886174e2215b2a1af3aa90b4856cc816f2d93732342613699c424c8b4a9e022974cf8aadd449dd8c80149f76854c61f139b4f7180acbdf49971d867809d4cb06603a3c5645295f0083b276f0f751f5bc71630d0c1c84ef65306ae9efd9820fc8bc162d07ea1ff9bf5dc4720f72dc4a6d33ffdcfc4a1f7847df61eeaa56c5bd</span></pre></div>
<p dir="auto">Simmons encrypts a very important message and sends it to Robertson. Here is the (hex)
ciphertext:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0x162f500e12eb59444046adb4d34d4d8184c534136dee2d798b25d6e0fea86135bda2504b2217f0f37613360079e5a77adb9af13b415744c54473047e7f01789cc7774fe4b2c35e47bfed7e34c61e4c9295f5f11943e0043a7f978886210c4bab34b3159cfcedb5e7ba143234205cf27c04a5b6c9a42df5245cf1bc13bc601425"><pre><span class="pl-c1">0x162f500e12eb59444046adb4d34d4d8184c534136dee2d798b25d6e0fea86135bda2504b2217f0f37613360079e5a77adb9af13b415744c54473047e7f01789cc7774fe4b2c35e47bfed7e34c61e4c9295f5f11943e0043a7f978886210c4bab34b3159cfcedb5e7ba143234205cf27c04a5b6c9a42df5245cf1bc13bc601425</span></pre></div>
<p dir="auto">You break the key and you intercept the ciphertext.  What is the plaintext? <g-emoji class="g-emoji" alias="medal_sports" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c5.png">🏅</g-emoji> <strong>Marina</strong></p>
</li>
<li>
<p dir="auto">How big is the difference between Robertson's <img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"> and <img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;">? E.g., what's the smallest integer <img alt="$j$" src="/sj-simmons/crypto/raw/main/svgs/36b5afebdba34564d884d347484ac0c7.svg" valign="-3.1963519500000044px" width="7.710416999999989pt" height="14.0378568pt" style="max-width: 100%;"> such that <img alt="$|p-q|&lt;2^{j}?$" src="/sj-simmons/crypto/raw/main/svgs/5a888367a595b9e5156ed97f480fa342.svg" valign="-4.109589000000009px" width="90.2481261pt" height="17.689090649999997pt" style="max-width: 100%;"></p>
</li>
</ol>
<p dir="auto">Realizing that there are many other tricks and optimizations useful when Fermat factoring (see, for
example, the <a href="https://en.wikipedia.org/wiki/Fermat%27s_factorization_method" rel="nofollow">Wikipedia page</a>), let
us make some estimates based on our naive algorithm above.</p>
<p dir="auto">Suppose that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> are uniformly randomly and independently chosen <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit primes. What is
the likelihood that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> are such that their product <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg"><img alt="$n=pq$" src="/sj-simmons/crypto/raw/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a> can be factored in less than,
say, a trillion — which is about <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/da84b223b752b66b6fcf378630d8d16c.svg"><img alt="$2^{40}$" src="/sj-simmons/crypto/raw/main/svgs/da84b223b752b66b6fcf378630d8d16c.svg" valign="0.0px" width="21.324302999999993pt" height="13.380876299999999pt" style="max-width: 100%;"></a> — steps of the algorithm outlined above?</p>
<p dir="auto">We know that the number of steps is bounded by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0a49627bf8cd62bb435fbbaf03c6b44a.svg"><img alt="$\frac{(p-q)^2}{8q},$" src="/sj-simmons/crypto/raw/main/svgs/0a49627bf8cd62bb435fbbaf03c6b44a.svg" valign="-7.906039350000006px" width="46.71672555pt" height="26.13616665pt" style="max-width: 100%;"></a>
which we, in turn, want bounded by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c6fa98c50d09cd1df1229f4e9720822b.svg"><img alt="$2^{40}.$" src="/sj-simmons/crypto/raw/main/svgs/c6fa98c50d09cd1df1229f4e9720822b.svg" valign="0.0px" width="26.71243574999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> We know that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fd7da8bdce7a50528af1115a2bfe0742.svg"><img alt="$q&gt;2^k$" src="/sj-simmons/crypto/raw/main/svgs/fd7da8bdce7a50528af1115a2bfe0742.svg" valign="-3.1963519499999897px" width="45.33095654999998pt" height="17.1525717pt" style="max-width: 100%;"></a>; hence</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/93b031e1e7752dd98e62910186588068.svg"><img alt="$$\frac{(p-q)^2}{8q}&lt;\frac{(p-q)^2}{8\cdot 2^{k}}=\frac{(p-q)^2}{2^{k+3}}.$$" src="/sj-simmons/crypto/raw/main/svgs/93b031e1e7752dd98e62910186588068.svg" valign="0.0px" width="227.6135301pt" height="38.973783749999996pt" style="max-width: 100%;"></a></p>
<p dir="auto">We are guaranteed that the number of steps is less than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/da84b223b752b66b6fcf378630d8d16c.svg"><img alt="$2^{40}$" src="/sj-simmons/crypto/raw/main/svgs/da84b223b752b66b6fcf378630d8d16c.svg" valign="0.0px" width="21.324302999999993pt" height="13.380876299999999pt" style="max-width: 100%;"></a> if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0a49a2084ccf9520c2cb741d51b2f6c9.svg"><img alt="$(p-q)^2&lt;2^{40}2^{k+3}=2^{43+k};$" src="/sj-simmons/crypto/raw/main/svgs/0a49a2084ccf9520c2cb741d51b2f6c9.svg" valign="-4.109588999999991px" width="199.45210559999998pt" height="18.06580875pt" style="max-width: 100%;"></a>
that is, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3ba13f464b334fcd9aa8fa3b5166b830.svg"><img alt="$|p-q|&lt;2^{21.5+k/2}.$" src="/sj-simmons/crypto/raw/main/svgs/3ba13f464b334fcd9aa8fa3b5166b830.svg" valign="-4.109588999999997px" width="135.15411855pt" height="18.7050765pt" style="max-width: 100%;"></a></p>
<p dir="auto">Using the Prime Number Theorem, we previously estimated the probability of a <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit number
being prime to be about <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/319c8b6d7530cdbd9498afef1bfe2852.svg"><img alt="$1/(\ln(2)k).$" src="/sj-simmons/crypto/raw/main/svgs/319c8b6d7530cdbd9498afef1bfe2852.svg" valign="-4.109589000000009px" width="77.56875389999999pt" height="16.438356pt" style="max-width: 100%;"></a>  Suppose <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> has been chosen. We can now very roughly
estimate the probability, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d514f3df2bd7d47a9400ca5ce79a755d.svg"><img alt="$P,$" src="/sj-simmons/crypto/raw/main/svgs/d514f3df2bd7d47a9400ca5ce79a755d.svg" valign="-3.196350299999991px" width="15.57648179999999pt" height="14.42921205pt" style="max-width: 100%;"></a> that a <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit random <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> satifies <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd72555c3512084b4d21dcddff20d22e.svg"><img alt="$|p-q|&lt;2^{21.5+k/2}:$" src="/sj-simmons/crypto/raw/main/svgs/dd72555c3512084b4d21dcddff20d22e.svg" valign="-4.109588999999997px" width="139.720218pt" height="18.7050765pt" style="max-width: 100%;"></a></p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/edcd1f7ffae9d5979aa25b5a2abcc5a5.svg"><img alt="$$P = \frac{1}{\ln(2)k}\frac{2|p-q|}{2^k}=\frac{2^{22.5-k/2}}{\ln(2)k}.$$" src="/sj-simmons/crypto/raw/main/svgs/edcd1f7ffae9d5979aa25b5a2abcc5a5.svg" valign="0.0px" width="233.92454745pt" height="41.101633650000004pt" style="max-width: 100%;"></a></p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-6" class="anchor" aria-hidden="true" href="#exercise-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="6" dir="auto">
<li>If Robertson picked his <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> at random, how unlucky was he, given that he used 512-bit primes?  Asked differently, if one picks two 512-bit primes uniformly randomly, how likely is it that the resulting <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is factorable using less than a trillion steps in our implementation of Fermat factoring?  What if one uses 100-bit primes? 200-bit primes?</li>
</ol>
<p dir="auto">On page 40 of the appendix of the draft standard <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5-draft.pdf" rel="nofollow">DSS</a> (from <a href="https://csrc.nist.gov/publications/fips" rel="nofollow">NIST</a>), the requirement is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/898d9ade224f35c6ca1644093ecdc5e8.svg"><img alt="$|p-q|&gt;2^{nlen/2-100}.$" src="/sj-simmons/crypto/raw/main/svgs/898d9ade224f35c6ca1644093ecdc5e8.svg" valign="-4.109588999999997px" width="150.8793165pt" height="18.7050765pt" style="max-width: 100%;"></a>  Here <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/376ce454e223b514ba4111a8e79e6aa0.svg"><img alt="$nlen$" src="/sj-simmons/crypto/raw/main/svgs/376ce454e223b514ba4111a8e79e6aa0.svg" valign="0.0px" width="32.61623474999999pt" height="11.4155283pt" style="max-width: 100%;"></a> is the bit-length of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, so <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8d8c02f5af80bda3bea2bc832ff00a14.svg"><img alt="$nlen/2$" src="/sj-simmons/crypto/raw/main/svgs/8d8c02f5af80bda3bea2bc832ff00a14.svg" valign="-4.109589000000009px" width="49.05465509999999pt" height="16.438356pt" style="max-width: 100%;"></a> is
our <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>, the bit-length of each of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e25588bd69787207bf5da9706a3070f.svg"><img alt="$q.$" src="/sj-simmons/crypto/raw/main/svgs/2e25588bd69787207bf5da9706a3070f.svg" valign="-3.1963502999999895px" width="12.49431149999999pt" height="10.2739725pt" style="max-width: 100%;"></a> So, for 512-bit primes, they require that
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dcd90f790069cd4082c06b9bad48b1a9.svg"><img alt="$|p-q|&gt;2^{412}\approx 10^{124}.$" src="/sj-simmons/crypto/raw/main/svgs/dcd90f790069cd4082c06b9bad48b1a9.svg" valign="-4.109589000000009px" width="159.44049495pt" height="17.4904653pt" style="max-width: 100%;"></a> Comparing with our very rough estimates above, NIST clearly anticipates adversaries armed with state-of-the-art machinery and advanced computational skill.</p>
<h3 tabindex="-1" dir="auto"><a id="user-content-pseudo-random-bit-generation" class="anchor" aria-hidden="true" href="#pseudo-random-bit-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pseudo-random bit generation</h3>
<p dir="auto">True random number generation is challenging.  Hardware-based generators that rely on
time between emissions in radioactive decay or on atmospheric noise
(see <a href="https://www.random.org/" rel="nofollow">random.org</a>) use some physical source the data
from which has to be rendered bias-free and uncorrelated.  For cryptographic
applications the equipment must be tamper-proof and the generators themselves
must bar against manipulation or even observation by adversaries.</p>
<p dir="auto">Those challenges and more await designers of software-based generators that
harness user mouse movement or, say, system load as an initial source of randomness.
Running out of such randomness, along with a host of other potential weaknesses
including timing attacks, can lead to breaches of security.  Performant software
generators mix many sources of randomness, often using a
<em>cryptographic hash function</em> (discussed later).</p>
<p dir="auto">A theme in modern, complexity-based cryptography is that if the output of a PRNG cannot
be practically distinguished from a truly random sequence, then it <em>is</em> effectively
truly random.
To formalize this, cryptographers employ a few basic constructs.</p>
<p dir="auto">First, a <em>random bit generator</em> is a device or algorithm that
produces a list of bits (zeros or ones) in such a way that (1) a given position's bit being a zero
or one is independent of the value of any other position's bit, and (2) in each position, the value
one and zero occur with equal likelihood.</p>
<p dir="auto">From a random bit sequence, we could fashion a uniform random number generator that
takes values in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a276c274f0bbc26672b049818b59c0fe.svg"><img alt="$\{0, 1, \ldots, n\}$" src="/sj-simmons/crypto/raw/main/svgs/a276c274f0bbc26672b049818b59c0fe.svg" valign="-4.109589000000009px" width="86.57901284999998pt" height="16.438356pt" style="max-width: 100%;"></a> by collecting sequences consisting of
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e18562a5c452a3dbed7932a9f8cecdf.svg"><img alt="$\lfloor \log_2n \rfloor + 1$" src="/sj-simmons/crypto/raw/main/svgs/0e18562a5c452a3dbed7932a9f8cecdf.svg" valign="-4.109589000000009px" width="84.13621754999998pt" height="16.438356pt" style="max-width: 100%;"></a> bits and then
regard those as the binary representation of a decimal number (and ignore any number
that turns out to be larger than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55330dfdf24d21eb3637971c696f4436.svg"><img alt="$n).$" src="/sj-simmons/crypto/raw/main/svgs/55330dfdf24d21eb3637971c696f4436.svg" valign="-4.109589000000009px" width="20.82581654999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Next, let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9204ef16072dd8ab9a3430cb99a55ab2.svg"><img alt="$\{0,1\}^n$" src="/sj-simmons/crypto/raw/main/svgs/9204ef16072dd8ab9a3430cb99a55ab2.svg" valign="-4.109589000000009px" width="48.308744549999986pt" height="16.438356pt" style="max-width: 100%;"></a> denote the set of all strings of length <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, each character of which
is either <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/29632a9bf827ce0200454dd32fc3be82.svg"><img alt="$0$" src="/sj-simmons/crypto/raw/main/svgs/29632a9bf827ce0200454dd32fc3be82.svg" valign="0.0px" width="8.219209349999991pt" height="10.5936072pt" style="max-width: 100%;"></a> or <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a083f757cc7bf6ee27f93c7c57301c52.svg"><img alt="$1.$" src="/sj-simmons/crypto/raw/main/svgs/a083f757cc7bf6ee27f93c7c57301c52.svg" valign="0.0px" width="12.785434199999989pt" height="10.5936072pt" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Definition.</strong> A <em>pseudo-random bit generator</em> (PRBG) is a (deterministic) algorithm
that takes a truly random initial <em>seed</em> in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd464f1b586787ca7b2e3d1677b4606a.svg"><img alt="$\{0,1\}^k$" src="/sj-simmons/crypto/raw/main/svgs/dd464f1b586787ca7b2e3d1677b4606a.svg" valign="-4.109588999999991px" width="47.44874969999999pt" height="18.06580875pt" style="max-width: 100%;"></a> and outputs a
<em>pseudo-random bit sequence</em> in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e434ff8adbce40478c5d742f16515cb5.svg"><img alt="$\{0,1\}^\ell$" src="/sj-simmons/crypto/raw/main/svgs/e434ff8adbce40478c5d742f16515cb5.svg" valign="-4.109588999999991px" width="45.68506469999999pt" height="18.06580875pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/772cfa5be0f9ae28c7ed9a62d18eb147.svg"><img alt="$\ell \gg k$" src="/sj-simmons/crypto/raw/main/svgs/772cfa5be0f9ae28c7ed9a62d18eb147.svg" valign="-0.6427030500000053px" width="41.49533684999999pt" height="12.05823135pt" style="max-width: 100%;"></a> (that is, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg"><img alt="$\ell$" src="/sj-simmons/crypto/raw/main/svgs/d30a65b936d8007addc9c789d5a7ae49.svg" valign="0.0px" width="6.849367799999992pt" height="11.4155283pt" style="max-width: 100%;"></a> is
much greater than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fd94a07cc857fe32f93c4e2724a376fa.svg"><img alt="$k).$" src="/sj-simmons/crypto/raw/main/svgs/fd94a07cc857fe32f93c4e2724a376fa.svg" valign="-4.109589000000009px" width="20.03430329999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Notice straightaway that a PRBG has no chance of being uniformly random on <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e434ff8adbce40478c5d742f16515cb5.svg"><img alt="$\{0,1\}^\ell$" src="/sj-simmons/crypto/raw/main/svgs/e434ff8adbce40478c5d742f16515cb5.svg" valign="-4.109588999999991px" width="45.68506469999999pt" height="18.06580875pt" style="max-width: 100%;"></a>
since at most <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/91f4e50a1561b60d45e7079ca70f2ed4.svg"><img alt="$2^k$" src="/sj-simmons/crypto/raw/main/svgs/91f4e50a1561b60d45e7079ca70f2ed4.svg" valign="0.0px" width="15.48523844999999pt" height="13.95621975pt" style="max-width: 100%;"></a> elements of the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4210bd91bac363b5d4848d0155634610.svg"><img alt="$2^\ell$" src="/sj-simmons/crypto/raw/main/svgs/4210bd91bac363b5d4848d0155634610.svg" valign="0.0px" width="13.721553449999991pt" height="13.95621975pt" style="max-width: 100%;"></a> bit-strings in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e434ff8adbce40478c5d742f16515cb5.svg"><img alt="$\{0,1\}^\ell$" src="/sj-simmons/crypto/raw/main/svgs/e434ff8adbce40478c5d742f16515cb5.svg" valign="-4.109588999999991px" width="45.68506469999999pt" height="18.06580875pt" style="max-width: 100%;"></a> have a chance
of being selected, the others have likelihood zero of being selected.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-blum-blum-shub" class="anchor" aria-hidden="true" href="#blum-blum-shub"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Blum Blum Shub</h4>
<p dir="auto">Similarly to the RSA public-key encryption scheme, one can implement a PRBG as follows.</p>
<p dir="auto">Generate two distinct large primes, each congruent to 3 modulo 4. Suppose you get these 512-bit primes:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = 0x9072333555dff36dfea913a9ec05574996cd9ff582a938970d1013740291f65c80f0ea660acf6c9e8b50546732806f9ae52fa6c505de974030e713f06ab8beeb
q = 0x8dbade2d14b9602b54517e6ae519b59194b72878598530df5b021431b2bb7eeea49031fe81b0c337e851bab97956f722c22b3e562e76ace4b7fc2e75497172df"><pre><span class="pl-s1">p</span> <span class="pl-c1">=</span> <span class="pl-c1">0x9072333555dff36dfea913a9ec05574996cd9ff582a938970d1013740291f65c80f0ea660acf6c9e8b50546732806f9ae52fa6c505de974030e713f06ab8beeb</span>
<span class="pl-s1">q</span> <span class="pl-c1">=</span> <span class="pl-c1">0x8dbade2d14b9602b54517e6ae519b59194b72878598530df5b021431b2bb7eeea49031fe81b0c337e851bab97956f722c22b3e562e76ace4b7fc2e75497172df</span></pre></div>
<p dir="auto">Calculate <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg"><img alt="$n=pq$" src="/sj-simmons/crypto/raw/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a>:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0x4ff8568a0d39836d32dbf022675362b03ae6c566b8027ad9811b71cbe8c5fa37bc60188e4b915cc8de90d2c24ecba81c42f5bd601cc93c4c880ccb0539ed68c5435fc1cb83e1ddf840293eaaef32c46a3366bfd4fb907a1623c9fd5478f5b0ef749c40aebd56509b67e4b08c87d54f910f6fc8b310ce2d10c0cab35784adf4b5"><pre><span class="pl-c1">0x4ff8568a0d39836d32dbf022675362b03ae6c566b8027ad9811b71cbe8c5fa37bc60188e4b915cc8de90d2c24ecba81c42f5bd601cc93c4c880ccb0539ed68c5435fc1cb83e1ddf840293eaaef32c46a3366bfd4fb907a1623c9fd5478f5b0ef749c40aebd56509b67e4b08c87d54f910f6fc8b310ce2d10c0cab35784adf4b5</span></pre></div>
<p dir="auto">Now, delete or keep secret <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a>.  Assuming that factoring products of large primes remains intractable,
the following is a cryptographically-secure pseudo-random bit generator.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#blumblumshub.py
import random
import numlib

n = 0x4ff8568a0d39836d32dbf022675362b03ae6c566b8027ad9811b71cbe8c5fa37bc60188e4b915cc8de90d2c24ecba81c42f5bd601cc93c4c880ccb0539ed68c5435fc1cb83e1ddf840293eaaef32c46a3366bfd4fb907a1623c9fd5478f5b0ef749c40aebd56509b67e4b08c87d54f910f6fc8b310ce2d10c0cab35784adf4b5

state = random.randint(1,n-1)
while numlib.gcd(state, n) != 1:
    state = random.randint(1,n-1)

state = state  * state  % n

def prbg_():
    global state
    state  = state  * state  % n
    return state  % 2

def prbg(length):
    bitstring = ''
    for _ in range(length):
        bitstring += str(prbg_())
    return bitstring"><pre><span class="pl-c">#blumblumshub.py</span>
<span class="pl-k">import</span> <span class="pl-s1">random</span>
<span class="pl-k">import</span> <span class="pl-s1">numlib</span>

<span class="pl-s1">n</span> <span class="pl-c1">=</span> <span class="pl-c1">0x4ff8568a0d39836d32dbf022675362b03ae6c566b8027ad9811b71cbe8c5fa37bc60188e4b915cc8de90d2c24ecba81c42f5bd601cc93c4c880ccb0539ed68c5435fc1cb83e1ddf840293eaaef32c46a3366bfd4fb907a1623c9fd5478f5b0ef749c40aebd56509b67e4b08c87d54f910f6fc8b310ce2d10c0cab35784adf4b5</span>

<span class="pl-s1">state</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">randint</span>(<span class="pl-c1">1</span>,<span class="pl-s1">n</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)
<span class="pl-k">while</span> <span class="pl-s1">numlib</span>.<span class="pl-en">gcd</span>(<span class="pl-s1">state</span>, <span class="pl-s1">n</span>) <span class="pl-c1">!=</span> <span class="pl-c1">1</span>:
    <span class="pl-s1">state</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">randint</span>(<span class="pl-c1">1</span>,<span class="pl-s1">n</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)

<span class="pl-s1">state</span> <span class="pl-c1">=</span> <span class="pl-s1">state</span>  <span class="pl-c1">*</span> <span class="pl-s1">state</span>  <span class="pl-c1">%</span> <span class="pl-s1">n</span>

<span class="pl-k">def</span> <span class="pl-en">prbg_</span>():
    <span class="pl-k">global</span> <span class="pl-s1">state</span>
    <span class="pl-s1">state</span>  <span class="pl-c1">=</span> <span class="pl-s1">state</span>  <span class="pl-c1">*</span> <span class="pl-s1">state</span>  <span class="pl-c1">%</span> <span class="pl-s1">n</span>
    <span class="pl-k">return</span> <span class="pl-s1">state</span>  <span class="pl-c1">%</span> <span class="pl-c1">2</span>

<span class="pl-k">def</span> <span class="pl-en">prbg</span>(<span class="pl-s1">length</span>):
    <span class="pl-s1">bitstring</span> <span class="pl-c1">=</span> <span class="pl-s">''</span>
    <span class="pl-k">for</span> <span class="pl-s1">_</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-s1">length</span>):
        <span class="pl-s1">bitstring</span> <span class="pl-c1">+=</span> <span class="pl-en">str</span>(<span class="pl-en">prbg_</span>())
    <span class="pl-k">return</span> <span class="pl-s1">bitstring</span></pre></div>
<p dir="auto">To use this, do something like:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; from blumblumshub import prbg
&gt;&gt;&gt; prbg(100)"><pre>&gt;&gt;&gt; <span class="pl-k">from</span> blumblumshub <span class="pl-k">import</span> prbg
&gt;&gt;&gt; prbg(<span class="pl-c1">100</span>)</pre></div>
<p dir="auto">Example output is:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="1111111000101111100110111111000011011000011101111000100110001010001010011111000100010001010001001010"><pre><span class="pl-c1">1111111000101111100110111111000011011000011101111000100110001010001010011111000100010001010001001010</span></pre></div>
<p dir="auto">The "random" bit-string starts with 7 ones and, soon after, a run of 5 ones, then 6 ones.  Maybe
there is something wrong with our PRBG.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-hammer-projects-hammer-1" class="anchor" aria-hidden="true" href="#hammer-projects-hammer-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji> Projects <g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji></h4>
<ol start="7" dir="auto">
<li>
<p dir="auto">Write a program that collects, say, 10,000 zeros and ones from an instance of our Blum Blum
Shub PRBG and tally up the total number of ones that occur.
There likely won't be exactly 5000 ones, which is not cause for alarm, of course. How do
we analyze this? Formulate and carry out an appropriate statistical test. How does our
Blum Blum Shub PRBG perform?</p>
</li>
<li>
<p dir="auto">Formulate and perform a statistical "runs" test which analyzes appropriately the length
of <em>runs</em> in samples bit-strings. How did our PRBG do?</p>
<p dir="auto">Here a <em>run</em> refers to a substring consisting of consecutive zeros (called a <em>gap</em>) or
of successive ones (called a <em>block</em>).</p>
</li>
<li>
<p dir="auto">Apply the test above to our final LCG from before — you might want to construct
some other LCG(s). How to do they perform?</p>
<p dir="auto">Note that you don't want to simply take the outputs modulo 2 on our final LCG. That
LCG has modulus a power of 2, so the final bit just alternates (as we saw explicitly).
But you could do something different, like output the parity of the numbers, or take
some high-significance bit instead of the lowest.  Or you use a different modulus
but then you'd likely want to ensure that your LCG is full period and performs well
on other test such as the chi-squared and spectral tests, and so on.</p>
</li>
</ol>
<p dir="auto">Previously, we used Python's <strong>randint</strong> in our program to generate <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit primes.
Then we used that program to generate primes for our Blum Blum Shub PRBG. Now,
we could use our Blum Blum Shub PRBG to provably uniformly generate a <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit integer
as follows.</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; blumblumshub import prbg
&gt;&gt;&gt; k = 200
&gt;&gt;&gt; int(prbg(k), 2) # 1475114190501915896846876012970414686611326105418089001441857"><pre>&gt;&gt;&gt; blumblumshub <span class="pl-k">import</span> prbg
&gt;&gt;&gt; k <span class="pl-k">=</span> <span class="pl-c1">200</span>
&gt;&gt;&gt; <span class="pl-c1">int</span>(prbg(k), <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> 1475114190501915896846876012970414686611326105418089001441857</span></pre></div>
<p dir="auto">Cryptographers do not often use the Blum Blum Shub PRBG in practice, for two main
(and related) reasons. First, Blum Blum Shub is in danger of being unviably slow, even when
generating a modest number of random bits; second, generating bits more efficiently
can jeopardize security.</p>
<p dir="auto">Let us perform a quick and dirty assessment of the first issue (comparing with Python's
<strong>randint</strong>). Run the following from your commandline:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="simmons&gt; python3 -m timeit -s 'import random; k = 2048' 'random.randint(2**k, 2**(k+1))'
100000 loops, best of 5: 3.7 usec per loop"><pre>simmons<span class="pl-k">&gt;</span> python3 -m timeit -s <span class="pl-s"><span class="pl-pds">'</span>import random; k = 2048<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>random.randint(2**k, 2**(k+1))<span class="pl-pds">'</span></span>
100000 loops, best of 5: 3.7 usec per loop</pre></div>
<p dir="auto">Here we are using Python's (builtin) <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow">timeit</a>
module. The output, on Simmons' Core-i5 office machine, is shown.</p>
<p dir="auto">Next run this (in the same directory as <strong>blumblubmshub.py</strong>:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="simmons&gt; python3 -m timeit -s 'from blumblumshub import prbg; k = 2048' 'prbg(k)'
50 loops, best of 5: 6.35 msec per loop"><pre>simmons<span class="pl-k">&gt;</span> python3 -m timeit -s <span class="pl-s"><span class="pl-pds">'</span>from blumblumshub import prbg; k = 2048<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>prbg(k)<span class="pl-pds">'</span></span>
50 loops, best of 5: 6.35 msec per loop</pre></div>
<p dir="auto">Python's <strong>randint</strong> is about 2000 times faster (partly due, no doubt, to C byte-code).
Now, looking back at our code, we are currently only drawing a single bit for each
call to <strong>prbg_</strong>.  One could try drawing more bits each pass but then one might have
to increase the size of the modulus to maintain security; each iteration,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9cfb757e7a532bd2b60bedda7eecd0ed.svg"><img alt="$O(\log(\log(n)))$" src="/sj-simmons/crypto/raw/main/svgs/9cfb757e7a532bd2b60bedda7eecd0ed.svg" valign="-4.109589000000009px" width="103.68442259999999pt" height="16.438356pt" style="max-width: 100%;"></a> bits can be extracted, where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is modulus (see, for example,
<a href="#references2">Sidorenko, Schoenmakers</a>).</p>
<h3 tabindex="-1" dir="auto"><a id="user-content-algebraic-formulation-of-rsa" class="anchor" aria-hidden="true" href="#algebraic-formulation-of-rsa"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algebraic formulation of RSA</h3>
<p dir="auto">Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg"><img alt="$n=pq$" src="/sj-simmons/crypto/raw/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a> be the product of two large primes, and let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> be relatively prime to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44a813ff292c05aaf762724c775fdc40.svg"><img alt="$\phi(n)=(p-1)(q-1)$" src="/sj-simmons/crypto/raw/main/svgs/44a813ff292c05aaf762724c775fdc40.svg" valign="-4.109589000000009px" width="152.75480549999997pt" height="16.438356pt" style="max-width: 100%;"></a>, as
is the requirement in the RSA scheme. Then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is naturally a unit in the ring <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ca13f370ea412c16d503fe9cfd115bd6.svg"><img alt="$\mathbb{Z}/\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/ca13f370ea412c16d503fe9cfd115bd6.svg" valign="-4.109589000000009px" width="51.62500364999998pt" height="16.438356pt" style="max-width: 100%;"></a> or, to
say the same thing, an element of the group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/59b5e95b97ab12ffdab142041f543b6c.svg"><img alt="$(\mathbb{Z}/\phi(n))^*.$" src="/sj-simmons/crypto/raw/main/svgs/59b5e95b97ab12ffdab142041f543b6c.svg" valign="-4.109589000000009px" width="76.53375014999999pt" height="16.438356pt" style="max-width: 100%;"></a> If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is your RSA encrypting
exponent, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/45e8b8efc8391e14e6380609da2d6ac5.svg"><img alt="$d=e^{-1}\in(\mathbb{Z}/\phi(n))^* $" src="/sj-simmons/crypto/raw/main/svgs/45e8b8efc8391e14e6380609da2d6ac5.svg" valign="-4.109589000000009px" width="147.01295894999998pt" height="17.4904653pt" style="max-width: 100%;"></a> is the exponent that you use to decrypt.</p>
<p dir="auto">Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> be an element of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b2db6c8686053451d402312789bf8098.svg"><img alt="$\mathbb{Z}/n.$" src="/sj-simmons/crypto/raw/main/svgs/b2db6c8686053451d402312789bf8098.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a>  Then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b01d456ec4b11056a006a150293a1169.svg"><img alt="$m\mapsto m^e$" src="/sj-simmons/crypto/raw/main/svgs/b01d456ec4b11056a006a150293a1169.svg" valign="0.0px" width="60.673720799999984pt" height="10.91968515pt" style="max-width: 100%;"></a> defines a function
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8b369b20e937a35c3d23597934ff4182.svg"><img alt="$\mathbb{Z}/n\rightarrow \mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/8b369b20e937a35c3d23597934ff4182.svg" valign="-4.109589000000009px" width="83.66065289999999pt" height="16.438356pt" style="max-width: 100%;"></a> with inverse <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c4a4cd79e765ef3ab8c0753af2c53992.svg"><img alt="$m\mapsto m^d.$" src="/sj-simmons/crypto/raw/main/svgs/c4a4cd79e765ef3ab8c0753af2c53992.svg" valign="0.0px" width="66.66802064999999pt" height="13.95621975pt" style="max-width: 100%;"></a> Since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b01d456ec4b11056a006a150293a1169.svg"><img alt="$m\mapsto m^e$" src="/sj-simmons/crypto/raw/main/svgs/b01d456ec4b11056a006a150293a1169.svg" valign="0.0px" width="60.673720799999984pt" height="10.91968515pt" style="max-width: 100%;"></a>
is an invertible mapping, it is a permutation of (the set) <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b2db6c8686053451d402312789bf8098.svg"><img alt="$\mathbb{Z}/n.$" src="/sj-simmons/crypto/raw/main/svgs/b2db6c8686053451d402312789bf8098.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a>
If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> represents our plaintext message, then our ciphertext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e5df490f9386a96b3f4e66c5040e069a.svg"><img alt="$m^e$" src="/sj-simmons/crypto/raw/main/svgs/e5df490f9386a96b3f4e66c5040e069a.svg" valign="0.0px" width="20.670018599999988pt" height="10.91968515pt" style="max-width: 100%;"></a> is just the image of
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> under this permutation. Moreover, decrypting our ciphertext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1436d3cf9e0a368740082b75397824b9.svg"><img alt="$c=m^e$" src="/sj-simmons/crypto/raw/main/svgs/1436d3cf9e0a368740082b75397824b9.svg" valign="0.0px" width="49.70145344999999pt" height="10.91968515pt" style="max-width: 100%;"></a> is just applying
the inverse permutation, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3a63a97b6acc27f7a4bf766402523ff4.svg"><img alt="$m\mapsto m^d,$" src="/sj-simmons/crypto/raw/main/svgs/3a63a97b6acc27f7a4bf766402523ff4.svg" valign="-3.1963519499999897px" width="66.66802064999999pt" height="17.1525717pt" style="max-width: 100%;"></a> to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/857431164e0fb928019e5dcd76861f58.svg"><img alt="$c.$" src="/sj-simmons/crypto/raw/main/svgs/857431164e0fb928019e5dcd76861f58.svg" valign="0.0px" width="11.680028249999989pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<h3 tabindex="-1" dir="auto"><a id="user-content-more-attacks" class="anchor" aria-hidden="true" href="#more-attacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More attacks</h3>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> Plain RSA is inherently insecure and admits all manner of attack; only a few are outlined below; c.f., <a href="#references">Boneh</a> and some of the citations <a href="https://www.researchgate.net/publication/331390347_Forty_years_of_attacks_on_the_RSA_cryptosystem_A_brief_survey" rel="nofollow">here</a>.</p>
<p dir="auto">Anyone familiar with pop culture in the 80s might have guessed the numerical plaintext message in
the Arthur-to-Marvin Challenge above, and then verified correctness by simply encrypting that number
and verifying that it matches the ciphertext. Alternatively, if an attacker guessed correctly that
the plaintext was likely a smallish number, then they could encrypt every number less that say
1,000,000 and check if they hit the ciphertext.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-7" class="anchor" aria-hidden="true" href="#exercise-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="10" dir="auto">
<li>Write a tiny program to mount this sort of attack and uncover the first plaintext message
that Arthur sends to Marvin in <a href="#arthurmarvin">this problem above</a>. Why doesn't this method
reveal Arthur's second message?</li>
</ol>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> are small, and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is large, then an attacker might be able to decrypt <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e5df490f9386a96b3f4e66c5040e069a.svg"><img alt="$m^e$" src="/sj-simmons/crypto/raw/main/svgs/e5df490f9386a96b3f4e66c5040e069a.svg" valign="0.0px" width="20.670018599999988pt" height="10.91968515pt" style="max-width: 100%;"></a> by
simply taking the non-modular <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3ad6531a8759b4dace07a79f6bfea026.svg"><img alt="$e\text{th}$" src="/sj-simmons/crypto/raw/main/svgs/3ad6531a8759b4dace07a79f6bfea026.svg" valign="0.0px" width="23.17930229999999pt" height="11.4155283pt" style="max-width: 100%;"></a> root.  More generally, an attacker who can significantly narrow
the set of possible messages could potentially mount a brute-force attack involving encrypting
a bunch of possible messages and checking for a match with the ciphertext.</p>
<p dir="auto">The protocol would have to be modified, were the RSA scheme to even have a chance of being
equally secure for all messages.  Some flavor of <em>padding</em> (discussed below) is in order.</p>
<p dir="auto">Thinking about the Plain RSA setup in algebraic terms is simple and natural, but the
tight, algebraic structure with leads to serious weakness, cryptographically.</p>
<p dir="auto">Notice that of the  <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/50c0357224674ab662b8ea5e5ca3eb8a.svg"><img alt="$n!$" src="/sj-simmons/crypto/raw/main/svgs/50c0357224674ab662b8ea5e5ca3eb8a.svg" valign="0.0px" width="14.433101099999991pt" height="11.4155283pt" style="max-width: 100%;"></a> permutations of the set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a>, only <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44a813ff292c05aaf762724c775fdc40.svg"><img alt="$\phi(n)=(p-1)(q-1)$" src="/sj-simmons/crypto/raw/main/svgs/44a813ff292c05aaf762724c775fdc40.svg" valign="-4.109589000000009px" width="152.75480549999997pt" height="16.438356pt" style="max-width: 100%;"></a>
are of the form <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b01d456ec4b11056a006a150293a1169.svg"><img alt="$m\mapsto m^e$" src="/sj-simmons/crypto/raw/main/svgs/b01d456ec4b11056a006a150293a1169.svg" valign="0.0px" width="60.673720799999984pt" height="10.91968515pt" style="max-width: 100%;"></a>.  If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> are large then this is
still a very large <em>key space</em>.  However, suppose that one is extremely unlucky
and picks <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> in such a way that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2597d9d9033dc4d5f1c2d8e9f3d9ddfb.svg"><img alt="$d = e^{-1}$" src="/sj-simmons/crypto/raw/main/svgs/2597d9d9033dc4d5f1c2d8e9f3d9ddfb.svg" valign="0.0px" width="54.95429939999998pt" height="13.380876299999999pt" style="max-width: 100%;"></a> is small (as a positive integer less than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55330dfdf24d21eb3637971c696f4436.svg"><img alt="$n).$" src="/sj-simmons/crypto/raw/main/svgs/55330dfdf24d21eb3637971c696f4436.svg" valign="-4.109589000000009px" width="20.82581654999999pt" height="16.438356pt" style="max-width: 100%;"></a>
Then an attacker who intercepts the ciphertext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e5df490f9386a96b3f4e66c5040e069a.svg"><img alt="$m^e$" src="/sj-simmons/crypto/raw/main/svgs/e5df490f9386a96b3f4e66c5040e069a.svg" valign="0.0px" width="20.670018599999988pt" height="10.91968515pt" style="max-width: 100%;"></a> need only compute increasing powers
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b9d1d1592a14673e41cc8bff7aa70817.svg"><img alt="$m^em^e=(m^e)^2=m^{2e}$" src="/sj-simmons/crypto/raw/main/svgs/b9d1d1592a14673e41cc8bff7aa70817.svg" valign="-4.109589000000009px" width="155.69347034999998pt" height="17.4904653pt" style="max-width: 100%;"></a>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/24a7fa6694aa0b5ebb0acf7f1554c091.svg"><img alt="$(m^e)^2m^e=(m^e)^3=m^{3e}$" src="/sj-simmons/crypto/raw/main/svgs/24a7fa6694aa0b5ebb0acf7f1554c091.svg" valign="-4.109589000000009px" width="175.85336339999998pt" height="17.4904653pt" style="max-width: 100%;"></a>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e378afcd7cae11e7306c61a9c35bf6cf.svg"><img alt="$\ldots$" src="/sj-simmons/crypto/raw/main/svgs/e378afcd7cae11e7306c61a9c35bf6cf.svg" valign="0.0px" width="19.17798959999999pt" height="7.0776222pt" style="max-width: 100%;"></a> until they reach
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ef446cdc32bf02e6cb4aea9feaf7a9b6.svg"><img alt="$(m^e)^d=m^{de}=m.$" src="/sj-simmons/crypto/raw/main/svgs/ef446cdc32bf02e6cb4aea9feaf7a9b6.svg" valign="-4.109588999999991px" width="133.11192509999998pt" height="18.06580875pt" style="max-width: 100%;"></a> (This is the same as trying to brute-force solve
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bc03a971d82bdd35482d26b7bb3aeebe.svg"><img alt="$ed = 1$" src="/sj-simmons/crypto/raw/main/svgs/bc03a971d82bdd35482d26b7bb3aeebe.svg" valign="0.0px" width="46.34694074999999pt" height="11.4155283pt" style="max-width: 100%;"></a> modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg"><img alt="$\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg" valign="-4.109589000000009px" width="32.44685399999999pt" height="16.438356pt" style="max-width: 100%;"></a> for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7194e1d4b173c3ff8fec4422c3f90097.svg"><img alt="$d,$" src="/sj-simmons/crypto/raw/main/svgs/7194e1d4b173c3ff8fec4422c3f90097.svg" valign="-3.1963503000000055px" width="13.12218764999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> but that is not directly in play since the attacker doesn't
know <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1f86e92ecabc84d928d62d94b317f6b7.svg"><img alt="$\phi(n).)$" src="/sj-simmons/crypto/raw/main/svgs/1f86e92ecabc84d928d62d94b317f6b7.svg" valign="-4.109589000000009px" width="43.40579429999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">So, an attacker could eventually produce <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> by taking higher powers
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0d9db41a007a7a0bc4a784e5c77ea18d.svg"><img alt="$c^\ell = (m^e)^\ell=m^{e\ell},$" src="/sj-simmons/crypto/raw/main/svgs/0d9db41a007a7a0bc4a784e5c77ea18d.svg" valign="-4.109588999999991px" width="129.4354248pt" height="18.06580875pt" style="max-width: 100%;"></a> but how would they know when to stop?  At each step,
they could check whether <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/31f29c08a30f1cf5e71249ea5e13cb87.svg"><img alt="$(c^\ell)^e=c;$" src="/sj-simmons/crypto/raw/main/svgs/31f29c08a30f1cf5e71249ea5e13cb87.svg" valign="-4.109588999999991px" width="66.87997469999999pt" height="18.06580875pt" style="max-width: 100%;"></a> if so, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c1b42e45d7c92ed892a81b4c88c15862.svg"><img alt="$m=c^\ell.$" src="/sj-simmons/crypto/raw/main/svgs/c1b42e45d7c92ed892a81b4c88c15862.svg" valign="0.0px" width="54.35502104999998pt" height="13.95621975pt" style="max-width: 100%;"></a> Alternatively, they
could continually multiply <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5bcaf5cc289f68a9c90676a2849d44ec.svg"><img alt="$c^e$" src="/sj-simmons/crypto/raw/main/svgs/5bcaf5cc289f68a9c90676a2849d44ec.svg" valign="0.0px" width="13.350722549999988pt" height="10.91968515pt" style="max-width: 100%;"></a> by itself, obtaining <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/438f1212a56075e55741b2de07c1df92.svg"><img alt="$(c^{e})^\ell=(c^{\ell})^e,$" src="/sj-simmons/crypto/raw/main/svgs/438f1212a56075e55741b2de07c1df92.svg" valign="-4.109588999999991px" width="93.0484863pt" height="18.06580875pt" style="max-width: 100%;"></a> until
they get <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/857431164e0fb928019e5dcd76861f58.svg"><img alt="$c.$" src="/sj-simmons/crypto/raw/main/svgs/857431164e0fb928019e5dcd76861f58.svg" valign="0.0px" width="11.680028249999989pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/78289bd1e9f7ded7c6346a6d3a9b79a7.svg"><img alt="$ed=1$" src="/sj-simmons/crypto/raw/main/svgs/78289bd1e9f7ded7c6346a6d3a9b79a7.svg" valign="0.0px" width="46.34694074999999pt" height="11.4155283pt" style="max-width: 100%;"></a> in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> then, as positive integers less than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/73472f7d0ffb93f0386395e64454a83a.svg"><img alt="$ed &gt; n;$" src="/sj-simmons/crypto/raw/main/svgs/73472f7d0ffb93f0386395e64454a83a.svg" valign="-3.1963503000000055px" width="52.56083249999998pt" height="14.611878599999999pt" style="max-width: 100%;"></a>
hence <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cb2c771bcdae95cd8e334b40637c0988.svg"><img alt="$d &gt; \lfloor n/e \rfloor.$" src="/sj-simmons/crypto/raw/main/svgs/cb2c771bcdae95cd8e334b40637c0988.svg" valign="-4.109589000000009px" width="75.39195179999999pt" height="16.438356pt" style="max-width: 100%;"></a>
Now, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> are fairly large k-bit primes, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg"><img alt="$\phi(n)$" src="/sj-simmons/crypto/raw/main/svgs/f4bdf2149704f6b9d6d0068d05021138.svg" valign="-4.109589000000009px" width="32.44685399999999pt" height="16.438356pt" style="max-width: 100%;"></a> are 2k-bit numbers;
and, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2b862298f3fc4340cc8116e95936f4a7.svg"><img alt="$e=65337,$" src="/sj-simmons/crypto/raw/main/svgs/2b862298f3fc4340cc8116e95936f4a7.svg" valign="-3.196350299999994px" width="75.2340402pt" height="13.789957499999998pt" style="max-width: 100%;"></a> which is a 16-bit number, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> must be at least (2k-16)-bits.  An attacker
could start computing incremental powers <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/670af095a8c2fcc76f4d96ffa385ad2a.svg"><img alt="$(m^e)^\ell=m^{\ell e}$" src="/sj-simmons/crypto/raw/main/svgs/670af095a8c2fcc76f4d96ffa385ad2a.svg" valign="-4.109588999999991px" width="88.69160684999999pt" height="18.06580875pt" style="max-width: 100%;"></a> starting from <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4b7f7bb2695f01f4e4800c44c84aa83c.svg"><img alt="$\ell=2^{2k-16}.$" src="/sj-simmons/crypto/raw/main/svgs/4b7f7bb2695f01f4e4800c44c84aa83c.svg" valign="0.0px" width="79.57199909999999pt" height="13.95621975pt" style="max-width: 100%;"></a>
The (uniform) likelihood of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> being one of the first, say, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1df3384987fc3eba4ba24d84956ed539.svg"><img alt="$2^{100}$" src="/sj-simmons/crypto/raw/main/svgs/1df3384987fc3eba4ba24d84956ed539.svg" valign="0.0px" width="27.87685064999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> integers in
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/91db863b80f16fd065994500d6809299.svg"><img alt="$[2^{2k-16}, 2^{2k}]$" src="/sj-simmons/crypto/raw/main/svgs/91db863b80f16fd065994500d6809299.svg" valign="-4.109588999999991px" width="85.53680354999999pt" height="18.06580875pt" style="max-width: 100%;"></a> is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fd0d6b70d6281088afe54c98ebea404b.svg"><img alt="$1/2^{2k-116}.$" src="/sj-simmons/crypto/raw/main/svgs/fd0d6b70d6281088afe54c98ebea404b.svg" valign="-4.109588999999991px" width="73.79596289999998pt" height="18.06580875pt" style="max-width: 100%;"></a> Hence, 100-bit or larger primes should suffice to
prohibit this sort of naive attack.</p>
<p dir="auto">The point of the previous discussion, in algebraic terms, is that, if large enough primes are
used, then the cyclic subgroup (of the permutation group of the set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a>) generated
by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b01d456ec4b11056a006a150293a1169.svg"><img alt="$m\mapsto m^e$" src="/sj-simmons/crypto/raw/main/svgs/b01d456ec4b11056a006a150293a1169.svg" valign="0.0px" width="60.673720799999984pt" height="10.91968515pt" style="max-width: 100%;"></a> likely has very large order. An attacker cannot simply iterate the
permutation to that order; rather, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> is must be know which requires knowledge of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e25588bd69787207bf5da9706a3070f.svg"><img alt="$q.$" src="/sj-simmons/crypto/raw/main/svgs/2e25588bd69787207bf5da9706a3070f.svg" valign="-3.1963502999999895px" width="12.49431149999999pt" height="10.2739725pt" style="max-width: 100%;"></a></p>
<h4 tabindex="-1" dir="auto"><a id="user-content-chosen-ciphertext-attack" class="anchor" aria-hidden="true" href="#chosen-ciphertext-attack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Chosen-ciphertext attack</h4>
<p dir="auto">The algebraic nature of the RSA scheme leads to another flavor of attack, a
<em>chosen ciphertext attack</em>.
This exploit hinges on the fact that the map <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b01d456ec4b11056a006a150293a1169.svg"><img alt="$m\mapsto m^e$" src="/sj-simmons/crypto/raw/main/svgs/b01d456ec4b11056a006a150293a1169.svg" valign="0.0px" width="60.673720799999984pt" height="10.91968515pt" style="max-width: 100%;"></a> is a monoid homomorphism
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8b369b20e937a35c3d23597934ff4182.svg"><img alt="$\mathbb{Z}/n\rightarrow \mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/8b369b20e937a35c3d23597934ff4182.svg" valign="-4.109589000000009px" width="83.66065289999999pt" height="16.438356pt" style="max-width: 100%;"></a> with respect to multiplication in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d674892121fded6bbe718fc852b8a64.svg"><img alt="$\mathbb{Z}/n;$" src="/sj-simmons/crypto/raw/main/svgs/2d674892121fded6bbe718fc852b8a64.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a>
that is, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b2b18f3b61342ed10e037dd116ce037f.svg"><img alt="$m'm\mapsto (m'm)^e=(m')^em^e.$" src="/sj-simmons/crypto/raw/main/svgs/b2b18f3b61342ed10e037dd116ce037f.svg" valign="-4.109589px" width="199.2359985pt" height="16.4676534pt" style="max-width: 100%;"></a></p>
<p dir="auto">Suppose that the attacker has intercepted <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c21223909224afca54749906c4e29c91.svg"><img alt="$c=m^e,$" src="/sj-simmons/crypto/raw/main/svgs/c21223909224afca54749906c4e29c91.svg" valign="-3.1963519500000044px" width="55.08957464999999pt" height="14.116037099999998pt" style="max-width: 100%;"></a> and assume that the attacker has the ability to
obtain the plaintext associated to any ciphertext (except c) chosen by them (the attacker).</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-zap-challenge-zap" class="anchor" aria-hidden="true" href="#zap-challenge-zap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji> Challenge <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji></h4>
<p dir="auto">Harshad's RSA public-key is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg"><img alt="$\{n, e\}$" src="/sj-simmons/crypto/raw/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg" valign="-4.109589000000009px" width="41.265316949999985pt" height="16.438356pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9031a800c7cdc076f354cc5ff9cafbb8.svg"><img alt="$e=65537$" src="/sj-simmons/crypto/raw/main/svgs/9031a800c7cdc076f354cc5ff9cafbb8.svg" valign="0.0px" width="70.66781535pt" height="10.5936072pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0x799c5302bf9d09bf7b39874f23880bf5102d9f11a792c07aa822e9cd1289c198378e30eda452c88d46d6bc2f3393834c9252ff79d6cb53e876011acbb49b0ba305bbc1ce204cfb2c7c0610051c63752d9b8cd8e8a16e6b92dda67242ee8e8e62bccd87250638d9d751c565917bef78b7b929a7a9900f06ab66962776260900fd"><pre><span class="pl-c1">0x799c5302bf9d09bf7b39874f23880bf5102d9f11a792c07aa822e9cd1289c198378e30eda452c88d46d6bc2f3393834c9252ff79d6cb53e876011acbb49b0ba305bbc1ce204cfb2c7c0610051c63752d9b8cd8e8a16e6b92dda67242ee8e8e62bccd87250638d9d751c565917bef78b7b929a7a9900f06ab66962776260900fd</span></pre></div>
<p dir="auto">Suppose that Bloem discovers a very special number, encrypts it using Harshad's public key, and sends the resulting ciphertext to Harshad.  You, of course, intercept the ciphertext, which is:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0xa8713dfdd0acb832e983ad568087001493afb8de806d45dedcf8cc2f35607e3aa7bf9fed857ee35aeb3c880962dbf5491b596528908007f1c89504c03b948917704fe29eef5afe934a9bcd5e7334daa994584109d704ee8bd6d3733323d7ce14e5f7bfd63e92441206e95d8316b8c25d8093c7afc219032ef56d354830c81f2"><pre><span class="pl-c1">0xa8713dfdd0acb832e983ad568087001493afb8de806d45dedcf8cc2f35607e3aa7bf9fed857ee35aeb3c880962dbf5491b596528908007f1c89504c03b948917704fe29eef5afe934a9bcd5e7334daa994584109d704ee8bd6d3733323d7ce14e5f7bfd63e92441206e95d8316b8c25d8093c7afc219032ef56d354830c81f2</span></pre></div>
<ol start="11" dir="auto">
<li>Next, you use Harshad's public key to encrypt, say, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/91688f5ff10555c58f3052647d17ef46.svg"><img alt="$m'=142857$" src="/sj-simmons/crypto/raw/main/svgs/91688f5ff10555c58f3052647d17ef46.svg" valign="0.0px" width="90.27786239999999pt" height="12.358064399999998pt" style="max-width: 100%;"></a> obtaining <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3ce681234d1b2ad17008503143e3ed8b.svg"><img alt="$c'$" src="/sj-simmons/crypto/raw/main/svgs/3ce681234d1b2ad17008503143e3ed8b.svg" valign="0.0px" width="10.90376594999999pt" height="12.358064399999998pt" style="max-width: 100%;"></a>. Then you trick Harshad into deciphering the product <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a3555722ecd81027239508a8d75bd575.svg"><img alt="$c'c$" src="/sj-simmons/crypto/raw/main/svgs/a3555722ecd81027239508a8d75bd575.svg" valign="0.0px" width="18.839483849999993pt" height="12.358064399999998pt" style="max-width: 100%;"></a> and sending the resulting plaintext to you.  If he sends you <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7803dcdee68289fd1b7f60f7ce8c8016.svg"><img alt="$288071548868146555184504832$" src="/sj-simmons/crypto/raw/main/svgs/7803dcdee68289fd1b7f60f7ce8c8016.svg" valign="0.0px" width="221.91865409999997pt" height="10.5936072pt" style="max-width: 100%;"></a>, how can you now compute Bloem's original plaintext?  What is Bloem's original plaintext?</li>
</ol>
<p dir="auto">In algebraic terms, the attacker picks any non-identity element <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/21e3ec33ebbafec11263001d6e76a59a.svg"><img alt="$m'\in (\mathbb{Z}/n)^*$" src="/sj-simmons/crypto/raw/main/svgs/21e3ec33ebbafec11263001d6e76a59a.svg" valign="-4.109589px" width="87.70176855pt" height="16.4676534pt" style="max-width: 100%;"></a> and encrypts
it using the public key <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg"><img alt="$\{n, e\}$" src="/sj-simmons/crypto/raw/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg" valign="-4.109589000000009px" width="41.265316949999985pt" height="16.438356pt" style="max-width: 100%;"></a> obtaining <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/746fed1486569b6e9ad56e48833ec0d3.svg"><img alt="$c'=(m')^e.$" src="/sj-simmons/crypto/raw/main/svgs/746fed1486569b6e9ad56e48833ec0d3.svg" valign="-4.109589px" width="77.09875799999999pt" height="16.4676534pt" style="max-width: 100%;"></a>   Then the attacker somehow tricks Harshad
into decrypting <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1b658c365ea1e2931cadbd60058f850f.svg"><img alt="$c'c \in \mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/1b658c365ea1e2931cadbd60058f850f.svg" valign="-4.109589px" width="67.97564729999998pt" height="16.4676534pt" style="max-width: 100%;"></a> where, of course, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1436d3cf9e0a368740082b75397824b9.svg"><img alt="$c=m^e$" src="/sj-simmons/crypto/raw/main/svgs/1436d3cf9e0a368740082b75397824b9.svg" valign="0.0px" width="49.70145344999999pt" height="10.91968515pt" style="max-width: 100%;"></a>, which can then easily be used to
compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6a0d5b419381f23bef964dd9f443238f.svg"><img alt="$m'$" src="/sj-simmons/crypto/raw/main/svgs/6a0d5b419381f23bef964dd9f443238f.svg" valign="0.0px" width="18.223061999999988pt" height="12.358064399999998pt" style="max-width: 100%;"></a> is invertible.</p>
<p dir="auto">It may seem disingenuous to imagine the target of an attack cooperating with the attacker by decrypting
whatever the attacker wishes. In fact, complexity-based cryptography often assumes that an attacker
has access to an <em>oracle</em> that does exactly that — decrypt anything the attacker wishes
(besides the ciphertext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> itself).  The idea is to devise protocols that can withstand even
so-called <em>chosen-ciphertext attacks</em>.</p>
<p dir="auto">In a CCA game, an adversary can submit ciphertexts to an oracle (a decryption black box) and
get back the corresponding plaintexts but is not allowed to directly hold the decryption key;
the only restriction is that they cannot submit the <em>challenge ciphertext</em> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fa9c30ddf097ca824e3c64b3a9f11662.svg"><img alt="$c^*$" src="/sj-simmons/crypto/raw/main/svgs/fa9c30ddf097ca824e3c64b3a9f11662.svg" valign="0.0px" width="13.84899944999999pt" height="11.319231pt" style="max-width: 100%;"></a>. The adversary
wins the game if they can pick out the plaintext that encrypts to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fa9c30ddf097ca824e3c64b3a9f11662.svg"><img alt="$c^*$" src="/sj-simmons/crypto/raw/main/svgs/fa9c30ddf097ca824e3c64b3a9f11662.svg" valign="0.0px" width="13.84899944999999pt" height="11.319231pt" style="max-width: 100%;"></a> with probability
significantly greater guessing.  But, for Plain RSA, the adversary can <em>blind</em> <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/fa9c30ddf097ca824e3c64b3a9f11662.svg"><img alt="$c^*$" src="/sj-simmons/crypto/raw/main/svgs/fa9c30ddf097ca824e3c64b3a9f11662.svg" valign="0.0px" width="13.84899944999999pt" height="11.319231pt" style="max-width: 100%;"></a>
with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6a0d5b419381f23bef964dd9f443238f.svg"><img alt="$m'$" src="/sj-simmons/crypto/raw/main/svgs/6a0d5b419381f23bef964dd9f443238f.svg" valign="0.0px" width="18.223061999999988pt" height="12.358064399999998pt" style="max-width: 100%;"></a> as above and win the game with probability 1.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-malleability" class="anchor" aria-hidden="true" href="#malleability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Malleability</h4>
<p dir="auto">An adversary intercepts a ciphertext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> encoding a secret message <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bcefac416d525f8ddff381534eebe8c1.svg"><img alt="$m\in\mathbb{Z}/n.$" src="/sj-simmons/crypto/raw/main/svgs/bcefac416d525f8ddff381534eebe8c1.svg" valign="-4.109589000000009px" width="68.1354894pt" height="16.438356pt" style="max-width: 100%;"></a>  Suppose
that the eavesdropper gains some advantage if they can multiply the message <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> by 2 (or any element of
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/01bc4b9ee8aedd4b2c20074242d0ee03.svg"><img alt="$\mathbb{Z}/n).$" src="/sj-simmons/crypto/raw/main/svgs/01bc4b9ee8aedd4b2c20074242d0ee03.svg" valign="-4.109589000000009px" width="40.00396784999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">First, the eavesdropper computes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7f60d34ae4428788305beb2fd3191a49.svg"><img alt="$c'=2^e$" src="/sj-simmons/crypto/raw/main/svgs/7f60d34ae4428788305beb2fd3191a49.svg" valign="0.0px" width="48.09943874999999pt" height="12.358064399999998pt" style="max-width: 100%;"></a> and then replaces the intercepted message <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c323c892a2cac9c98405fcb537e3f453.svg"><img alt="$c'c,$" src="/sj-simmons/crypto/raw/main/svgs/c323c892a2cac9c98405fcb537e3f453.svg" valign="-3.1963502999999998px" width="23.405707049999993pt" height="15.5544147pt" style="max-width: 100%;"></a>
and sends it along to its final destination.  The intended receiver of the ciphertext decodes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a3555722ecd81027239508a8d75bd575.svg"><img alt="$c'c$" src="/sj-simmons/crypto/raw/main/svgs/a3555722ecd81027239508a8d75bd575.svg" valign="0.0px" width="18.839483849999993pt" height="12.358064399999998pt" style="max-width: 100%;"></a>
instead of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> obtaining <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d2eb26f3d95bbf2ed58cbfd1cd6a3180.svg"><img alt="$(c'c)^d = (c')^dc^d = 2m$" src="/sj-simmons/crypto/raw/main/svgs/d2eb26f3d95bbf2ed58cbfd1cd6a3180.svg" valign="-4.109588999999991px" width="152.73239189999998pt" height="18.06580875pt" style="max-width: 100%;"></a> instead of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg"><img alt="$m.$" src="/sj-simmons/crypto/raw/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg" valign="0.0px" width="18.99932429999999pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<h3 tabindex="-1" dir="auto"><a id="user-content-toward-semantic-security" class="anchor" aria-hidden="true" href="#toward-semantic-security"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Toward semantic security</h3>
<p dir="auto">As we saw above, Plain RSA is not secure against choosen-ciphertext attacks; worse, it is not
even secure against so-called <em>passive</em> attacks that assume that attacker has access only to
the public-key and so can only choose plaintexts and encrypt them.</p>
<p dir="auto">For a public-key cryptosystem to be
<a href="https://en.wikipedia.org/wiki/Semantic_security" rel="nofollow">semantically secure</a>
it must provably bar against an attacker gaining any practically advantageous partial information
about a plaintext given only the corresponding ciphertext and the public key. The technical
definition requires <em>chosen-plaintext</em> indistinguishability which, in turn, imagines an oracle
that randomly selects from two equal-length messages submitted by an adversary, encrypts its
choice with a randomly selected public-key, and returns the resulting ciphertext along with
the public-key to the adversary.  The requirement is that the attacker cannot practically
distinguish which message was chosen by the oracle with probability significantly greater
than 1/2.</p>
<p dir="auto">Plain RSA immediately fails this test because it is deterministic: the attacker need
only use the public-key to encrypt two messages — 0 and 1, say — and then submit
those ciphertexts to the oracle.  The one randomly selected by the oracle can be identified
with 100% accuracy.</p>
<p dir="auto">Plain RSA has to be enhanced in order to have a chance of being
semantically secure which, even then, may be still be open to chosen-ciphertext attacks.
The modern solution is to use randomly-generated padding to augment messages before they
are encrypted using the public-key —
<a href="https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding" rel="nofollow">OAEP</a>
(Optimal Asymmetric Encryption Padding) is usual method for doing this with RSA.
RSA with OAEP is non-deterministic; multiple ciphertexts corresponding to the same message
will, with extremely high-probability, be mutually distinct.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-encoding-human-readable-messages" class="anchor" aria-hidden="true" href="#encoding-human-readable-messages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Encoding human-readable messages</h4>
<p dir="auto">In our plain RSA scheme, our
message has so far been some element of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a>, which we naturally represent
with a positive integer less than <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg"><img alt="$n.$" src="/sj-simmons/crypto/raw/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> What's the standard way to implement messages
containing letters and other characters?</p>
<p dir="auto">In RSA, the modulus <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg"><img alt="$n=pq$" src="/sj-simmons/crypto/raw/main/svgs/dd91a3c974e35acb9bfc9b9833a127b8.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a> is large — 1024-bit, say.  Suppose that we
use a small <em>alphabet</em> to construct human-readable messages. For English speakers one
might minimally choose the 26 lowercase letters <em>a</em> to <em>z</em>. If we allow arbitrary messages,
using those letters, of length, say, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ac83c4d50a360c128227d15fb6d25884.svg"><img alt="$\ell,$" src="/sj-simmons/crypto/raw/main/svgs/ac83c4d50a360c128227d15fb6d25884.svg" valign="-3.1963503000000055px" width="11.41559099999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> then we already have a problem if
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4032298ea417792e6c43b9b3ad12182f.svg"><img alt="$\ell^{26}\ge n$" src="/sj-simmons/crypto/raw/main/svgs/4032298ea417792e6c43b9b3ad12182f.svg" valign="-2.235141150000008px" width="52.56087704999999pt" height="15.616017449999998pt" style="max-width: 100%;"></a> — if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/129a2025e04fb0d90a46c584f09e904d.svg"><img alt="$\ell &gt; 1023/\log_2(26)\approx 217$" src="/sj-simmons/crypto/raw/main/svgs/129a2025e04fb0d90a46c584f09e904d.svg" valign="-4.109589000000009px" width="177.00918509999997pt" height="16.438356pt" style="max-width: 100%;"></a> — since then we
cannot <em>injectively</em> map the human-readable messages to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b2db6c8686053451d402312789bf8098.svg"><img alt="$\mathbb{Z}/n.$" src="/sj-simmons/crypto/raw/main/svgs/b2db6c8686053451d402312789bf8098.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">If we want spaces and punctuation, we could use <a href="https://en.wikipedia.org/wiki/ASCII" rel="nofollow">ASCII</a>
which is a character encoding comprising upper- and lower-case letters, single-digit decimals,
and various punctuation, along with 32 control characters that we probably don't need. There
are 95 printable characters.
All together, ASCII encodes 128 characters into 7-bit integers
(see this <a href="https://en.wikipedia.org/wiki/ASCII#/media/File:USASCII_code_chart.png" rel="nofollow">chart</a>).</p>
<p dir="auto"><a href="https://en.wikipedia.org/wiki/PKCS_1" rel="nofollow">PKCS #1</a> (Public-key Cryptography Standards)
provides basic definitions and mathematical constructs underlying the RSA encryption
scheme and makes recommendations in terms of <em>primitives</em> for implementations.
Since PKCS recommends an 8-bit — so one byte, or, octet — encoding, it makes
sense to use <a href="https://en.wikipedia.org/wiki/UTF-8" rel="nofollow">UTF-8</a> (which includes ASCII as its
first 128 characters).</p>
<p dir="auto">Using an 8-bit encoding, we can encode UTF-8 messages of length <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/07ccdb74af1b821937c2af6522666825.svg"><img alt="$\log_2(n)/8$" src="/sj-simmons/crypto/raw/main/svgs/07ccdb74af1b821937c2af6522666825.svg" valign="-4.109589000000009px" width="67.69809914999998pt" height="16.438356pt" style="max-width: 100%;"></a>
(<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1c3a2564437192713d94f081a20dee3d.svg"><img alt="$\approx 128$" src="/sj-simmons/crypto/raw/main/svgs/1c3a2564437192713d94f081a20dee3d.svg" valign="0.0px" width="42.00916004999999pt" height="10.5936072pt" style="max-width: 100%;"></a> if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a5275f955b85f5b684e0a440b1baa1fd.svg"><img alt="$n\approx 2^{1024}).$" src="/sj-simmons/crypto/raw/main/svgs/a5275f955b85f5b684e0a440b1baa1fd.svg" valign="-4.109589000000009px" width="77.99474264999999pt" height="17.4904653pt" style="max-width: 100%;"></a> Longer messages would have to be broken up into blocks, each of which would be encrypted in turn.</p>
<p dir="auto">PKCS #1 defines a primitive called
<a href="http://mpqs.free.fr/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp_EMC_Corporation_Public-Key_Cryptography_Standards_(PKCS).pdf#page=9" rel="nofollow">OS2IP</a>
(Octet String to Integer
Primitive) which takes a sequence of bytes and returns a non-negative integer.
Let us implement OS2IP in Python.</p>
<p dir="auto">First, we convert a string holding our message to a Python
<a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow">bytes</a> object.</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; message = b'&quot;Information: the negative reciprocal value of probability.&quot; -- Shannon, 1948'
&gt;&gt;&gt; message
b'&quot;Information: the negative reciprocal value of probability.&quot; -- Shannon, 1948'
&gt;&gt;&gt; type(message) # &lt;class 'bytes'&gt;"><pre>&gt;&gt;&gt; message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-k">b</span><span class="pl-pds">'</span>"Information: the negative reciprocal value of probability." -- Shannon, 1948<span class="pl-pds">'</span></span>
&gt;&gt;&gt; message
b'"Information: the negative reciprocal value of probability." -- Shannon, 1948'
&gt;&gt;&gt; <span class="pl-c1">type</span>(message) <span class="pl-c"><span class="pl-c">#</span> &lt;class 'bytes'&gt;</span></pre></div>
<p dir="auto">Note: if you want to include unicode characters beyond ASCII, then you may need to specify
UTF-8 when converting to bytes:.</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; message = '« Secret de deux, secret de Dieu; secret de trois, secret de tous. » -- proverbe français'.encode('utf8')
&gt;&gt;&gt; message
b'\xc2\xab Secret de deux, secret de Dieu; secret de trois, secret de tous. \xc2\xbb -- proverbe fran\xc3\xa7ais'"><pre>&gt;&gt;&gt; message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>« Secret de deux, secret de Dieu; secret de trois, secret de tous. » -- proverbe français<span class="pl-pds">'</span></span>.encode(<span class="pl-s"><span class="pl-pds">'</span>utf8<span class="pl-pds">'</span></span>)
&gt;&gt;&gt; message
b'\xc2\xab Secret de deux, secret de Dieu; secret de trois, secret de tous. \xc2\xbb -- proverbe fran\xc3\xa7ais'</pre></div>
<p dir="auto">A Python <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow">bytes</a> object behaves somewhat like a string:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; message[0]
194"><pre>&gt;&gt;&gt; message[<span class="pl-c1">0</span>]
194</pre></div>
<p dir="auto">Where did the 194 come from? UTF-8 is a <em>variable-length</em> encoding
(see, for example, <a href="https://sethmlarson.dev/blog/utf-8" rel="nofollow">here</a>); each character is encoded
using one to four octets (bytes). More frequently occurring characters
generally use less bytes.  The <a href="https://unicode-table.com/en/00AB/" rel="nofollow">left guillemet</a>
uses two bytes: <strong>C2 AB</strong> in hex, which is <strong>194 171</strong> in decimal.</p>
<p dir="auto">Let us now implement
<a href="http://mpqs.free.fr/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp_EMC_Corporation_Public-Key_Cryptography_Standards_(PKCS).pdf#page=9" rel="nofollow">OS2IP</a>.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def OS2IP(X):
    &quot;&quot;&quot;Return the integer primitive x for the octet-string X.&quot;&quot;&quot;
    # the sum below is the same as: int.from_bytes(X, byteorder = 'big')
    return sum([x * 256**i for i, x in enumerate(X[::-1])])"><pre><span class="pl-k">def</span> <span class="pl-v">OS2IP</span>(<span class="pl-v">X</span>):
    <span class="pl-s">"""Return the integer primitive x for the octet-string X."""</span>
    <span class="pl-c"># the sum below is the same as: int.from_bytes(X, byteorder = 'big')</span>
    <span class="pl-k">return</span> <span class="pl-en">sum</span>([<span class="pl-s1">x</span> <span class="pl-c1">*</span> <span class="pl-c1">256</span><span class="pl-c1">**</span><span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span>, <span class="pl-s1">x</span> <span class="pl-c1">in</span> <span class="pl-en">enumerate</span>(<span class="pl-v">X</span>[::<span class="pl-c1">-</span><span class="pl-c1">1</span>])])</pre></div>
<p dir="auto">The standard uses the notation <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ccd980f9aeab6b5d4b9bee60ff66c017.svg"><img alt="$xLen$" src="/sj-simmons/crypto/raw/main/svgs/ccd980f9aeab6b5d4b9bee60ff66c017.svg" valign="0.0px" width="38.103245399999984pt" height="11.232861749999998pt" style="max-width: 100%;"></a> for the number of octets in the input octet string.
If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4e948ff57f32be23156b9828b90923ca.svg"><img alt="$x_{xLen-1}x_{xLen-2}\ldots x_{1}x_{0},$" src="/sj-simmons/crypto/raw/main/svgs/4e948ff57f32be23156b9828b90923ca.svg" valign="-3.8356081499999894px" width="178.52049599999998pt" height="10.91323035pt" style="max-width: 100%;"></a> where each <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cece3527405b121c79ccf48dc01f5c27.svg"><img alt="$x_i\in\{0, 1, 2, \ldots,255\},$" src="/sj-simmons/crypto/raw/main/svgs/cece3527405b121c79ccf48dc01f5c27.svg" valign="-4.109589000000009px" width="156.4200033pt" height="16.438356pt" style="max-width: 100%;"></a> represents
our octet string, then <strong>OS2IP</strong> maps this to the integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c2cc9102cd83bcb426ae0ef47b2cdaf9.svg"><img alt="$\sum_{i=0}^{xLen-1}x_i 256^i$" src="/sj-simmons/crypto/raw/main/svgs/c2cc9102cd83bcb426ae0ef47b2cdaf9.svg" valign="-4.931582699999996px" width="112.75166759999999pt" height="21.0595869pt" style="max-width: 100%;"></a>
(the left-most octet determines the most significant portion of the integer).
For fixed <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ccd980f9aeab6b5d4b9bee60ff66c017.svg"><img alt="$xLen$" src="/sj-simmons/crypto/raw/main/svgs/ccd980f9aeab6b5d4b9bee60ff66c017.svg" valign="0.0px" width="38.103245399999984pt" height="11.232861749999998pt" style="max-width: 100%;"></a>, the map defines a bijection from the set of all octet strings of length <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ccd980f9aeab6b5d4b9bee60ff66c017.svg"><img alt="$xLen$" src="/sj-simmons/crypto/raw/main/svgs/ccd980f9aeab6b5d4b9bee60ff66c017.svg" valign="0.0px" width="38.103245399999984pt" height="11.232861749999998pt" style="max-width: 100%;"></a>
to the set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ba02457a75e8aad93cda348c5c1c5b3d.svg"><img alt="$\{j\in\mathbb{Z}~|~ 0 \le j&lt; 256^{xLen}\}.$" src="/sj-simmons/crypto/raw/main/svgs/ba02457a75e8aad93cda348c5c1c5b3d.svg" valign="-4.109589px" width="191.3702736pt" height="17.9379651pt" style="max-width: 100%;"></a>
The inverse mapping is called
<a href="http://mpqs.free.fr/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp_EMC_Corporation_Public-Key_Cryptography_Standards_(PKCS).pdf#page=8" rel="nofollow">I20SP</a>:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def I2OSP(x, xLen):
    &quot;&quot;&quot;Map an integer x to an octet-string X of length xLen.&quot;&quot;&quot;
    assert x &lt; 256**xLen, &quot;integer too large&quot;
    # below is the same as: return x.to_bytes(xLen, byteorder = 'big')
    if x == 0:
        return b'\x00'
    bs = b''
    while x:
        bs += (x % 256).to_bytes(1, byteorder = 'big')
        x //= 256
    return b'\x00' * (xLen - len(bs)) + bs[::-1]"><pre><span class="pl-k">def</span> <span class="pl-v">I2OSP</span>(<span class="pl-s1">x</span>, <span class="pl-s1">xLen</span>):
    <span class="pl-s">"""Map an integer x to an octet-string X of length xLen."""</span>
    <span class="pl-k">assert</span> <span class="pl-s1">x</span> <span class="pl-c1">&lt;</span> <span class="pl-c1">256</span><span class="pl-c1">**</span><span class="pl-s1">xLen</span>, <span class="pl-s">"integer too large"</span>
    <span class="pl-c"># below is the same as: return x.to_bytes(xLen, byteorder = 'big')</span>
    <span class="pl-k">if</span> <span class="pl-s1">x</span> <span class="pl-c1">==</span> <span class="pl-c1">0</span>:
        <span class="pl-k">return</span> <span class="pl-s">b'<span class="pl-cce">\x00</span>'</span>
    <span class="pl-s1">bs</span> <span class="pl-c1">=</span> <span class="pl-s">b''</span>
    <span class="pl-k">while</span> <span class="pl-s1">x</span>:
        <span class="pl-s1">bs</span> <span class="pl-c1">+=</span> (<span class="pl-s1">x</span> <span class="pl-c1">%</span> <span class="pl-c1">256</span>).<span class="pl-en">to_bytes</span>(<span class="pl-c1">1</span>, <span class="pl-s1">byteorder</span> <span class="pl-c1">=</span> <span class="pl-s">'big'</span>)
        <span class="pl-s1">x</span> <span class="pl-c1">//=</span> <span class="pl-c1">256</span>
    <span class="pl-k">return</span> <span class="pl-s">b'<span class="pl-cce">\x00</span>'</span> <span class="pl-c1">*</span> (<span class="pl-s1">xLen</span> <span class="pl-c1">-</span> <span class="pl-en">len</span>(<span class="pl-s1">bs</span>)) <span class="pl-c1">+</span> <span class="pl-s1">bs</span>[::<span class="pl-c1">-</span><span class="pl-c1">1</span>]</pre></div>
<p dir="auto">Simply put, <strong>OS2IP</strong> takes a sequence of bytes and, thinking of those bytes as base-256 digits,
maps it to the corresponding base-10 integer.
<strong>I2OSP</strong> does the opposite; it maps a decimal integer to its base-256 representation.</p>
<p dir="auto">Notice that I2OSP requires that one pass in a value for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ccd980f9aeab6b5d4b9bee60ff66c017.svg"><img alt="$xLen$" src="/sj-simmons/crypto/raw/main/svgs/ccd980f9aeab6b5d4b9bee60ff66c017.svg" valign="0.0px" width="38.103245399999984pt" height="11.232861749999998pt" style="max-width: 100%;"></a>, and that the correct
number of zero bytes are added to the front of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> if necessary.</p>
<p dir="auto">We want to test drive the two functions on the message above.</p>
<p dir="auto">First, as is convention among cryptographers when generating RSA keys, let us assume
that our <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit primes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> satisfy <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/90d48e024ade9bf2cd560507ebd1ea05.svg"><img alt="$\sqrt{2}2^{k-1} &lt; p, q &lt; 2^k;$" src="/sj-simmons/crypto/raw/main/svgs/90d48e024ade9bf2cd560507ebd1ea05.svg" valign="-3.1963503000000086px" width="143.2647447pt" height="17.4520335pt" style="max-width: 100%;"></a> that way,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/981fac7bd1123ff6bebafc850f41286b.svg"><img alt="$n = pq$" src="/sj-simmons/crypto/raw/main/svgs/981fac7bd1123ff6bebafc850f41286b.svg" valign="-3.1963502999999895px" width="47.98317974999999pt" height="10.2739725pt" style="max-width: 100%;"></a> will be an <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f1738bbe3646e5962be59daa0aa34d56.svg"><img alt="$2k$" src="/sj-simmons/crypto/raw/main/svgs/f1738bbe3646e5962be59daa0aa34d56.svg" valign="0.0px" width="17.29457729999999pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit number: <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/153b334055d6f4379fc401254ad92c40.svg"><img alt="$2^{2k-1}&lt; n &lt; 2^{2k}.$" src="/sj-simmons/crypto/raw/main/svgs/153b334055d6f4379fc401254ad92c40.svg" valign="-0.6427046999999894px" width="120.81429194999998pt" height="14.598924449999998pt" style="max-width: 100%;"></a>
(Thus far, we have assumed only that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f3a28d1aad9fcc1cf4f3075b0f8bac67.svg"><img alt="$2^{k-1} &lt; p, q &lt; 2^k$" src="/sj-simmons/crypto/raw/main/svgs/f3a28d1aad9fcc1cf4f3075b0f8bac67.svg" valign="-3.1963519499999897px" width="115.95873135pt" height="17.1525717pt" style="max-width: 100%;"></a> so that, about half the time,
if we sample uniformly over that range, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ff11416a5b38cf469083cd1f4edbbcca.svg"><img alt="$n=pq&lt;2^{2k-1}$" src="/sj-simmons/crypto/raw/main/svgs/ff11416a5b38cf469083cd1f4edbbcca.svg" valign="-3.1963519499999897px" width="108.76514549999999pt" height="17.1525717pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is not actually a <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f1738bbe3646e5962be59daa0aa34d56.svg"><img alt="$2k$" src="/sj-simmons/crypto/raw/main/svgs/f1738bbe3646e5962be59daa0aa34d56.svg" valign="0.0px" width="17.29457729999999pt" height="11.4155283pt" style="max-width: 100%;"></a>-bit number.)</p>
<p dir="auto">If we use such 512-bit primes, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a>,
which is the size of the message space in RSA, would be 1024-bit.  Since
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/132f82de95601227a02df4eb2aef8f18.svg"><img alt="$127&lt; \log_{256}(2^{1023})&lt; 128$" src="/sj-simmons/crypto/raw/main/svgs/132f82de95601227a02df4eb2aef8f18.svg" valign="-4.109589000000009px" width="182.8997016pt" height="17.4904653pt" style="max-width: 100%;"></a> and, as we will see below, the RSA
standard requires padding of at least 11 bytes, our messages
can have maximum length  <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4153291426422c6eb180330a11d049ee.svg"><img alt="$xLen = 116$" src="/sj-simmons/crypto/raw/main/svgs/4153291426422c6eb180330a11d049ee.svg" valign="0.0px" width="84.67850324999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> bytes.</p>
<p dir="auto">Our message has length 92, so we don't need to break it up.</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; message = '« Secret de deux, secret de Dieu; secret de trois, secret de tous. » -- proverbe français'.encode('utf8')
&gt;&gt;&gt; len(message)
92
&gt;&gt;&gt; m = OS2IP(message)
&gt;&gt;&gt; m
274873227007013220853194865361031398209358857387795228459596366470548372698409537461728865739289920635511061986596506444387159296380925336687869159143300946529393908706703078375797190040253439843230647079564428903853418867
&gt;&gt;&gt; message_ = I2OSP(m, 116)  # this begins with 24 zero bytes
&gt;&gt;&gt; len(message)
116
&gt;&gt;&gt; message_ = message_[24:]   # strip away the 116 - 92 = 24 zero bytes
&gt;&gt;&gt; message_ == message
True
&gt;&gt;&gt; message_.decode('utf8')
'« Secret de deux, secret de Dieu; secret de trois, secret de tous. » -- proverbe français'"><pre>&gt;&gt;&gt; message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>« Secret de deux, secret de Dieu; secret de trois, secret de tous. » -- proverbe français<span class="pl-pds">'</span></span>.encode(<span class="pl-s"><span class="pl-pds">'</span>utf8<span class="pl-pds">'</span></span>)
&gt;&gt;&gt; <span class="pl-c1">len</span>(message)
92
&gt;&gt;&gt; m <span class="pl-k">=</span> OS2IP(message)
&gt;&gt;&gt; m
274873227007013220853194865361031398209358857387795228459596366470548372698409537461728865739289920635511061986596506444387159296380925336687869159143300946529393908706703078375797190040253439843230647079564428903853418867
&gt;&gt;&gt; message_ <span class="pl-k">=</span> I2OSP(m, <span class="pl-c1">116</span>)  <span class="pl-c"><span class="pl-c">#</span> this begins with 24 zero bytes</span>
&gt;&gt;&gt; <span class="pl-c1">len</span>(message)
116
&gt;&gt;&gt; message_ <span class="pl-k">=</span> message_[<span class="pl-c1">24</span>:]   <span class="pl-c"><span class="pl-c">#</span> strip away the 116 - 92 = 24 zero bytes</span>
&gt;&gt;&gt; message_ <span class="pl-k">==</span> message
True
&gt;&gt;&gt; message_.decode(<span class="pl-s"><span class="pl-pds">'</span>utf8<span class="pl-pds">'</span></span>)
'« Secret de deux, secret de Dieu; secret de trois, secret de tous. » -- proverbe français'</pre></div>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-8" class="anchor" aria-hidden="true" href="#exercise-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="12" dir="auto">
<li>The following integers were obtained by partitioning the <strong>bytes</strong> version of a long human-readable message into pieces and applying OS2IP to each piece in turn.  Decode the 3 integers back into a single human-readable message assuming that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4153291426422c6eb180330a11d049ee.svg"><img alt="$xLen = 116$" src="/sj-simmons/crypto/raw/main/svgs/4153291426422c6eb180330a11d049ee.svg" valign="0.0px" width="84.67850324999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>.</li>
</ol>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="1725407206559124414262775558036503363064228085318307003328879078787363094423245885746439779754368306393587124793170863467980001097533679809384382517969177269488080616807424955212840365424212959420111398825941435746017065393535568260957387818213402876939831656625655617513727553140
287101874499563511517274625693599634164659978647960508961005359525734553050793584577215512179449180764094683149204979666322538790035994601590541117759527904133629733463936649070787697899716452610376032894463212129223492366548874418088170509640147500836911687180980832066830360864
4036157892442068336082369800710226842901895235006035033530534455492109324426834792892671498674394861228244517069702057"><pre><span class="pl-c1">1725407206559124414262775558036503363064228085318307003328879078787363094423245885746439779754368306393587124793170863467980001097533679809384382517969177269488080616807424955212840365424212959420111398825941435746017065393535568260957387818213402876939831656625655617513727553140</span>
<span class="pl-c1">287101874499563511517274625693599634164659978647960508961005359525734553050793584577215512179449180764094683149204979666322538790035994601590541117759527904133629733463936649070787697899716452610376032894463212129223492366548874418088170509640147500836911687180980832066830360864</span>
<span class="pl-c1">4036157892442068336082369800710226842901895235006035033530534455492109324426834792892671498674394861228244517069702057</span></pre></div>
<h4 tabindex="-1" dir="auto"><a id="user-content-padding" class="anchor" aria-hidden="true" href="#padding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Padding</h4>
<p dir="auto">A short input to OS2IP results in small output, and we've already seen that small <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> (relative
to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5832d8437237f9b3dbe873f044d5de9.svg"><img alt="$n)$" src="/sj-simmons/crypto/raw/main/svgs/d5832d8437237f9b3dbe873f044d5de9.svg" valign="-4.109589000000009px" width="16.25959334999999pt" height="16.438356pt" style="max-width: 100%;"></a> can lead to weak encryption.   We want a given plaintext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> to land essentially
uniformly in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4ee8f29e8fc6ff907c10277ad56123ba.svg"><img alt="$\mathbb{Z}/n,$" src="/sj-simmons/crypto/raw/main/svgs/4ee8f29e8fc6ff907c10277ad56123ba.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a> regardless of specifics such as the length of our human-readable
message.  A good approximation to uniformly distributed plaintexts can be achieved by padding our
human-readable messages in such a way that all are of maximum length.</p>
<p dir="auto">Also,
we want to pad with randomly generated bytes; then the same message leads to distinct plaintexts
under repeated encodings, so that we our scheme at least has a chance at being semantically secure.</p>
<p dir="auto">Let us implement the padding scheme recommended in
<a href="http://mpqs.free.fr/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp_EMC_Corporation_Public-Key_Cryptography_Standards_(PKCS).pdf#page=24" rel="nofollow">PKCS #1 v2.2: RSA Cryptography Standard</a>.
<g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> This padding scheme bars against the exploits mentioned above but is still open to compromise.  An improved padding scheme involving hashing is discussed below.</p>
<p dir="auto">The function <strong>RSAencrypt</strong> in the following code-block implements the encryption protocol in the
standard except that it outputs the ciphertext in the form of an integer (note that it uses the
Blum Blum Shub PRBG that we constructed above).  Likewise, the function <strong>RSAdecrypt</strong> takes the
ciphertext in the form of a positive integer.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import math
from blumblumshub import prbg

def RSAencrypt(n, e, message):
    &quot;&quot;&quot;Return ciphertext given an RSA key {n, e} and a message.

    Args:
        n (int): the modulus.
        e (int): the encrypting exponent.
        message (bytes): the message (as a bytestring) to encrypt.

    Returns:
        int. A non-negative integer less than n.
    &quot;&quot;&quot;
    # the length of n in whole octets
    k = math.floor(math.log(n, 256))

    # check that message is short enough leaving room for padding
    mLen = len(message)
    if mLen &gt; k - 11:
        raise ValueError(&quot;message too long&quot;)

    # generate a random bytes-string consisting of non-zero bytes
    # (this will have length at least 8)
    ps = b''
    while len(ps) &lt; k - mLen - 3:
        decimal = int(prbg(8), 2)
        if decimal != 0:
            ps += decimal.to_bytes(1, byteorder = 'big')

    # pad message and convert to integer, encrypt, and return
    m = OS2IP(b'\x00' + b'\x02' + ps + b'\x00' + message)
    return pow(m, e, n)

def RSAdecrypt(n, d, ciphertext):
    &quot;&quot;&quot;Return message decrypted from ciphertext using key {n, d}.

    Args:
        n (int): the modulus.
        d (int): the decrypting exponent.
        ciphertext (int): the message to decrypt.

    Returns:
        bytes. A bytes-string representing the decrypted message.
    &quot;&quot;&quot;
    # get the padded message
    m = pow(ciphertext, d, n)
    k = math.floor(math.log(n, 256))
    message = I2OSP(m, k)

    # strip away the padding
    error = False
    if len(message) == 0 or message[0] != 0:
        error = True
    message = message[1:]
    if len(message) == 0 or message[0] != 2:
        error = True
    message = message[1:]
    while len(message) &gt; 0 and message[0] != 0:
        message = message[1:]
    if len(message) == 0 or message[0] != 0:
        error = True
    message = message[1:]

    assert not error, &quot;decryption error&quot;

    return message"><pre><span class="pl-k">import</span> <span class="pl-s1">math</span>
<span class="pl-k">from</span> <span class="pl-s1">blumblumshub</span> <span class="pl-k">import</span> <span class="pl-s1">prbg</span>

<span class="pl-k">def</span> <span class="pl-v">RSAencrypt</span>(<span class="pl-s1">n</span>, <span class="pl-s1">e</span>, <span class="pl-s1">message</span>):
    <span class="pl-s">"""Return ciphertext given an RSA key {n, e} and a message.</span>
<span class="pl-s"></span>
<span class="pl-s">    Args:</span>
<span class="pl-s">        n (int): the modulus.</span>
<span class="pl-s">        e (int): the encrypting exponent.</span>
<span class="pl-s">        message (bytes): the message (as a bytestring) to encrypt.</span>
<span class="pl-s"></span>
<span class="pl-s">    Returns:</span>
<span class="pl-s">        int. A non-negative integer less than n.</span>
<span class="pl-s">    """</span>
    <span class="pl-c"># the length of n in whole octets</span>
    <span class="pl-s1">k</span> <span class="pl-c1">=</span> <span class="pl-s1">math</span>.<span class="pl-en">floor</span>(<span class="pl-s1">math</span>.<span class="pl-en">log</span>(<span class="pl-s1">n</span>, <span class="pl-c1">256</span>))

    <span class="pl-c"># check that message is short enough leaving room for padding</span>
    <span class="pl-s1">mLen</span> <span class="pl-c1">=</span> <span class="pl-en">len</span>(<span class="pl-s1">message</span>)
    <span class="pl-k">if</span> <span class="pl-s1">mLen</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">k</span> <span class="pl-c1">-</span> <span class="pl-c1">11</span>:
        <span class="pl-k">raise</span> <span class="pl-v">ValueError</span>(<span class="pl-s">"message too long"</span>)

    <span class="pl-c"># generate a random bytes-string consisting of non-zero bytes</span>
    <span class="pl-c"># (this will have length at least 8)</span>
    <span class="pl-s1">ps</span> <span class="pl-c1">=</span> <span class="pl-s">b''</span>
    <span class="pl-k">while</span> <span class="pl-en">len</span>(<span class="pl-s1">ps</span>) <span class="pl-c1">&lt;</span> <span class="pl-s1">k</span> <span class="pl-c1">-</span> <span class="pl-s1">mLen</span> <span class="pl-c1">-</span> <span class="pl-c1">3</span>:
        <span class="pl-s1">decimal</span> <span class="pl-c1">=</span> <span class="pl-en">int</span>(<span class="pl-en">prbg</span>(<span class="pl-c1">8</span>), <span class="pl-c1">2</span>)
        <span class="pl-k">if</span> <span class="pl-s1">decimal</span> <span class="pl-c1">!=</span> <span class="pl-c1">0</span>:
            <span class="pl-s1">ps</span> <span class="pl-c1">+=</span> <span class="pl-s1">decimal</span>.<span class="pl-en">to_bytes</span>(<span class="pl-c1">1</span>, <span class="pl-s1">byteorder</span> <span class="pl-c1">=</span> <span class="pl-s">'big'</span>)

    <span class="pl-c"># pad message and convert to integer, encrypt, and return</span>
    <span class="pl-s1">m</span> <span class="pl-c1">=</span> <span class="pl-v">OS2IP</span>(<span class="pl-s">b'<span class="pl-cce">\x00</span>'</span> <span class="pl-c1">+</span> <span class="pl-s">b'<span class="pl-cce">\x02</span>'</span> <span class="pl-c1">+</span> <span class="pl-s1">ps</span> <span class="pl-c1">+</span> <span class="pl-s">b'<span class="pl-cce">\x00</span>'</span> <span class="pl-c1">+</span> <span class="pl-s1">message</span>)
    <span class="pl-k">return</span> <span class="pl-en">pow</span>(<span class="pl-s1">m</span>, <span class="pl-s1">e</span>, <span class="pl-s1">n</span>)

<span class="pl-k">def</span> <span class="pl-v">RSAdecrypt</span>(<span class="pl-s1">n</span>, <span class="pl-s1">d</span>, <span class="pl-s1">ciphertext</span>):
    <span class="pl-s">"""Return message decrypted from ciphertext using key {n, d}.</span>
<span class="pl-s"></span>
<span class="pl-s">    Args:</span>
<span class="pl-s">        n (int): the modulus.</span>
<span class="pl-s">        d (int): the decrypting exponent.</span>
<span class="pl-s">        ciphertext (int): the message to decrypt.</span>
<span class="pl-s"></span>
<span class="pl-s">    Returns:</span>
<span class="pl-s">        bytes. A bytes-string representing the decrypted message.</span>
<span class="pl-s">    """</span>
    <span class="pl-c"># get the padded message</span>
    <span class="pl-s1">m</span> <span class="pl-c1">=</span> <span class="pl-en">pow</span>(<span class="pl-s1">ciphertext</span>, <span class="pl-s1">d</span>, <span class="pl-s1">n</span>)
    <span class="pl-s1">k</span> <span class="pl-c1">=</span> <span class="pl-s1">math</span>.<span class="pl-en">floor</span>(<span class="pl-s1">math</span>.<span class="pl-en">log</span>(<span class="pl-s1">n</span>, <span class="pl-c1">256</span>))
    <span class="pl-s1">message</span> <span class="pl-c1">=</span> <span class="pl-v">I2OSP</span>(<span class="pl-s1">m</span>, <span class="pl-s1">k</span>)

    <span class="pl-c"># strip away the padding</span>
    <span class="pl-s1">error</span> <span class="pl-c1">=</span> <span class="pl-c1">False</span>
    <span class="pl-k">if</span> <span class="pl-en">len</span>(<span class="pl-s1">message</span>) <span class="pl-c1">==</span> <span class="pl-c1">0</span> <span class="pl-c1">or</span> <span class="pl-s1">message</span>[<span class="pl-c1">0</span>] <span class="pl-c1">!=</span> <span class="pl-c1">0</span>:
        <span class="pl-s1">error</span> <span class="pl-c1">=</span> <span class="pl-c1">True</span>
    <span class="pl-s1">message</span> <span class="pl-c1">=</span> <span class="pl-s1">message</span>[<span class="pl-c1">1</span>:]
    <span class="pl-k">if</span> <span class="pl-en">len</span>(<span class="pl-s1">message</span>) <span class="pl-c1">==</span> <span class="pl-c1">0</span> <span class="pl-c1">or</span> <span class="pl-s1">message</span>[<span class="pl-c1">0</span>] <span class="pl-c1">!=</span> <span class="pl-c1">2</span>:
        <span class="pl-s1">error</span> <span class="pl-c1">=</span> <span class="pl-c1">True</span>
    <span class="pl-s1">message</span> <span class="pl-c1">=</span> <span class="pl-s1">message</span>[<span class="pl-c1">1</span>:]
    <span class="pl-k">while</span> <span class="pl-en">len</span>(<span class="pl-s1">message</span>) <span class="pl-c1">&gt;</span> <span class="pl-c1">0</span> <span class="pl-c1">and</span> <span class="pl-s1">message</span>[<span class="pl-c1">0</span>] <span class="pl-c1">!=</span> <span class="pl-c1">0</span>:
        <span class="pl-s1">message</span> <span class="pl-c1">=</span> <span class="pl-s1">message</span>[<span class="pl-c1">1</span>:]
    <span class="pl-k">if</span> <span class="pl-en">len</span>(<span class="pl-s1">message</span>) <span class="pl-c1">==</span> <span class="pl-c1">0</span> <span class="pl-c1">or</span> <span class="pl-s1">message</span>[<span class="pl-c1">0</span>] <span class="pl-c1">!=</span> <span class="pl-c1">0</span>:
        <span class="pl-s1">error</span> <span class="pl-c1">=</span> <span class="pl-c1">True</span>
    <span class="pl-s1">message</span> <span class="pl-c1">=</span> <span class="pl-s1">message</span>[<span class="pl-c1">1</span>:]

    <span class="pl-k">assert</span> <span class="pl-c1">not</span> <span class="pl-s1">error</span>, <span class="pl-s">"decryption error"</span>

    <span class="pl-k">return</span> <span class="pl-s1">message</span></pre></div>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-7" class="anchor" aria-hidden="true" href="#exercises-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<a id="user-content-simmonsrsakey">
<ol start="13" dir="auto">
<li>Send Simmons a human-readable message that you have encoded using UTF-8 and encrypted using padding. Simmons' RSA public key is <img alt="$\{n, e\}$" src="/sj-simmons/crypto/raw/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg" valign="-4.109589000000009px" width="41.265316949999985pt" height="16.438356pt" style="max-width: 100%;"> where <img alt="$e=65537$" src="/sj-simmons/crypto/raw/main/svgs/9031a800c7cdc076f354cc5ff9cafbb8.svg" valign="0.0px" width="70.66781535pt" height="10.5936072pt" style="max-width: 100%;"> and <img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"> is below.
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0xc66b4f6ab55b33afdffcdec21ec79ca9339cbf49e82feb91b469e99b2fae67f5c04ab5bafa4b75aba04464ab585b6e681e9cf0b765608bb383f582482a49df0a4c689a85073e06d5638163f45ce42d4dd5180c324fe45783cc3313117b53e549984c41d962bc110fd8ddd95f602ef357b6e57732562e47cd8286d05454c51d13ca0bfa7ba2d506a2262410ff78d0bc160a4ca2f7d7ae4ff71c46086cac03c1fe38c679f8edb537055e7e48d60538d85ba9c342fb19c708fdf75bbf76d544569b"><pre><span class="pl-c1">0xc66b4f6ab55b33afdffcdec21ec79ca9339cbf49e82feb91b469e99b2fae67f5c04ab5bafa4b75aba04464ab585b6e681e9cf0b765608bb383f582482a49df0a4c689a85073e06d5638163f45ce42d4dd5180c324fe45783cc3313117b53e549984c41d962bc110fd8ddd95f602ef357b6e57732562e47cd8286d05454c51d13ca0bfa7ba2d506a2262410ff78d0bc160a4ca2f7d7ae4ff71c46086cac03c1fe38c679f8edb537055e7e48d60538d85ba9c342fb19c708fdf75bbf76d544569b</span></pre></div>
</li>
<li><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji><strong>Challenge</strong><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji> Send Simmons a long (encrypted) message that you had to break up
into pieces, where you used the minimal number of pieces.</li>
</ol>
</a><h3 tabindex="-1" dir="auto"><a></a><a id="user-content-hashing-and-signing" class="anchor" aria-hidden="true" href="#hashing-and-signing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hashing and Signing</h3>
<p dir="auto">As we have seen, padding can be factored into the Plain RSA protocol in such a way as to
bar against several well-known exploits. But doing so is for naught if we cannot prevent
an attacker from replacing a ciphertext in transit.  How can the recipient of a ciphertext
guarantee the identity of the sender — or, at least, detect whether a received
ciphertext has been tampered with? Answer, the sender needs to sign the message, and the
receiver needs to verify the signature.</p>
<p dir="auto">A <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function" rel="nofollow">cryptographic hash function</a> is
a computationally efficient and deterministic <a href="https://en.wikipedia.org/wiki/One-way_function" rel="nofollow">one-way function</a>
that maps binary strings or arrays (or, more generally, data) of arbitrary length to binary
strings or arrays of fixed length.
For a given hash function to be useful in cryptography, finding <em>collisions</em> — distinct
inputs mapping to the same output — must be computational infeasible, as must be
inverting the hash — finding a <em>pre-image</em> that maps to a pre-specified output
(see <a href="https://en.wikipedia.org/wiki/Preimage_attack" rel="nofollow">pre-image attack</a>).</p>
<p dir="auto">Without going into a detailed discussion, not all hash functions are created equal.
<a href="https://en.wikipedia.org/wiki/MD5" rel="nofollow">MD5</a> is still in wide use despite it famously
yielding to, in August of 2004, a <a href="https://en.wikipedia.org/wiki/Birthday_attack" rel="nofollow">birthday attack</a>;
and, later in 2004, being shown to admit collisions that could be practically significant in the
wild.  MD5 is a 128-bit hash, the outputs of which are small enough to admit a brute-force
birthday attack.  However, <a href="#references2">Wang, et al.</a>, in 2004, used a
<em>differential paths</em> attack (cf., <a href="#references2">Stevens</a>).</p>
<p dir="auto">Modern cryptographic hash functions, such as those in the <a href="https://en.wikipedia.org/wiki/SHA-2" rel="nofollow">SHA-256</a>
family, strive to be both fast and secure.  But proofs of cryptographic security are elusive;
so modern hashes generally aim to exhibit desirable properties such as the
<a href="https://en.wikipedia.org/wiki/Avalanche_effect" rel="nofollow">avalanche effect</a>.</p>
<p dir="auto">Roughly, a secure hash slices, dices, and folds or otherwise combines the input data. Modern
hashes shoot for the sweet spot: enough mixing to be secure but not so much as to be inefficient.
Researchers might find ways to attack the specifics of the slicing, dicing, etc. so
that hashing algorithms tend to evolve over time. Hashes that have been around for a while
and haven't been compromised are considered secure (at least until more powerful hardware
comes along).</p>
<p dir="auto">Several secure hash functions are implemented in the
<a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow">hashlib</a> Python module. To use, for example,
SHA-256 in Python:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; from hashlib import sha256
&gt;&gt;&gt; message = b&quot;to be one, or to be zero, that is the question&quot;
&gt;&gt;&gt; sha256(message).hexdigest()
'4e484012b464fb2f0740725fc4ac3ec4cbe07b3d539f19ee031ebb71827d56fe'"><pre>&gt;&gt;&gt; <span class="pl-k">from</span> hashlib <span class="pl-k">import</span> sha256
&gt;&gt;&gt; message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-k">b</span><span class="pl-pds">"</span>to be one, or to be zero, that is the question<span class="pl-pds">"</span></span>
&gt;&gt;&gt; sha256(message).hexdigest()
'4e484012b464fb2f0740725fc4ac3ec4cbe07b3d539f19ee031ebb71827d56fe'</pre></div>
<p dir="auto">Or, if you want byte-string output:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; sha256(message).digest()
b'NH@\x12\xb4d\xfb/\x07@r_\xc4\xac&gt;\xc4\xcb\xe0{=S\x9f\x19\xee\x03\x1e\xbbq\x82}V\xfe'"><pre>&gt;&gt;&gt; sha256(message).digest()
b'NH@\x12\xb4d\xfb/\x07@r_\xc4\xac&gt;\xc4\xcb\xe0{=S\x9f\x19\xee\x03\x1e\xbbq\x82}V\xfe'</pre></div>
<p dir="auto">The output is a hex-string of length 64 (so 32 bytes, or 256 bits), which is always the
case regardless of the length of the input:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; sha256(100*message).hexdigest()
'9ee1a60e25c2eeba9dcb3159b03dbba3ad928e6babe7d4d92d96035551c57f44'"><pre>&gt;&gt;&gt; sha256(<span class="pl-c1">100</span><span class="pl-k">*</span>message).hexdigest()
'9ee1a60e25c2eeba9dcb3159b03dbba3ad928e6babe7d4d92d96035551c57f44'</pre></div>
<p dir="auto">The output always being of uniform length is itself handy since we can hash any
message, no matter the length, to an essentially unique 32-byte output.</p>
<p dir="auto">Suppose that, as in previous exercises, you want to send Simmons a
message <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> that you encrypted using his RSA public key <em>and</em> that you want to
<em>digitally sign</em> your message in such a way that Simmons can verify
that it wasn't replaced or tampered with in transit and that it came
from you.</p>
<p dir="auto">First, you create your own RSA public key and publish it. Then you take
the bytes-string version of your human-readable message and hash it with
sha256, the output of which you convert to an integer using OS2IP
(provided above);  denote this integer by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2284271299286a9ac90c5d6e68a0d85d.svg"><img alt="$hash(message).$" src="/sj-simmons/crypto/raw/main/svgs/2284271299286a9ac90c5d6e68a0d85d.svg" valign="-4.109589000000009px" width="114.96036749999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">Next, you exponentiate <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9990163f2ddd2daa6872c42e12e2be77.svg"><img alt="$(hash(message))^d \mod n$" src="/sj-simmons/crypto/raw/main/svgs/9990163f2ddd2daa6872c42e12e2be77.svg" valign="-4.109588999999991px" width="188.65636184999997pt" height="18.06580875pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/de3bd9768742ee7537342ce023ae5d20.svg"><img alt="$\{n, d\}$" src="/sj-simmons/crypto/raw/main/svgs/de3bd9768742ee7537342ce023ae5d20.svg" valign="-4.109589000000009px" width="42.167142599999984pt" height="16.438356pt" style="max-width: 100%;"></a> is your
<em>private</em> RSA key.  This last quantity is the <em>signature</em>; let us denote it
by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/475cfe7eb7b01b7be594dc5e74eae36c.svg"><img alt="$s.$" src="/sj-simmons/crypto/raw/main/svgs/475cfe7eb7b01b7be594dc5e74eae36c.svg" valign="0.0px" width="12.27170339999999pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">Now, you send Simmons the pair <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9206ddcb769d2e7eb359f5e684874739.svg"><img alt="$\{c, s\}$" src="/sj-simmons/crypto/raw/main/svgs/9206ddcb769d2e7eb359f5e684874739.svg" valign="-4.109589000000009px" width="38.56358549999999pt" height="16.438356pt" style="max-width: 100%;"></a> — the ciphertext of your
message along with your signature of your message. Simmons decrypts <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
obtaining the bytes-string <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/46941de06abc8277295bf5ca8d6ad2f1.svg"><img alt="$message.$" src="/sj-simmons/crypto/raw/main/svgs/46941de06abc8277295bf5ca8d6ad2f1.svg" valign="-3.1963502999999895px" width="66.83807129999998pt" height="10.2739725pt" style="max-width: 100%;"></a> He then hashes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg"><img alt="$message$" src="/sj-simmons/crypto/raw/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg" valign="-3.1963502999999895px" width="62.271846449999984pt" height="10.2739725pt" style="max-width: 100%;"></a> using SHA-256.</p>
<p dir="auto">To <em>authenticate</em> (check that the message was sent by you) and to verify the <em>integrity</em>
of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg"><img alt="$message$" src="/sj-simmons/crypto/raw/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg" valign="-3.1963502999999895px" width="62.271846449999984pt" height="10.2739725pt" style="max-width: 100%;"></a> (that it wasn't altered), Simmons uses <em>your</em> public key
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg"><img alt="$\{n, e\}$" src="/sj-simmons/crypto/raw/main/svgs/5dbdee6d2f28cec315050f4a14b95b0c.svg" valign="-4.109589000000009px" width="41.265316949999985pt" height="16.438356pt" style="max-width: 100%;"></a> to compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/66508303fbd7c023f2a7478f5ae2fb7a.svg"><img alt="$s^e \mod n$" src="/sj-simmons/crypto/raw/main/svgs/66508303fbd7c023f2a7478f5ae2fb7a.svg" valign="0.0px" width="72.57608489999998pt" height="11.4155283pt" style="max-width: 100%;"></a>, obtaining <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2284271299286a9ac90c5d6e68a0d85d.svg"><img alt="$hash(message).$" src="/sj-simmons/crypto/raw/main/svgs/2284271299286a9ac90c5d6e68a0d85d.svg" valign="-4.109589000000009px" width="114.96036749999999pt" height="16.438356pt" style="max-width: 100%;"></a>  He then checks
that this is indeed equal to the hash of the message he obtained when decrypting <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
(see the previous paragraph).</p>
<p dir="auto">Note that your and Simmons' modulus need not be the same, but that your modulus
must be at least <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/98b523fb301c77aafff614058c20cda9.svg"><img alt="$2^{256}$" src="/sj-simmons/crypto/raw/main/svgs/98b523fb301c77aafff614058c20cda9.svg" valign="0.0px" width="27.87685064999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> — otherwise, you would to break <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/139fe2b457c746b40de72d9245316081.svg"><img alt="$hash(message)$" src="/sj-simmons/crypto/raw/main/svgs/139fe2b457c746b40de72d9245316081.svg" valign="-4.109589000000009px" width="110.39414264999999pt" height="16.438356pt" style="max-width: 100%;"></a>
into pieces when computing your signature (and send along all the pieces).</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-8" class="anchor" aria-hidden="true" href="#exercises-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol start="15" dir="auto">
<li>
<p dir="auto">You want to use another person's public RSA key to send them an encrypted
message (you can use <strong>RSAencypt</strong> above to encrypt your message).  But you also
want to <em>sign</em> your message so that the receiving party can verify that the message
is from you and was not modified in transit.  Hence you, too, have an RSA key.</p>
<p dir="auto">Write a function called <strong>RSAsign</strong> that takes a (bytes-string) message and
outputs (as an integer) your signature of it . What other inputs, besides the
message to be signed, does such a function require?</p>
</li>
<li>
<p dir="auto">You are going to receive a signed, encrypted message consisting of a ciphertext and
a signature. The cipertext can be decrypted using <strong>RSAdecrypt</strong> above.</p>
<p dir="auto">Write a function called <strong>RSAverify</strong> that takes as input a decrypted ciphertext and
a signature, verifies the authenticity and integrity of the decrypted ciphertext, and
that outputs True or False, accordingly. What other inputs does such a function
require?</p>
</li>
<li>
<p dir="auto">Create RSA public and private keys and send <em>only</em> the public key to Simmons so he
can send you a signed message that you can decode and verify. Did Simmons' message
and signature verify correctly?</p>
<p dir="auto">Here is the function that Simmons used to sign his message:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="from hashlib import sha256
def RSAsign(n, d, message):
    return RSAencrypt(n, d, sha256(message).digest())"><pre><span class="pl-k">from</span> <span class="pl-s1">hashlib</span> <span class="pl-k">import</span> <span class="pl-s1">sha256</span>
<span class="pl-k">def</span> <span class="pl-v">RSAsign</span>(<span class="pl-s1">n</span>, <span class="pl-s1">d</span>, <span class="pl-s1">message</span>):
    <span class="pl-k">return</span> <span class="pl-v">RSAencrypt</span>(<span class="pl-s1">n</span>, <span class="pl-s1">d</span>, <span class="pl-en">sha256</span>(<span class="pl-s1">message</span>).<span class="pl-en">digest</span>())</pre></div>
<p dir="auto">Consider using this function or its equivalent to verify Simmons' message:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def RSAverify(n, e, message, signature):
    return RSAdecrypt(n, e, signature) == sha256(message).digest()"><pre><span class="pl-k">def</span> <span class="pl-v">RSAverify</span>(<span class="pl-s1">n</span>, <span class="pl-s1">e</span>, <span class="pl-s1">message</span>, <span class="pl-s1">signature</span>):
    <span class="pl-k">return</span> <span class="pl-v">RSAdecrypt</span>(<span class="pl-s1">n</span>, <span class="pl-s1">e</span>, <span class="pl-s1">signature</span>) <span class="pl-c1">==</span> <span class="pl-en">sha256</span>(<span class="pl-s1">message</span>).<span class="pl-en">digest</span>()</pre></div>
</li>
<li>
<p dir="auto">Using <a href="#simmonsrsakey">his RSA public key</a>, send Simmons an encrypted message that
you have appropriately signed using your RSA key. The message should be either
"yes" or "no", whichever is the correct answer to the question Simmons sent to
you in problem 17. (Please use RSAsign above or its equivalent to sign your message.)</p>
</li>
</ol>
<p dir="auto">Notice that our functions RSAsign and RSAverify in the last two problems use
padding (since they call our "padded" RSAencrypt and RSAdecrypt).  In fact, a deterministic
RSA signing protocol would not be as blatantly open to attack as would a deterministic
RSA encryption scheme since, when signing, there is a hash function between the message and the
exponentiation. However, the modern RSA protocols do indeed use padding (cf. the next section).</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-optimal-asymmetric-encryption-padding" class="anchor" aria-hidden="true" href="#optimal-asymmetric-encryption-padding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Optimal asymmetric encryption padding</h4>
<p dir="auto">The padded version of the RSA cryptosystem that we implemented above (which is essentially
that of
<a href="http://mpqs.free.fr/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp_EMC_Corporation_Public-Key_Cryptography_Standards_(PKCS).pdf#page=24" rel="nofollow">PKCS #1 v2.2</a>)
bars against a wide range of the known attacks against Plain RSA.
A portion of the padding being pseudo-random is a game-changer security-wise
— so much so that that the padded version might seem provably secure in the
modern sense that requires protection against various flavors of chosen
plain- and ciphertext attacks.</p>
<p dir="auto">And yet in 1998, Daniel Bleichenbacher famously devised (see <a href="#references2">Bleichenbacher</a>)
a chosen ciphertext attack that only assumes an oracle that checks whether a
chosen ciphertext conforms to the PKCS formatting standard (<strong>\x00</strong>,
followed by <strong>\x02</strong>, followed by non-zero bytes, followed by <strong>\x00</strong>, followed by data).</p>
<p dir="auto">Bleichenbacher's CCA attack was practically applicable and in fact SSL Version
3.0 is susceptible.  The attack is  mounted in 3 stages, the first of which
uses blinding; the plaintext is eventually discovered after submitting
around <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1131f55f436cf2a4c5c9222109756439.svg"><img alt="$2^{20}$" src="/sj-simmons/crypto/raw/main/svgs/1131f55f436cf2a4c5c9222109756439.svg" valign="0.0px" width="21.324302999999993pt" height="13.380876299999999pt" style="max-width: 100%;"></a> ciphertexts.</p>
<p dir="auto">Briefly, the attack works as follows. The adversary eavesdrops and collects a
ciphertext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3a6858b3697e97ca767f7e2bb2606410.svg"><img alt="$c = m^e \mod n$" src="/sj-simmons/crypto/raw/main/svgs/3a6858b3697e97ca767f7e2bb2606410.svg" valign="0.0px" width="108.33514064999997pt" height="11.4155283pt" style="max-width: 100%;"></a> on its way to a server.  Then they send <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a3555722ecd81027239508a8d75bd575.svg"><img alt="$c'c$" src="/sj-simmons/crypto/raw/main/svgs/a3555722ecd81027239508a8d75bd575.svg" valign="0.0px" width="18.839483849999993pt" height="12.358064399999998pt" style="max-width: 100%;"></a> where
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/595456c0cced48cab713f7c569472780.svg"><img alt="$c' = (m')^e \mod n$" src="/sj-simmons/crypto/raw/main/svgs/595456c0cced48cab713f7c569472780.svg" valign="-4.109589px" width="130.34432399999997pt" height="16.4676534pt" style="max-width: 100%;"></a> to the server. With very high probability, the
server rejects <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a3555722ecd81027239508a8d75bd575.svg"><img alt="$c'c$" src="/sj-simmons/crypto/raw/main/svgs/a3555722ecd81027239508a8d75bd575.svg" valign="0.0px" width="18.839483849999993pt" height="12.358064399999998pt" style="max-width: 100%;"></a> since it decrypts to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ba16452d0338d8c6e3c6bcccc5e4d77d.svg"><img alt="$m' m$" src="/sj-simmons/crypto/raw/main/svgs/ba16452d0338d8c6e3c6bcccc5e4d77d.svg" valign="0.0px" width="33.47807594999999pt" height="12.358064399999998pt" style="max-width: 100%;"></a> which very likely does
not start with <strong>\x00\x02</strong> followed later by <strong>\x00</strong>.</p>
<p dir="auto">Occasionally (but very rarely), the server will not reject <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/dbe975b9eff8ecfe3a5b42e7d3f452af.svg"><img alt="$c'c.$" src="/sj-simmons/crypto/raw/main/svgs/dbe975b9eff8ecfe3a5b42e7d3f452af.svg" valign="0.0px" width="23.405707049999993pt" height="12.358064399999998pt" style="max-width: 100%;"></a>
Based on that knowledge alone, the attacker now knows that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/826acbe93793771dee9e2135a2a922fd.svg"><img alt="$m'm \mod n$" src="/sj-simmons/crypto/raw/main/svgs/826acbe93793771dee9e2135a2a922fd.svg" valign="0.0px" width="91.28986514999998pt" height="12.358064399999998pt" style="max-width: 100%;"></a> is
an integer that starts with <strong>\x00\x02</strong> —  and has therefore narrowed
the possible range of values for <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg"><img alt="$m.$" src="/sj-simmons/crypto/raw/main/svgs/4bc868b30aee0dfd5de42ea15b2cb2d8.svg" valign="0.0px" width="18.99932429999999pt" height="7.0776222pt" style="max-width: 100%;"></a>  Using advantageously chosen values of the
mask <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6a0d5b419381f23bef964dd9f443238f.svg"><img alt="$m'$" src="/sj-simmons/crypto/raw/main/svgs/6a0d5b419381f23bef964dd9f443238f.svg" valign="0.0px" width="18.223061999999988pt" height="12.358064399999998pt" style="max-width: 100%;"></a>, the attacker eventually further narrows the range until uncovering
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> exactly.</p>
<p dir="auto">The problem is the lack of redundancy when padding. The best way to prevent
this sort of chosen ciphertext attack is overhaul the protocol to use hash
functions in such a way as to add redundancy so that random byte-strings can't
match the padding.</p>
<p dir="auto">The standard that does that is <a href="https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding" rel="nofollow">OAEP</a>. Here is a diagram (from <a href="https://crypto101.multun.net/public-key-encryption.html" rel="nofollow">crypto101</a>).</p>
<p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/images/Oaep.svg"><img height="300" src="/sj-simmons/crypto/raw/main/images/Oaep.svg" style="max-width: 100%;"></a>
</p>
<p dir="auto">G and H are <a href="https://en.wikipedia.org/wiki/Mask_generation_function" rel="nofollow">mask generating function</a>;
each plays a role similar to a hash.
OAEP is a <a href="https://en.wikipedia.org/wiki/Probabilistic_encryption" rel="nofollow">probabilitic</a> encryption
scheme —  <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1e438235ef9ec72fc51ac5025516017c.svg"><img alt="$R$" src="/sj-simmons/crypto/raw/main/svgs/1e438235ef9ec72fc51ac5025516017c.svg" valign="0.0px" width="12.60847334999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> is a random bit string —  with enough intrinsic reduncancy
that no partial decryption or other  information is leaked (cf. <a href="#references">Boyko</a>).</p>
<p dir="auto">To be clear, OAEP is an encryption/decryption scheme; it replaces the older PKCS #1 version
of padding that we implemented above. Also, the
<a href="https://en.wikipedia.org/wiki/PKCS_1#Schemes" rel="nofollow">modern standard</a>
includes two probabilistic signature schemes.</p>
<ol start="20" dir="auto">
<li><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji><strong>Challenge project</strong><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji> Implement OAEP.  In Python, one could use primitives from
<a href="https://pypi.org/project/pycryptodome/" rel="nofollow">cryptodome</a>.</li>
</ol>
<a id="user-content-references2">
</a><h4 tabindex="-1" dir="auto"><a></a><a id="user-content-references-1" class="anchor" aria-hidden="true" href="#references-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h4>
<ul dir="auto">
<li>Boneh, Twenty Years of Attacks on the RSA Cryptosystem. Available at <a href="https://crypto.stanford.edu/~dabo/pubs/papers/RSA-survey.pdf" rel="nofollow">crypto.standford.edu</a>.</li>
<li>Boyko, On the Security Properties of OAEP as an All-or-Nothing Transform, <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.1065.1367&amp;rep=rep1&amp;type=pdf" rel="nofollow">citeseerx.ist.psu.edu</a>. 1999.</li>
<li>Bleichenbacher, <a href="http://archiv.infsec.ethz.ch/education/fs08/secsem/bleichenbacher98.pdf" rel="nofollow">Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1</a>, 1998.</li>
<li>Hikima, Iwasaki, and Umeno, The reference distributions of Maurer's universal statistical test and its improved tests. <a href="https://arxiv.org/abs/2103.10660" rel="nofollow">arxiv.org/abs/2103.10660</a>, 2021.</li>
<li>Sidorenko, Schoenmakers, Concrete security of the blum-blum-shub pseudorandom generator.
<a href="https://www.scinapse.io/papers/2165645235" rel="nofollow">scinapse</a>, 2005.</li>
<li>M.M.J. Stevens, <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf" rel="nofollow">On Collisions for MD5</a> (Master's Thesis), 2007.</li>
<li>Wang, Feng, Lai, and Yu, <a href="https://eprint.iacr.org/2004/199" rel="nofollow">Collisions for Hash Functions MD4, MD5, HAVAL-128 and RIPEMD</a>, 2004.</li>
</ul>
<h2 tabindex="-1" dir="auto"><a id="user-content-iv-leveraging-intractability-discrete-logarithms" class="anchor" aria-hidden="true" href="#iv-leveraging-intractability-discrete-logarithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IV. Leveraging intractability: discrete logarithms</h2>
<p dir="auto">In the RSA cryptosystem, one subverts the encryption by finding the base <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> of the
exponentiation <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c21223909224afca54749906c4e29c91.svg"><img alt="$c=m^e,$" src="/sj-simmons/crypto/raw/main/svgs/c21223909224afca54749906c4e29c91.svg" valign="-3.1963519500000044px" width="55.08957464999999pt" height="14.116037099999998pt" style="max-width: 100%;"></a> modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f507d5050558ba240219861b52ba2f39.svg"><img alt="$n=pq,$" src="/sj-simmons/crypto/raw/main/svgs/f507d5050558ba240219861b52ba2f39.svg" valign="-3.1963502999999895px" width="52.549384799999984pt" height="10.2739725pt" style="max-width: 100%;"></a> where the exponent <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg"><img alt="$e$" src="/sj-simmons/crypto/raw/main/svgs/8cd34385ed61aca950a6b06d09fb50ac.svg" valign="0.0px" width="7.654137149999991pt" height="7.0776222pt" style="max-width: 100%;"></a> is known.
In a discrete logarithm problem, one knows the base and wants to find the exponent.</p>
<p dir="auto">Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> be a finite cyclic group of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg"><img alt="$n.$" src="/sj-simmons/crypto/raw/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a> And let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ebc6f9fefaeb3eabf7a11d5c7bb4e6a9.svg"><img alt="$g\in G$" src="/sj-simmons/crypto/raw/main/svgs/ebc6f9fefaeb3eabf7a11d5c7bb4e6a9.svg" valign="-3.196350299999991px" width="41.44613879999999pt" height="14.42921205pt" style="max-width: 100%;"></a> generate <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/395d7f03b14e3d07f456a9cf3a24cd2a.svg"><img alt="$G;$" src="/sj-simmons/crypto/raw/main/svgs/395d7f03b14e3d07f456a9cf3a24cd2a.svg" valign="-3.196350299999991px" width="17.49086789999999pt" height="14.42921205pt" style="max-width: 100%;"></a> i.e.,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2a3a0b1d82951b8989bc58c47f11fde4.svg"><img alt="$G = \langle g\rangle = \{g^\ell~|~ 0\le \ell &lt; n\}.$" src="/sj-simmons/crypto/raw/main/svgs/2a3a0b1d82951b8989bc58c47f11fde4.svg" valign="-4.109588999999991px" width="198.03078404999997pt" height="18.06580875pt" style="max-width: 100%;"></a> Now let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5cfe5d217b5faf309a321aba2f2e5d65.svg"><img alt="$h\in G$" src="/sj-simmons/crypto/raw/main/svgs/5cfe5d217b5faf309a321aba2f2e5d65.svg" valign="-0.6427030500000053px" width="42.48689609999999pt" height="12.05823135pt" style="max-width: 100%;"></a>, then of course
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c92e611bf40e5dbe151b1b5cefe2fb3d.svg"><img alt="$h = g^x$" src="/sj-simmons/crypto/raw/main/svgs/c92e611bf40e5dbe151b1b5cefe2fb3d.svg" valign="-3.1963503000000055px" width="47.27347514999998pt" height="14.611878599999999pt" style="max-width: 100%;"></a> for some integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> in the range <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/22454b19ff642fda89b605b08a319ab4.svg"><img alt="$0\le x &lt; n.$" src="/sj-simmons/crypto/raw/main/svgs/22454b19ff642fda89b605b08a319ab4.svg" valign="-2.2351411499999947px" width="75.88255949999999pt" height="12.82874835pt" style="max-width: 100%;"></a> This (unique) <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is the
<em>discrete logarithm</em> of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad9d098b937e46f9f58968551adac57.svg"><img alt="$h$" src="/sj-simmons/crypto/raw/main/svgs/2ad9d098b937e46f9f58968551adac57.svg" valign="0.0px" width="9.47111549999999pt" height="11.4155283pt" style="max-width: 100%;"></a> to the base <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/be2451a0e7253f40d6336b30d3eca49a.svg"><img alt="$g.$" src="/sj-simmons/crypto/raw/main/svgs/be2451a0e7253f40d6336b30d3eca49a.svg" valign="-3.1963502999999895px" width="12.996581399999991pt" height="10.2739725pt" style="max-width: 100%;"></a></p>
<p dir="auto">Given such a group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> along with a generator <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/34a5e0267da1d722f0aa361fafc47931.svg"><img alt="$g,$" src="/sj-simmons/crypto/raw/main/svgs/34a5e0267da1d722f0aa361fafc47931.svg" valign="-3.1963502999999895px" width="12.996581399999991pt" height="10.2739725pt" style="max-width: 100%;"></a> the associated <em>discrete logarithm problem</em>
is: given <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0ba7508d8c5c56d3b8c9cd58384cb930.svg"><img alt="$h\in G,$" src="/sj-simmons/crypto/raw/main/svgs/0ba7508d8c5c56d3b8c9cd58384cb930.svg" valign="-3.1963503000000055px" width="47.053120949999986pt" height="14.611878599999999pt" style="max-width: 100%;"></a> find <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> such that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/61fd231d88be6696e2b6d83a90357905.svg"><img alt="$g^x=h.$" src="/sj-simmons/crypto/raw/main/svgs/61fd231d88be6696e2b6d83a90357905.svg" valign="-3.1963503000000055px" width="52.661593049999986pt" height="14.611878599999999pt" style="max-width: 100%;"></a></p>
<p dir="auto">The obvious brute force algorithm for solving the discrete log problem —
trying <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/18c4a2fc6dceab120e649b2fb99db6b8.svg"><img alt="$x = 1, 2, \ldots$" src="/sj-simmons/crypto/raw/main/svgs/18c4a2fc6dceab120e649b2fb99db6b8.svg" valign="-3.196350299999994px" width="81.54079395pt" height="13.789957499999998pt" style="max-width: 100%;"></a> until <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55bf4011513de244655938e23c1db22b.svg"><img alt="$g^x=h$" src="/sj-simmons/crypto/raw/main/svgs/55bf4011513de244655938e23c1db22b.svg" valign="-3.1963503000000055px" width="48.09536984999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a>  — takes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1f08ccc9cd7309ba1e756c3d9345ad9f.svg"><img alt="$O(n)$" src="/sj-simmons/crypto/raw/main/svgs/1f08ccc9cd7309ba1e756c3d9345ad9f.svg" valign="-4.109589000000009px" width="35.64773519999999pt" height="16.438356pt" style="max-width: 100%;"></a> multiplications where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is
the order of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg"><img alt="$g$" src="/sj-simmons/crypto/raw/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg" valign="-3.1963502999999895px" width="8.430376349999989pt" height="10.2739725pt" style="max-width: 100%;"></a> and is therefore infeasible if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is large.
Meanwhile, the best algorithm for solving the discrete log problem over generic
cyclic groups <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> uses <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aea3a2d1b6dea2f0a1568ec4cb4269ad.svg"><img alt="$O(\sqrt{n})$" src="/sj-simmons/crypto/raw/main/svgs/aea3a2d1b6dea2f0a1568ec4cb4269ad.svg" valign="-4.109588999999997px" width="49.34640644999999pt" height="16.607258249999997pt" style="max-width: 100%;"></a> group multiplications — still
intractable for large enough <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg"><img alt="$n.$" src="/sj-simmons/crypto/raw/main/svgs/ea8d90fb4a8d92af94283e10af3efb57.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">As an example, let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9595f25e950e18dc0db79c1e486b286e.svg"><img alt="$p=303+2^{100}-3^{100}+5^{100}$" src="/sj-simmons/crypto/raw/main/svgs/9595f25e950e18dc0db79c1e486b286e.svg" valign="-3.1963503000000086px" width="200.39375565pt" height="16.5772266pt" style="max-width: 100%;"></a> (which is prime) and consider the
multiplicative group of units <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cd2ed76ff1f03db53e977fde3970b52f.svg"><img alt="$(\mathbb{Z}/p)^*.$" src="/sj-simmons/crypto/raw/main/svgs/cd2ed76ff1f03db53e977fde3970b52f.svg" valign="-4.109589000000009px" width="52.35746339999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">It is a theorem of Gauss that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cc450b1fd7ccdc41e54fbd9d0ee2bd9c.svg"><img alt="$(\mathbb{Z}/n)^*$" src="/sj-simmons/crypto/raw/main/svgs/cc450b1fd7ccdc41e54fbd9d0ee2bd9c.svg" valign="-4.109589000000009px" width="48.565654499999994pt" height="16.438356pt" style="max-width: 100%;"></a> is cyclic exactly when <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e3626c3d5b4d293ff9f2e6d691ec5bcf.svg"><img alt="$n=1, 2,$" src="/sj-simmons/crypto/raw/main/svgs/e3626c3d5b4d293ff9f2e6d691ec5bcf.svg" valign="-3.196350299999994px" width="60.09503279999999pt" height="13.789957499999998pt" style="max-width: 100%;"></a> or <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/43630ecd0d888ca765ce75b2d04bd1a7.svg"><img alt="$4,$" src="/sj-simmons/crypto/raw/main/svgs/43630ecd0d888ca765ce75b2d04bd1a7.svg" valign="-3.196350299999994px" width="12.785434199999989pt" height="13.789957499999998pt" style="max-width: 100%;"></a>
or <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/394d05645a9f1005d2570249301c9610.svg"><img alt="$p^k$" src="/sj-simmons/crypto/raw/main/svgs/394d05645a9f1005d2570249301c9610.svg" valign="-3.1963519499999897px" width="15.536596349999991pt" height="17.1525717pt" style="max-width: 100%;"></a> or <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7e61e44ab0fbd0b5c8dd3550580a45c4.svg"><img alt="$2p^k,$" src="/sj-simmons/crypto/raw/main/svgs/7e61e44ab0fbd0b5c8dd3550580a45c4.svg" valign="-3.1963519499999897px" width="29.14394504999999pt" height="17.1525717pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> is an odd prime and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg"><img alt="$k$" src="/sj-simmons/crypto/raw/main/svgs/63bb9849783d01d91403bc9a5fea12a2.svg" valign="0.0px" width="9.075367949999992pt" height="11.4155283pt" style="max-width: 100%;"></a> is a positive integer.</p>
<p dir="auto">Suppose we pick an element of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/838505e2dc3a37302351e398af15ddd4.svg"><img alt="$(\mathbb{Z}/p)^*,$" src="/sj-simmons/crypto/raw/main/svgs/838505e2dc3a37302351e398af15ddd4.svg" valign="-4.109589000000009px" width="52.35746339999999pt" height="16.438356pt" style="max-width: 100%;"></a> say <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ea4835d1c26256033519e6213a5629fd.svg"><img alt="$101\cdot 5^{77};$" src="/sj-simmons/crypto/raw/main/svgs/ea4835d1c26256033519e6213a5629fd.svg" valign="-3.1963503000000086px" width="63.24204479999999pt" height="16.5772266pt" style="max-width: 100%;"></a> how can we
quickly check if we've found a generator?  More generally, how can we quickly
compute the order of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0050672fe4d743f28b48538e1ebd3d53.svg"><img alt="$101\cdot 5^{77}?$" src="/sj-simmons/crypto/raw/main/svgs/0050672fe4d743f28b48538e1ebd3d53.svg" valign="0.0px" width="66.43841159999998pt" height="13.380876299999999pt" style="max-width: 100%;"></a> We know that the order our group is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/50233a696c2a1b6d8eca7fa677a806d6.svg"><img alt="$p-1,$" src="/sj-simmons/crypto/raw/main/svgs/50233a696c2a1b6d8eca7fa677a806d6.svg" valign="-3.196350299999994px" width="41.14719179999999pt" height="13.789957499999998pt" style="max-width: 100%;"></a> which happens
to have some small to middling prime factors and so easily decomposes using any
factoring algorithm.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import numlib as nl
p = 303+2**100-3**100+5**100
nl.factor(p-1)  # [2, 101, 2571953, 289269094313323, 52490897720515368208330287977576768339094101729]"><pre><span class="pl-k">import</span> <span class="pl-s1">numlib</span> <span class="pl-k">as</span> <span class="pl-s1">nl</span>
<span class="pl-s1">p</span> <span class="pl-c1">=</span> <span class="pl-c1">303</span><span class="pl-c1">+</span><span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">100</span><span class="pl-c1">-</span><span class="pl-c1">3</span><span class="pl-c1">**</span><span class="pl-c1">100</span><span class="pl-c1">+</span><span class="pl-c1">5</span><span class="pl-c1">**</span><span class="pl-c1">100</span>
<span class="pl-s1">nl</span>.<span class="pl-en">factor</span>(<span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)  <span class="pl-c"># [2, 101, 2571953, 289269094313323, 52490897720515368208330287977576768339094101729]</span></pre></div>
<p dir="auto">Now, we know that the order of any element of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aefaead8ac34b3adac463c51a575eee4.svg"><img alt="$(\mathbb{Z}/p)^*$" src="/sj-simmons/crypto/raw/main/svgs/aefaead8ac34b3adac463c51a575eee4.svg" valign="-4.109589000000009px" width="46.96934549999999pt" height="16.438356pt" style="max-width: 100%;"></a> must divide <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/585cf0d6605a58bb5df9e272ae37244a.svg"><img alt="$p-1$" src="/sj-simmons/crypto/raw/main/svgs/585cf0d6605a58bb5df9e272ae37244a.svg" valign="-3.196350299999994px" width="36.58096694999999pt" height="13.789957499999998pt" style="max-width: 100%;"></a>.  Using the
list in the code block we can quickly find all divisors of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/585cf0d6605a58bb5df9e272ae37244a.svg"><img alt="$p-1$" src="/sj-simmons/crypto/raw/main/svgs/585cf0d6605a58bb5df9e272ae37244a.svg" valign="-3.196350299999994px" width="36.58096694999999pt" height="13.789957499999998pt" style="max-width: 100%;"></a> and check each in turn, in increasing
order starting from 2, until we find the order of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bf0d9e8ca0cde837b6b341efb722382f.svg"><img alt="$101\cdot 5^{77}.$" src="/sj-simmons/crypto/raw/main/svgs/bf0d9e8ca0cde837b6b341efb722382f.svg" valign="0.0px" width="63.24204479999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a>  This is exactly what
numlib's function <strong>mulorder</strong> does:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = 303+2**100-3**100+5**100
F = nl.Zmodp(p)  # F is now the group (Z/p)*
g = F(101*5**77) # g is now an element of F
g_order = nl.mulorder(g, exponent = p-1)
g_order == p-1  # True"><pre><span class="pl-s1">p</span> <span class="pl-c1">=</span> <span class="pl-c1">303</span><span class="pl-c1">+</span><span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">100</span><span class="pl-c1">-</span><span class="pl-c1">3</span><span class="pl-c1">**</span><span class="pl-c1">100</span><span class="pl-c1">+</span><span class="pl-c1">5</span><span class="pl-c1">**</span><span class="pl-c1">100</span>
<span class="pl-v">F</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">Zmodp</span>(<span class="pl-s1">p</span>)  <span class="pl-c"># F is now the group (Z/p)*</span>
<span class="pl-s1">g</span> <span class="pl-c1">=</span> <span class="pl-v">F</span>(<span class="pl-c1">101</span><span class="pl-c1">*</span><span class="pl-c1">5</span><span class="pl-c1">**</span><span class="pl-c1">77</span>) <span class="pl-c"># g is now an element of F</span>
<span class="pl-s1">g_order</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-en">mulorder</span>(<span class="pl-s1">g</span>, <span class="pl-s1">exponent</span> <span class="pl-c1">=</span> <span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)
<span class="pl-s1">g_order</span> <span class="pl-c1">==</span> <span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>  <span class="pl-c"># True</span></pre></div>
<p dir="auto">Technical Notes:</p>
<ul dir="auto">
<li>Again, since we know that the order of any element divides the order of the group, and
the order of the group is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/50233a696c2a1b6d8eca7fa677a806d6.svg"><img alt="$p-1,$" src="/sj-simmons/crypto/raw/main/svgs/50233a696c2a1b6d8eca7fa677a806d6.svg" valign="-3.196350299999994px" width="41.14719179999999pt" height="13.789957499999998pt" style="max-width: 100%;"></a> we have included that information as argument to the
parameter <strong>exponent</strong> since otherwise mulorder would have resorted to brute force which
would have been painfully slow.</li>
<li>Each time one calls mulorder as in the code block above, it has to (re)factor <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad55de588e0025342173e657988d28d.svg"><img alt="$p-1.$" src="/sj-simmons/crypto/raw/main/svgs/2ad55de588e0025342173e657988d28d.svg" valign="-3.196350299999994px" width="41.14719179999999pt" height="13.789957499999998pt" style="max-width: 100%;"></a> Alternatively, if you want to compute the order of more than one element, consider calling the helper function <strong>mulorder_</strong> like this:
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="divs = nl.divisors(p-1)  # a list of all divisors greater than 1, in increasing order
g_order = nl.mulorder_(g, divs)  # mulorder_ accepts a list of potential orders"><pre><span class="pl-s1">divs</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-en">divisors</span>(<span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)  <span class="pl-c"># a list of all divisors greater than 1, in increasing order</span>
<span class="pl-s1">g_order</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-en">mulorder_</span>(<span class="pl-s1">g</span>, <span class="pl-s1">divs</span>)  <span class="pl-c"># mulorder_ accepts a list of potential orders</span></pre></div>
</li>
</ul>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-9" class="anchor" aria-hidden="true" href="#exercise-9"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol dir="auto">
<li>With <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/de8807f55ec1b41501f8c727c96cd351.svg"><img alt="$p = 303+2^{100}-3^{100}+5^{100}$" src="/sj-simmons/crypto/raw/main/svgs/de8807f55ec1b41501f8c727c96cd351.svg" valign="-3.1963503000000086px" width="200.39375565pt" height="16.5772266pt" style="max-width: 100%;"></a>, compute the probability that a uniformly randomly chosen element of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aefaead8ac34b3adac463c51a575eee4.svg"><img alt="$(\mathbb{Z}/p)^*$" src="/sj-simmons/crypto/raw/main/svgs/aefaead8ac34b3adac463c51a575eee4.svg" valign="-4.109589000000009px" width="46.96934549999999pt" height="16.438356pt" style="max-width: 100%;"></a> is a generator.  <g-emoji class="g-emoji" alias="heavy_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png">✔️</g-emoji> <strong>Marina, and Alvaro, who computed this in class.</strong></li>
</ol>
<h3 tabindex="-1" dir="auto"><a id="user-content-elgamal-encryption" class="anchor" aria-hidden="true" href="#elgamal-encryption"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ElGamal encryption</h3>
<p dir="auto">So, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1b297fc6b8d56cb07f03baefbffc7b60.svg"><img alt="$p = 303+2^{100}-3^{100}+5^{100},$" src="/sj-simmons/crypto/raw/main/svgs/1b297fc6b8d56cb07f03baefbffc7b60.svg" valign="-3.1963503000000086px" width="205.78188344999998pt" height="16.5772266pt" style="max-width: 100%;"></a> then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6f573fe7668b354708639d74a1e1375d.svg"><img alt="$g = 101\cdot 5^{77}$" src="/sj-simmons/crypto/raw/main/svgs/6f573fe7668b354708639d74a1e1375d.svg" valign="-3.1963503000000086px" width="88.20190169999998pt" height="16.5772266pt" style="max-width: 100%;"></a> is a generator of
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2518d400562631d8397fd611eeb3270e.svg"><img alt="$G=(\mathbb{Z}/p)^*.$" src="/sj-simmons/crypto/raw/main/svgs/2518d400562631d8397fd611eeb3270e.svg" valign="-4.109589000000009px" width="87.19973789999999pt" height="16.438356pt" style="max-width: 100%;"></a> How can we use the intractability of the discrete log problem for
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e14d5fb37551a22951e7ca3b5bda3eb4.svg"><img alt="$G=\langle g\rangle$" src="/sj-simmons/crypto/raw/main/svgs/e14d5fb37551a22951e7ca3b5bda3eb4.svg" valign="-4.109589000000009px" width="56.05806524999999pt" height="16.438356pt" style="max-width: 100%;"></a> to set up a public-key encryption protocol? Note: <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> here
is a 233-bit prime so that the (currently optimal) number of multiplications required
to solve a discrete log problem in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> is of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/019257529d169d4984cc8fe5c84abb02.svg"><img alt="$\sqrt{p-1},$" src="/sj-simmons/crypto/raw/main/svgs/019257529d169d4984cc8fe5c84abb02.svg" valign="-3.7808578499999896px" width="54.84583169999999pt" height="16.438356pt" style="max-width: 100%;"></a> a number well beyond <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/465a45149f588e5dd597dae2faa28f8f.svg"><img alt="$2^{100}.$" src="/sj-simmons/crypto/raw/main/svgs/465a45149f588e5dd597dae2faa28f8f.svg" valign="0.0px" width="33.264976799999985pt" height="13.380876299999999pt" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://en.wikipedia.org/wiki/ElGamal_encryption" rel="nofollow">ElGamal encryption</a>
is a public-key scheme that works over any finite cyclic group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg"><img alt="$G.$" src="/sj-simmons/crypto/raw/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg" valign="0.0px" width="17.49086789999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> denote the order (cardinality)
of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> and let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ebc6f9fefaeb3eabf7a11d5c7bb4e6a9.svg"><img alt="$g\in G$" src="/sj-simmons/crypto/raw/main/svgs/ebc6f9fefaeb3eabf7a11d5c7bb4e6a9.svg" valign="-3.196350299999991px" width="41.44613879999999pt" height="14.42921205pt" style="max-width: 100%;"></a> be a generator. In the following description of the ElGamal
protocol, we use the notation of a multiplicative group.
The ambient system in which the protocol takes place is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aa3b1d6eee2297a4b62305f3cd94e674.svg"><img alt="$\{G, g, n\}$" src="/sj-simmons/crypto/raw/main/svgs/aa3b1d6eee2297a4b62305f3cd94e674.svg" valign="-4.109589000000009px" width="62.27206259999999pt" height="16.438356pt" style="max-width: 100%;"></a> which is assumed
to be known by all parties.</p>
<p dir="auto">Suppose that you want to receive and decrypt private messages. To generate your public
and private keys, you</p>
<ul dir="auto">
<li>pick uniformly at random an element <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a770caebefe52c86b12bcf44e7f33d55.svg"><img alt="$d\in \mathbb{Z}/n,$" src="/sj-simmons/crypto/raw/main/svgs/a770caebefe52c86b12bcf44e7f33d55.svg" valign="-4.109589000000009px" width="62.258352749999986pt" height="16.438356pt" style="max-width: 100%;"></a> which is your private key; then you</li>
<li>compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/274af25ec94875fe82cf27e7982f4746.svg"><img alt="$h=g^d\in G,$" src="/sj-simmons/crypto/raw/main/svgs/274af25ec94875fe82cf27e7982f4746.svg" valign="-3.1963519499999897px" width="85.06610475pt" height="17.1525717pt" style="max-width: 100%;"></a> which is your public key.</li>
</ul>
<p dir="auto">The message space is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg"><img alt="$G.$" src="/sj-simmons/crypto/raw/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg" valign="0.0px" width="17.49086789999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> How does Athena send you a private message?  Assume that Athena's
message is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5663fe9fb529679d79d126638e141b24.svg"><img alt="$m\in G.$" src="/sj-simmons/crypto/raw/main/svgs/5663fe9fb529679d79d126638e141b24.svg" valign="-0.6427030499999906px" width="52.015106549999985pt" height="11.8755648pt" style="max-width: 100%;"></a> To encrypt <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0e51a2dede42189d77627c4d742822c3.svg"><img alt="$m$" src="/sj-simmons/crypto/raw/main/svgs/0e51a2dede42189d77627c4d742822c3.svg" valign="0.0px" width="14.433101099999991pt" height="7.0776222pt" style="max-width: 100%;"></a>, Athena</p>
<ul dir="auto">
<li>chooses uniformly at random an element <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/df8e575346b8857b3e847ff8a9905863.svg"><img alt="$r\in \mathbb{Z}/n,$" src="/sj-simmons/crypto/raw/main/svgs/df8e575346b8857b3e847ff8a9905863.svg" valign="-4.109589000000009px" width="61.57534349999999pt" height="16.438356pt" style="max-width: 100%;"></a></li>
<li>computes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8ddbaa7afc4d43a031f45c5ad83277e8.svg"><img alt="$c_1 = g^r\in G,$" src="/sj-simmons/crypto/raw/main/svgs/8ddbaa7afc4d43a031f45c5ad83277e8.svg" valign="-3.196350299999991px" width="89.69757884999999pt" height="14.42921205pt" style="max-width: 100%;"></a></li>
<li>computes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e5e2cf94f93fc22cb5aae6749f1d6ae9.svg"><img alt="$c_2 = h^r m \in G,$" src="/sj-simmons/crypto/raw/main/svgs/e5e2cf94f93fc22cb5aae6749f1d6ae9.svg" valign="-3.1963503000000055px" width="105.1714356pt" height="14.611878599999999pt" style="max-width: 100%;"></a></li>
<li>discards <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg"><img alt="$r$" src="/sj-simmons/crypto/raw/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg" valign="0.0px" width="7.87295519999999pt" height="7.0776222pt" style="max-width: 100%;"></a> or at least keeps it secret;</li>
<li>Athena's ciphertext to you is then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4327eeb9c322fccbfc093a3ac98cc9ff.svg"><img alt="$(c_1, c_2)\in G\times G.$" src="/sj-simmons/crypto/raw/main/svgs/4327eeb9c322fccbfc093a3ac98cc9ff.svg" valign="-4.109589000000009px" width="119.66568569999997pt" height="16.438356pt" style="max-width: 100%;"></a></li>
</ul>
<p dir="auto">To decrypt Athena's message, you</p>
<ul dir="auto">
<li>compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/45d22b950faebf3fca19d3eeebb0d877.svg"><img alt="$c_2 c_1^{-d}\in G.$" src="/sj-simmons/crypto/raw/main/svgs/45d22b950faebf3fca19d3eeebb0d877.svg" valign="-4.383444450000004px" width="77.12306744999998pt" height="19.406267099999997pt" style="max-width: 100%;"></a></li>
</ul>
<p dir="auto">Why does the protocol above work? First, let us check that decryption actually returns the
plaintext <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/56521f075375598a29eddad33e5c7f1f.svg"><img alt="$m:$" src="/sj-simmons/crypto/raw/main/svgs/56521f075375598a29eddad33e5c7f1f.svg" valign="0.0px" width="23.56542374999999pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e6f8bb5fc0e0ec2c66764b7e486a6be.svg"><img alt="$$c_2 c_1^{-d} = h^r m (g^r)^{-d} = (g^d)^r(g^{dr})^{-1} m= g^{dr}(g^{dr})^{-1} m = m.$$" src="/sj-simmons/crypto/raw/main/svgs/2e6f8bb5fc0e0ec2c66764b7e486a6be.svg" valign="0.0px" width="417.38090459999995pt" height="19.406267099999997pt" style="max-width: 100%;"></a></p>
<p dir="auto">The quantity <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a5fe6fdc0387aab332072e9770077438.svg"><img alt="$h^r$" src="/sj-simmons/crypto/raw/main/svgs/a5fe6fdc0387aab332072e9770077438.svg" valign="0.0px" width="15.928562099999992pt" height="11.4155283pt" style="max-width: 100%;"></a>, which is called the <em>shared secret</em>, obscures
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg"><img alt="$r$" src="/sj-simmons/crypto/raw/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg" valign="0.0px" width="7.87295519999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and combines with your decryption key <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> in such a way that it is not leaked.
It is best to throw <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg"><img alt="$r$" src="/sj-simmons/crypto/raw/main/svgs/89f2e0d2d24bcf44db73aab8fc03252c.svg" valign="0.0px" width="7.87295519999999pt" height="7.0776222pt" style="max-width: 100%;"></a> away after <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a5fe6fdc0387aab332072e9770077438.svg"><img alt="$h^r$" src="/sj-simmons/crypto/raw/main/svgs/a5fe6fdc0387aab332072e9770077438.svg" valign="0.0px" width="15.928562099999992pt" height="11.4155283pt" style="max-width: 100%;"></a> is computed since, if it is leaked, an adversary
can compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1b489ce90db46c39837d44ef896a93bf.svg"><img alt="$h^{-r} c_2=h^{-r} h^r m =m.$" src="/sj-simmons/crypto/raw/main/svgs/1b489ce90db46c39837d44ef896a93bf.svg" valign="-2.4657286500000097px" width="162.5552511pt" height="15.55438335pt" style="max-width: 100%;"></a></p>
<p dir="auto">Let us test drive ElGamal encryption.  To encrypt human-readable message (which may need to
be split into pieces), let us use <strong>OS2IP</strong> to map a byte-string to an integer when encrypting
(as in the RSA section) and <strong>I2OSP</strong> to map the other way when decrypting.</p>
<p dir="auto">Note that, since <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/de8807f55ec1b41501f8c727c96cd351.svg"><img alt="$p = 303+2^{100}-3^{100}+5^{100}$" src="/sj-simmons/crypto/raw/main/svgs/de8807f55ec1b41501f8c727c96cd351.svg" valign="-3.1963503000000086px" width="200.39375565pt" height="16.5772266pt" style="max-width: 100%;"></a> is 233-bit, we can only encode
byte-strings of length <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/519afd8a9f92cd0d1b02140b3522ffde.svg"><img alt="$\lfloor\log_{256}(p-1)\rfloor=29$" src="/sj-simmons/crypto/raw/main/svgs/519afd8a9f92cd0d1b02140b3522ffde.svg" valign="-4.109589000000009px" width="144.04681499999998pt" height="16.438356pt" style="max-width: 100%;"></a> characters.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-10" class="anchor" aria-hidden="true" href="#exercise-10"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="2" dir="auto">
<li>
<p dir="auto">Using the group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>  and generator <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg"><img alt="$g$" src="/sj-simmons/crypto/raw/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg" valign="-3.1963502999999895px" width="8.430376349999989pt" height="10.2739725pt" style="max-width: 100%;"></a> defined above, you set up the following private and public keys:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import numlib as nl
p = 303+2**100-3**100+5**100
F = nl.Zmodp(p)
g = F(101*5**77)
d = 0x4907b21cad05d4c8fa06b35f0fca7500755116d46124a5ccf9392c9e01
h = g**d"><pre><span class="pl-k">import</span> <span class="pl-s1">numlib</span> <span class="pl-k">as</span> <span class="pl-s1">nl</span>
<span class="pl-s1">p</span> <span class="pl-c1">=</span> <span class="pl-c1">303</span><span class="pl-c1">+</span><span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">100</span><span class="pl-c1">-</span><span class="pl-c1">3</span><span class="pl-c1">**</span><span class="pl-c1">100</span><span class="pl-c1">+</span><span class="pl-c1">5</span><span class="pl-c1">**</span><span class="pl-c1">100</span>
<span class="pl-v">F</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">Zmodp</span>(<span class="pl-s1">p</span>)
<span class="pl-s1">g</span> <span class="pl-c1">=</span> <span class="pl-v">F</span>(<span class="pl-c1">101</span><span class="pl-c1">*</span><span class="pl-c1">5</span><span class="pl-c1">**</span><span class="pl-c1">77</span>)
<span class="pl-s1">d</span> <span class="pl-c1">=</span> <span class="pl-c1">0x4907b21cad05d4c8fa06b35f0fca7500755116d46124a5ccf9392c9e01</span>
<span class="pl-s1">h</span> <span class="pl-c1">=</span> <span class="pl-s1">g</span><span class="pl-c1">**</span><span class="pl-s1">d</span></pre></div>
<p dir="auto">Simmons uses your public key to encrypt two byte-string messages.</p>
<p dir="auto">First, he encodes a short quote that, without spaces and with poor grammar, is exactly
29 characters. The ciphertext is:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(0xfefc30f69ef7776dbdf47668de5807036ee6bd33c4f357adc49c35dc8a, 0x7c86628dd471891145fe7393c83373bf8628cb25ad0a702bfd9f230982)"><pre>(<span class="pl-c1">0xfefc30f69ef7776dbdf47668de5807036ee6bd33c4f357adc49c35dc8a</span>, <span class="pl-c1">0x7c86628dd471891145fe7393c83373bf8628cb25ad0a702bfd9f230982</span>)</pre></div>
<p dir="auto">Then Simmons encodes and encrypts a long byte-string that has to be broken up. Below are the
resulting ciphertexts for each piece in turn.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ciphertexts = [
(0x1a08226a7d5d5d569caed0183b97d045eab3fca31d6c3670d2efbe15d7, 0x73e4612f97caecfdc008028ce29511ac8fee60768e3464d4c3bb94fb96),
(0xbfd5eec2601c152a3d565efcad12ef2239a3cc2bdbdaebae10743f48b4, 0x6c59e0277921da40bd2ae2669838ee0adfeb1d23046991a20d06313bf0),
(0x414ff938f1efd2caf5a007ddebb682e12b6f6b1ca41d2a8ef1950ed8d2, 0xb4b9432c9951583b7307f406059833c5dc5c6a7105a08dc1785460bbcf),
(0xa000191cfaad8a381c8fe663bd77bffdfa87b7c43fcbab09031d51edf1, 0x203f992eb7d93e73f790bd7e95572cda0bf5767b70f86819e30e0fd022),
(0x6a929a7d396fc202ecbd98f4a3f94773fc1794bcb6ff0a1975eb2b5e39, 0xa8344b9877e4e7f3a69f9f72fc861dfe6f57724d40c28272eeb77413aa),
(0xa2c2df4112fd7b1593ef1adee27b843270fef39854976108404c79495e, 0xeffb38521b000e7b9955907492b62f8da9dc9d73c010d81f8f0acd49e1),
(0x99697df71db1d265dbb7895cca94ad5aeec0295125f5c5b776db0a3fff, 0x30e58722c80d0e917e6205486f0c862ca10c1a6569e60d06340360d692)]"><pre><span class="pl-s1">ciphertexts</span> <span class="pl-c1">=</span> [
(<span class="pl-c1">0x1a08226a7d5d5d569caed0183b97d045eab3fca31d6c3670d2efbe15d7</span>, <span class="pl-c1">0x73e4612f97caecfdc008028ce29511ac8fee60768e3464d4c3bb94fb96</span>),
(<span class="pl-c1">0xbfd5eec2601c152a3d565efcad12ef2239a3cc2bdbdaebae10743f48b4</span>, <span class="pl-c1">0x6c59e0277921da40bd2ae2669838ee0adfeb1d23046991a20d06313bf0</span>),
(<span class="pl-c1">0x414ff938f1efd2caf5a007ddebb682e12b6f6b1ca41d2a8ef1950ed8d2</span>, <span class="pl-c1">0xb4b9432c9951583b7307f406059833c5dc5c6a7105a08dc1785460bbcf</span>),
(<span class="pl-c1">0xa000191cfaad8a381c8fe663bd77bffdfa87b7c43fcbab09031d51edf1</span>, <span class="pl-c1">0x203f992eb7d93e73f790bd7e95572cda0bf5767b70f86819e30e0fd022</span>),
(<span class="pl-c1">0x6a929a7d396fc202ecbd98f4a3f94773fc1794bcb6ff0a1975eb2b5e39</span>, <span class="pl-c1">0xa8344b9877e4e7f3a69f9f72fc861dfe6f57724d40c28272eeb77413aa</span>),
(<span class="pl-c1">0xa2c2df4112fd7b1593ef1adee27b843270fef39854976108404c79495e</span>, <span class="pl-c1">0xeffb38521b000e7b9955907492b62f8da9dc9d73c010d81f8f0acd49e1</span>),
(<span class="pl-c1">0x99697df71db1d265dbb7895cca94ad5aeec0295125f5c5b776db0a3fff</span>, <span class="pl-c1">0x30e58722c80d0e917e6205486f0c862ca10c1a6569e60d06340360d692</span>)]</pre></div>
<p dir="auto">Decode both of Simmons' messages.</p>
</li>
</ol>
<h3 tabindex="-1" dir="auto"><a id="user-content-abstract-algebraic-formulation-and-complexity" class="anchor" aria-hidden="true" href="#abstract-algebraic-formulation-and-complexity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Abstract algebraic formulation and complexity</h3>
<p dir="auto">Unsurprisingly, not all groups are created equal when it comes to the difficulty of their
associated discrete log problems.  For example, as we will work out below, it's easy to solve
the discrete log problem in the additive group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> (which is of course cyclic).
This is perhaps confusing because any cyclic group — even those in which the
discrete log problem is presumably hard — is, we know, isomorphic to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b2db6c8686053451d402312789bf8098.svg"><img alt="$\mathbb{Z}/n.$" src="/sj-simmons/crypto/raw/main/svgs/b2db6c8686053451d402312789bf8098.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a>
We will also sort this out.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercises-9" class="anchor" aria-hidden="true" href="#exercises-9"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercises</h4>
<ol start="2" dir="auto">
<li>
<p dir="auto">Show that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e705e5c479179708f819faf83719165b.svg"><img alt="$ax \equiv b \mod n$" src="/sj-simmons/crypto/raw/main/svgs/e705e5c479179708f819faf83719165b.svg" valign="0.0px" width="104.86835864999999pt" height="11.4155283pt" style="max-width: 100%;"></a> has an integer solution <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> if and only if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b7ef106590bc9fe0035c159ad815b2af.svg"><img alt="$\gcd(a, n)$" src="/sj-simmons/crypto/raw/main/svgs/b7ef106590bc9fe0035c159ad815b2af.svg" valign="-4.109589000000009px" width="63.30493124999998pt" height="16.438356pt" style="max-width: 100%;"></a> divides <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1dbcacc2d4b4bdd5297ea54a5941af54.svg"><img alt="$b.$" src="/sj-simmons/crypto/raw/main/svgs/1dbcacc2d4b4bdd5297ea54a5941af54.svg" valign="0.0px" width="11.62102094999999pt" height="11.4155283pt" style="max-width: 100%;"></a></p>
</li>
<li>
<p dir="auto">Show that if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e705e5c479179708f819faf83719165b.svg"><img alt="$ax \equiv b \mod n$" src="/sj-simmons/crypto/raw/main/svgs/e705e5c479179708f819faf83719165b.svg" valign="0.0px" width="104.86835864999999pt" height="11.4155283pt" style="max-width: 100%;"></a> has an integer solution then the corresponding equation <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d669bf55f3460fc469e923f439de136.svg"><img alt="$ax = b$" src="/sj-simmons/crypto/raw/main/svgs/2d669bf55f3460fc469e923f439de136.svg" valign="0.0px" width="47.05656944999999pt" height="11.4155283pt" style="max-width: 100%;"></a> in the additive group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> has exactly <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b7ef106590bc9fe0035c159ad815b2af.svg"><img alt="$\gcd(a, n)$" src="/sj-simmons/crypto/raw/main/svgs/b7ef106590bc9fe0035c159ad815b2af.svg" valign="-4.109589000000009px" width="63.30493124999998pt" height="16.438356pt" style="max-width: 100%;"></a> (mutually distinct) solutions.</p>
</li>
</ol>
<p dir="auto">Now, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a1fea3b02628c1d1bf61645322c010ad.svg"><img alt="$\gcd(a, n) = 1$" src="/sj-simmons/crypto/raw/main/svgs/a1fea3b02628c1d1bf61645322c010ad.svg" valign="-4.109589000000009px" width="93.44177204999998pt" height="16.438356pt" style="max-width: 100%;"></a> then, in the additive group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4ee8f29e8fc6ff907c10277ad56123ba.svg"><img alt="$\mathbb{Z}/n,$" src="/sj-simmons/crypto/raw/main/svgs/4ee8f29e8fc6ff907c10277ad56123ba.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a> the equation <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d669bf55f3460fc469e923f439de136.svg"><img alt="$ax = b$" src="/sj-simmons/crypto/raw/main/svgs/2d669bf55f3460fc469e923f439de136.svg" valign="0.0px" width="47.05656944999999pt" height="11.4155283pt" style="max-width: 100%;"></a> has exactly one
solution; moreover, as we previously showed, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is a generator <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/405bfe6c98d6196adb3a25cc9b9e0078.svg"><img alt="$\gcd(a, n) = 1,$" src="/sj-simmons/crypto/raw/main/svgs/405bfe6c98d6196adb3a25cc9b9e0078.svg" valign="-4.109589000000009px" width="98.00799524999998pt" height="16.438356pt" style="max-width: 100%;"></a> and
finding <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> that satisfies <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2d669bf55f3460fc469e923f439de136.svg"><img alt="$ax = b$" src="/sj-simmons/crypto/raw/main/svgs/2d669bf55f3460fc469e923f439de136.svg" valign="0.0px" width="47.05656944999999pt" height="11.4155283pt" style="max-width: 100%;"></a> given <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg"><img alt="$b$" src="/sj-simmons/crypto/raw/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg" valign="0.0px" width="7.054796099999991pt" height="11.4155283pt" style="max-width: 100%;"></a> is exactly the discrete log problem
in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b2db6c8686053451d402312789bf8098.svg"><img alt="$\mathbb{Z}/n.$" src="/sj-simmons/crypto/raw/main/svgs/b2db6c8686053451d402312789bf8098.svg" valign="-4.109589000000009px" width="33.61125074999999pt" height="16.438356pt" style="max-width: 100%;"></a>  But, using the ring structure of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> we can write down the solution
to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/89d7997bfc3f835899e82d54d91b9509.svg"><img alt="$ax = b;$" src="/sj-simmons/crypto/raw/main/svgs/89d7997bfc3f835899e82d54d91b9509.svg" valign="-3.1963503000000055px" width="51.62279264999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> it's just <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/eb9f6b62b93bae9e343e7294e50baec0.svg"><img alt="$x = a^{-1} b$" src="/sj-simmons/crypto/raw/main/svgs/eb9f6b62b93bae9e343e7294e50baec0.svg" valign="0.0px" width="64.70502719999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a>.  In practice, we of course use the Euclidean algorithm to
(multiplicatively) invert <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b14a01741ea4066baa685453531610d9.svg"><img alt="$a.$" src="/sj-simmons/crypto/raw/main/svgs/b14a01741ea4066baa685453531610d9.svg" valign="0.0px" width="13.25537729999999pt" height="7.0776222pt" style="max-width: 100%;"></a></p>
<p dir="auto">Now, let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> be any finite cyclic group.  Then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> is isomorphic to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is
the order of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg"><img alt="$G.$" src="/sj-simmons/crypto/raw/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg" valign="0.0px" width="17.49086789999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>  How is it that we cannot simply solve a particular discrete log in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> by
mapping to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a>, solving it there, and mapping back?</p>
<p dir="auto">In fact, isomorphisms <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4cbd13474edd9e6ab3fd1522081a97f2.svg"><img alt="$G \rightarrow \mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/4cbd13474edd9e6ab3fd1522081a97f2.svg" valign="-4.109589000000009px" width="67.54027004999999pt" height="16.438356pt" style="max-width: 100%;"></a> are in one-to-one correspondence with generators
of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/88bbe44eed40f0a85770744259fe6ecf.svg"><img alt="$G:$" src="/sj-simmons/crypto/raw/main/svgs/88bbe44eed40f0a85770744259fe6ecf.svg" valign="0.0px" width="22.05696569999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg"><img alt="$g$" src="/sj-simmons/crypto/raw/main/svgs/3cf4fbd05970446973fc3d9fa3fe3c41.svg" valign="-3.1963502999999895px" width="8.430376349999989pt" height="10.2739725pt" style="max-width: 100%;"></a> generates <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>, then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6386ac57bc921ab85134393337273c3e.svg"><img alt="$n \mapsto g^n$" src="/sj-simmons/crypto/raw/main/svgs/6386ac57bc921ab85134393337273c3e.svg" valign="-3.1963519500000044px" width="51.99385784999998pt" height="14.116037099999998pt" style="max-width: 100%;"></a> is an isomorphism <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6cc4110c6d777bd74de2bf9c4c12876c.svg"><img alt="$\mathbb{Z}/n\rightarrow G,$" src="/sj-simmons/crypto/raw/main/svgs/6cc4110c6d777bd74de2bf9c4c12876c.svg" valign="-4.109589000000009px" width="72.10649489999999pt" height="16.438356pt" style="max-width: 100%;"></a> and those
are the only isomorphisms since generators must map to generators. Given <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0ba7508d8c5c56d3b8c9cd58384cb930.svg"><img alt="$h\in G,$" src="/sj-simmons/crypto/raw/main/svgs/0ba7508d8c5c56d3b8c9cd58384cb930.svg" valign="-3.1963503000000055px" width="47.053120949999986pt" height="14.611878599999999pt" style="max-width: 100%;"></a> in the range of such
an isomorphism, and finding its pre-image <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, is precisely a particular discrete log problem in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg"><img alt="$G.$" src="/sj-simmons/crypto/raw/main/svgs/e1cceaa699790e2e9b0a14a958434239.svg" valign="0.0px" width="17.49086789999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>
In other words, the discrete log problem in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> is equivalent to making explicit the isomorphism determined
by a generator <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/be2451a0e7253f40d6336b30d3eca49a.svg"><img alt="$g.$" src="/sj-simmons/crypto/raw/main/svgs/be2451a0e7253f40d6336b30d3eca49a.svg" valign="-3.1963502999999895px" width="12.996581399999991pt" height="10.2739725pt" style="max-width: 100%;"></a></p>
<p dir="auto">Furthermore, the difficulty of the discrete log problem in a given group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> does not depend on a
choice of generator.  In fact, one has the usual change of base formula,</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/72a3f83803814d251ca2805ead8c7ea7.svg"><img alt="$$\log_{g_1}x = \log_{g_1}g_2 \cdot \log_{g_2}x,$$" src="/sj-simmons/crypto/raw/main/svgs/72a3f83803814d251ca2805ead8c7ea7.svg" valign="0.0px" width="185.23040084999997pt" height="17.67121125pt" style="max-width: 100%;"></a></p>
<p dir="auto">where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a50c3a6cce0c5b640cc5bef1d62b99bd.svg"><img alt="$g_1$" src="/sj-simmons/crypto/raw/main/svgs/a50c3a6cce0c5b640cc5bef1d62b99bd.svg" valign="-3.1963502999999895px" width="14.393129849999989pt" height="10.2739725pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3a0999540a345758e8259a30f523c1c9.svg"><img alt="$g_2$" src="/sj-simmons/crypto/raw/main/svgs/3a0999540a345758e8259a30f523c1c9.svg" valign="-3.1963502999999895px" width="14.393129849999989pt" height="10.2739725pt" style="max-width: 100%;"></a> are both generators; so that, once one computes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/595531b6a66d60a257c7603e1e50ca85.svg"><img alt="$\log_{g_1}g_2,$" src="/sj-simmons/crypto/raw/main/svgs/595531b6a66d60a257c7603e1e50ca85.svg" valign="-6.255682950000006px" width="57.40444874999999pt" height="17.67121125pt" style="max-width: 100%;"></a> solving
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/affcdb988048d6cd9fb2c63e469762d6.svg"><img alt="$h = \log_{g_1}x$" src="/sj-simmons/crypto/raw/main/svgs/affcdb988048d6cd9fb2c63e469762d6.svg" valign="-6.255682950000006px" width="78.40691594999998pt" height="17.67121125pt" style="max-width: 100%;"></a> is exactly as hard as solving <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/be64356c55dd094e8af478ebb31ed378.svg"><img alt="$h = \log_{g_2}x.$" src="/sj-simmons/crypto/raw/main/svgs/be64356c55dd094e8af478ebb31ed378.svg" valign="-6.255682950000006px" width="82.97313915pt" height="17.67121125pt" style="max-width: 100%;"></a></p>
<p dir="auto">The ElGamal encryption scheme works over any cyclic group. However, to guarantee security
in practice, one wants a group for which the discrete log problem is computationally infeasible
but whose binary operation admits efficient implementation.</p>
<p dir="auto">As above, we can use the multiplicative group of units in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg"><img alt="$\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg" valign="-4.109589000000009px" width="27.448716899999987pt" height="16.438356pt" style="max-width: 100%;"></a> or, more generally,
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/264a92788babc1caf5fc3d20d89796f8.svg"><img alt="$(\mathbb{Z}/q)^*$" src="/sj-simmons/crypto/raw/main/svgs/264a92788babc1caf5fc3d20d89796f8.svg" valign="-4.109589000000009px" width="46.626864899999994pt" height="16.438356pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a45d222501990a73ef2943bc648355e0.svg"><img alt="$q=p^n$" src="/sj-simmons/crypto/raw/main/svgs/a45d222501990a73ef2943bc648355e0.svg" valign="-3.1963519500000044px" width="46.24230764999999pt" height="14.116037099999998pt" style="max-width: 100%;"></a> is a power of a prime.  Some finite fields are better than others.
We get the even more encryption bang for our buck if we ramp up in mathematical sophistication
and use an elliptic curve over finite field, or the jacobian of a hyperelliptic curve over a
finite field, or the class group of an imaginary quadratic number field.</p>
<p dir="auto">The complexity of the optimal discrete log problem algorithm is:</p>
<ul dir="auto">
<li>polynomial time (that is, easy) in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> with addition,</li>
<li>sub-exponential time (hard) in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5a25068b686730b0d5c6d3c047688395.svg"><img alt="$\mathbb{Z}/n$" src="/sj-simmons/crypto/raw/main/svgs/5a25068b686730b0d5c6d3c047688395.svg" valign="-4.109589000000009px" width="29.04502589999999pt" height="16.438356pt" style="max-width: 100%;"></a> with multiplication,</li>
<li>exponential time (much harder) in an elliptic curve.</li>
</ul>
<p dir="auto">(The best known classical — non-quantum — algorithm for factoring integers, the
<a href="https://en.wikipedia.org/wiki/General_number_field_sieve" rel="nofollow">general number field sieve</a>, runs in
<a href="https://en.wikipedia.org/wiki/Time_complexity#Sub-exponential_time" rel="nofollow">sub-exponential</a> time.)</p>
<p dir="auto">In some systems the cyclic group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> used for encryption is taken to be a subgroup
of a larger group in the case that the latter is not cyclic, or in the case the larger
group is cyclic but admits small subgroups.</p>
<h3 tabindex="-1" dir="auto"><a id="user-content-elgamal-over-an-elliptic-curve" class="anchor" aria-hidden="true" href="#elgamal-over-an-elliptic-curve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ElGamal over an elliptic curve</h3>
<p dir="auto">Let us implement ElGamal using and elliptic curve called Wei25519.</p>
<p dir="auto">This curve can be realized as a <a href="https://en.wikipedia.org/wiki/Montgomery_curve" rel="nofollow">Montgomery curve</a>
called <a href="https://en.wikipedia.org/wiki/Curve25519" rel="nofollow">Curve25519</a> with equation
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/70b8abcd4fea57adf6922578c3ca682e.svg"><img alt="$y^2=x^3+486662x^2+x$" src="/sj-simmons/crypto/raw/main/svgs/70b8abcd4fea57adf6922578c3ca682e.svg" valign="-3.1963503000000086px" width="170.3728191pt" height="16.5772266pt" style="max-width: 100%;"></a> over the prime field <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0fd6f8bd30ea1fbac9b7e06ec4a6ad96.svg"><img alt="$\mathbb{F}_p=\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/0fd6f8bd30ea1fbac9b7e06ec4a6ad96.svg" valign="-4.703173200000008px" width="67.01040884999999pt" height="17.031940199999998pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> is
the prime <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/04824a49dfd27066a02979bb736e5efe.svg"><img alt="$p=2^{255}-19.$" src="/sj-simmons/crypto/raw/main/svgs/04824a49dfd27066a02979bb736e5efe.svg" valign="-3.1963503000000086px" width="99.98278454999998pt" height="16.5772266pt" style="max-width: 100%;"></a> Alternatively, it is isomorphic to the curve with short-Weierstrass
form <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ba688014ce50abf6c701b4b6c66c193f.svg"><img alt="$y^2 = x^3 + a x +b$" src="/sj-simmons/crypto/raw/main/svgs/ba688014ce50abf6c701b4b6c66c193f.svg" valign="-3.1963503000000086px" width="120.03206489999998pt" height="16.5772266pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg"><img alt="$b$" src="/sj-simmons/crypto/raw/main/svgs/4bdc8d9bcfb35e1c9bfb51fc69687dfc.svg" valign="0.0px" width="7.054796099999991pt" height="11.4155283pt" style="max-width: 100%;"></a> are as in the following code-block.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import numlib as nl
# The prime field:
p = 2**255-19
F = nl.Zmodp(p)
# The elliptic curve (note both a and b below are elements of F)
a = F(0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaa98_4914a144)
b = F(0x7b425ed0_97b425ed_097b425e_d097b425_ed097b42_5ed097b4_260b5e9c_7710c864)
E = nl.EllCurve(a, b)  # E is now Wei25519"><pre><span class="pl-k">import</span> <span class="pl-s1">numlib</span> <span class="pl-k">as</span> <span class="pl-s1">nl</span>
<span class="pl-c"># The prime field:</span>
<span class="pl-s1">p</span> <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">255</span><span class="pl-c1">-</span><span class="pl-c1">19</span>
<span class="pl-v">F</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">Zmodp</span>(<span class="pl-s1">p</span>)
<span class="pl-c"># The elliptic curve (note both a and b below are elements of F)</span>
<span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-v">F</span>(<span class="pl-c1">0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaa98_4914a144</span>)
<span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-v">F</span>(<span class="pl-c1">0x7b425ed0_97b425ed_097b425e_d097b425_ed097b42_5ed097b4_260b5e9c_7710c864</span>)
<span class="pl-v">E</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">EllCurve</span>(<span class="pl-s1">a</span>, <span class="pl-s1">b</span>)  <span class="pl-c"># E is now Wei25519</span></pre></div>
<p dir="auto">Wei25519 is cyclic but not of prime order.  Its cousin, Curve25519, was engineered
to have order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ef574c1e38cbaa36503204697ffa2f1d.svg"><img alt="$|E|=hq$" src="/sj-simmons/crypto/raw/main/svgs/ef574c1e38cbaa36503204697ffa2f1d.svg" valign="-4.109589000000009px" width="61.53147659999998pt" height="16.438356pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad9d098b937e46f9f58968551adac57.svg"><img alt="$h$" src="/sj-simmons/crypto/raw/main/svgs/2ad9d098b937e46f9f58968551adac57.svg" valign="0.0px" width="9.47111549999999pt" height="11.4155283pt" style="max-width: 100%;"></a> is small and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> is a prime slightly larger than
a high power of 2 — namely, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6ce6792505b0c7038a5cbed758c272d1.svg"><img alt="$2^{252}.$" src="/sj-simmons/crypto/raw/main/svgs/6ce6792505b0c7038a5cbed758c272d1.svg" valign="0.0px" width="33.264976799999985pt" height="13.380876299999999pt" style="max-width: 100%;"></a></p>
<p dir="auto">For Curve25519 and, hence, Wei25519, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad9d098b937e46f9f58968551adac57.svg"><img alt="$h$" src="/sj-simmons/crypto/raw/main/svgs/2ad9d098b937e46f9f58968551adac57.svg" valign="0.0px" width="9.47111549999999pt" height="11.4155283pt" style="max-width: 100%;"></a> is 8 and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a>, in hex, is:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="q = 0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed"><pre><span class="pl-s1">q</span> <span class="pl-c1">=</span> <span class="pl-c1">0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed</span></pre></div>
<p dir="auto">Moreover, the order-<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> subgroup <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> is generated by well-known point
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f8ade351bcd4705c9de78d2ce1965144.svg"><img alt="$Q=(x,y)$" src="/sj-simmons/crypto/raw/main/svgs/f8ade351bcd4705c9de78d2ce1965144.svg" valign="-4.109589000000009px" width="73.04856569999998pt" height="16.438356pt" style="max-width: 100%;"></a> defined as follows:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = 0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaad245a
y = 0x20ae19a1_b8a086b4_e01edd2c_7748d14c_923d4d7e_6d7c61b2_29e9c5a2_7eced3d9
Q = E(x, y)  # Q is now a point on the curve E
nl.addorder(Q, q*8) == q  # True"><pre><span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-c1">0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaad245a</span>
<span class="pl-s1">y</span> <span class="pl-c1">=</span> <span class="pl-c1">0x20ae19a1_b8a086b4_e01edd2c_7748d14c_923d4d7e_6d7c61b2_29e9c5a2_7eced3d9</span>
<span class="pl-v">Q</span> <span class="pl-c1">=</span> <span class="pl-v">E</span>(<span class="pl-s1">x</span>, <span class="pl-s1">y</span>)  <span class="pl-c"># Q is now a point on the curve E</span>
<span class="pl-s1">nl</span>.<span class="pl-en">addorder</span>(<span class="pl-v">Q</span>, <span class="pl-s1">q</span><span class="pl-c1">*</span><span class="pl-c1">8</span>) <span class="pl-c1">==</span> <span class="pl-s1">q</span>  <span class="pl-c"># True</span></pre></div>
<p dir="auto">In cryptography parlance, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad9d098b937e46f9f58968551adac57.svg"><img alt="$h$" src="/sj-simmons/crypto/raw/main/svgs/2ad9d098b937e46f9f58968551adac57.svg" valign="0.0px" width="9.47111549999999pt" height="11.4155283pt" style="max-width: 100%;"></a> is called the (cofactor); in abstract
algebraic terms <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ad9d098b937e46f9f58968551adac57.svg"><img alt="$h$" src="/sj-simmons/crypto/raw/main/svgs/2ad9d098b937e46f9f58968551adac57.svg" valign="0.0px" width="9.47111549999999pt" height="11.4155283pt" style="max-width: 100%;"></a> is the index of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/31c85b6d1657773dca47d2e0c51c3b49.svg"><img alt="$G=\langle Q\rangle$" src="/sj-simmons/crypto/raw/main/svgs/31c85b6d1657773dca47d2e0c51c3b49.svg" valign="-4.109589000000009px" width="60.62313179999999pt" height="16.438356pt" style="max-width: 100%;"></a> in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg"><img alt="$E$" src="/sj-simmons/crypto/raw/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg" valign="0.0px" width="13.08219659999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> (i.e.,
the number of cosets of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg"><img alt="$E$" src="/sj-simmons/crypto/raw/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg" valign="0.0px" width="13.08219659999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b73fcab182ae94b38ad71f6864f90d94.svg"><img alt="$G).$" src="/sj-simmons/crypto/raw/main/svgs/b73fcab182ae94b38ad71f6864f90d94.svg" valign="-4.109589000000009px" width="23.88358499999999pt" height="16.438356pt" style="max-width: 100%;"></a></p>
<p dir="auto">In numlib, as in most any elliptic curve implementation in a language that allows
overriding arithmetic operators (e,g., Python or C++), the group operation is
realized additively. So, for points <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/197fa3a18e4a8b8c7df669d007476133.svg"><img alt="$P_1$" src="/sj-simmons/crypto/raw/main/svgs/197fa3a18e4a8b8c7df669d007476133.svg" valign="-2.4657286499999893px" width="17.10619349999999pt" height="13.698590399999999pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bda33f0358442dd75d7487fa0ba0a279.svg"><img alt="$P_2$" src="/sj-simmons/crypto/raw/main/svgs/bda33f0358442dd75d7487fa0ba0a279.svg" valign="-2.4657286499999893px" width="17.10619349999999pt" height="13.698590399999999pt" style="max-width: 100%;"></a> on the curve, one would write <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/6ad72a7b74544c85943d72001bce2068.svg"><img alt="$P_1+P_2,$" src="/sj-simmons/crypto/raw/main/svgs/6ad72a7b74544c85943d72001bce2068.svg" valign="-3.196350299999991px" width="60.51362954999999pt" height="14.42921205pt" style="max-width: 100%;"></a>
or say <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/eedf81742970e4d2c85001e64b1d6d38.svg"><img alt="$100\cdot P_1;$" src="/sj-simmons/crypto/raw/main/svgs/eedf81742970e4d2c85001e64b1d6d38.svg" valign="-3.196350299999991px" width="59.02394189999999pt" height="14.42921205pt" style="max-width: 100%;"></a> the inverse of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/df5a289587a2f0247a5b97c1e8ac58ca.svg"><img alt="$P$" src="/sj-simmons/crypto/raw/main/svgs/df5a289587a2f0247a5b97c1e8ac58ca.svg" valign="0.0px" width="12.83677559999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7d9a2307e724e91db7525d4e8aadf953.svg"><img alt="$-P.$" src="/sj-simmons/crypto/raw/main/svgs/7d9a2307e724e91db7525d4e8aadf953.svg" valign="-1.369874549999991px" width="28.36191434999999pt" height="12.6027363pt" style="max-width: 100%;"></a> The discrete
log problem looks like this additively: given <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/bd6af07b6e780cde417b8fbca5b2dac8.svg"><img alt="$P=x\cdot Q,$" src="/sj-simmons/crypto/raw/main/svgs/bd6af07b6e780cde417b8fbca5b2dac8.svg" valign="-3.196350299999991px" width="73.58302049999999pt" height="14.42921205pt" style="max-width: 100%;"></a> find the integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9cccd9efb5240c6813ecebb681085a3b.svg"><img alt="$x.$" src="/sj-simmons/crypto/raw/main/svgs/9cccd9efb5240c6813ecebb681085a3b.svg" valign="0.0px" width="13.96121264999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
Also, notice the use of numlib's <strong>addorder</strong> (additive order) in the previous code-block as
opposed to the mulorder that we've used before in groups implemented multiplicatively.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-hammer-projects-hammer-2" class="anchor" aria-hidden="true" href="#hammer-projects-hammer-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji> Projects <g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji></h4>
<ol start="4" dir="auto">
<li>
<p dir="auto">The reason we are implementing this curve as
Wei25519 — that is, in Weierstrass form — is that Simmons hasn't
yet implemented Montgomery form curves in numlib.</p>
<p dir="auto">All Montgomery curves can be converted to Weierstrass form but not vice-versa:
not all Weierstrass curves can be converted to Montgomery form.  Montgomery curves
(and Edwards curves) admit the Montgomery ladder method for
<a href="https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication" rel="nofollow">point multiplication</a>
that is constant-time — and so (partially) bars against timing attacks —
and faster than the usual point multiplication on Weierstrass curves.</p>
<p dir="auto">Fork <a href="https://github.com/sj-simmons/numlib">numlib</a>, implement Montgomery curves by
adding a class
<a href="https://github.com/sj-simmons/numlib/blob/master/numlib/elliptic_curves.py">here</a>
similar to the Weierstrass class. (Submit a pull request if you get this working
right.)</p>
<p dir="auto">A well-known reference for implementing optimized version of the EC group law on
Montgomery and Edwards curve this <a href="#references3">Berstein, Lange</a> paper; see also
<a href="#references3">Costello, Smith</a>.</p>
</li>
</ol>
<p dir="auto">Let us explicitly produce some more or less random points on the curve Wei25519. We start by uniformly
choosing at random an <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/78a5432ec8ceb44aa22ef3fab6a74f09.svg"><img alt="$x\in \mathbb{Z}/p;$" src="/sj-simmons/crypto/raw/main/svgs/78a5432ec8ceb44aa22ef3fab6a74f09.svg" valign="-4.109589000000009px" width="61.50106709999999pt" height="16.438356pt" style="max-width: 100%;"></a> then we check whether we can pair the selected <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a>
with a <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cce65fe1c8703c8e388b1890993e053c.svg"><img alt="$y\in\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/cce65fe1c8703c8e388b1890993e053c.svg" valign="-4.109589000000009px" width="56.18906039999998pt" height="16.438356pt" style="max-width: 100%;"></a> so that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7392a8cd69b275fa1798ef94c839d2e0.svg"><img alt="$(x,y)$" src="/sj-simmons/crypto/raw/main/svgs/7392a8cd69b275fa1798ef94c839d2e0.svg" valign="-4.109589000000009px" width="38.135511149999985pt" height="16.438356pt" style="max-width: 100%;"></a> satisfies the equation, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/8de1f312cd59e038e5a5058d8c41c872.svg"><img alt="$y^2 = f(x) = x^3 + a x +b,$" src="/sj-simmons/crypto/raw/main/svgs/8de1f312cd59e038e5a5058d8c41c872.svg" valign="-4.109589000000009px" width="178.51375409999997pt" height="17.4904653pt" style="max-width: 100%;"></a>
that defines Wei25519.  Simply stated: we pick a random <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7997339883ac20f551e7f35efff0a2b9.svg"><img alt="$f(x)$" src="/sj-simmons/crypto/raw/main/svgs/7997339883ac20f551e7f35efff0a2b9.svg" valign="-4.109589000000009px" width="31.99783454999999pt" height="16.438356pt" style="max-width: 100%;"></a> and check
whether it is a square and, if it is, find <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/deceeaf6940a8c7a5a02373728002b0f.svg"><img alt="$y$" src="/sj-simmons/crypto/raw/main/svgs/deceeaf6940a8c7a5a02373728002b0f.svg" valign="-3.1963502999999895px" width="8.649225749999989pt" height="10.2739725pt" style="max-width: 100%;"></a> such that <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cbc0b8595bf92fd1bc3e2fff1f9f41c0.svg"><img alt="$y^2=f(x);$" src="/sj-simmons/crypto/raw/main/svgs/cbc0b8595bf92fd1bc3e2fff1f9f41c0.svg" valign="-4.109589000000009px" width="74.50535564999998pt" height="17.4904653pt" style="max-width: 100%;"></a> then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7392a8cd69b275fa1798ef94c839d2e0.svg"><img alt="$(x,y)$" src="/sj-simmons/crypto/raw/main/svgs/7392a8cd69b275fa1798ef94c839d2e0.svg" valign="-4.109589000000009px" width="38.135511149999985pt" height="16.438356pt" style="max-width: 100%;"></a> is a
point on the curve.</p>
<p dir="auto">Modulo an odd prime <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a>, it is easy to determine if a co-prime integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is a perfect
square. There are exactly <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b377cb544cb88987dc0f15b6c5ea55ef.svg"><img alt="$(p-1)/2$" src="/sj-simmons/crypto/raw/main/svgs/b377cb544cb88987dc0f15b6c5ea55ef.svg" valign="-4.109589000000009px" width="65.80481984999999pt" height="16.438356pt" style="max-width: 100%;"></a> perfect squares <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/65b68a09ffad5ee62dfbe529b6e5536a.svg"><img alt="$\mathbb{Z}/p;$" src="/sj-simmons/crypto/raw/main/svgs/65b68a09ffad5ee62dfbe529b6e5536a.svg" valign="-4.109589000000009px" width="32.014941749999984pt" height="16.438356pt" style="max-width: 100%;"></a> moreover,
by <a href="https://en.wikipedia.org/wiki/Euler%27s_criterion" rel="nofollow">Euler's criterion</a>
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/eb790af23e3d761b00437077d08019dc.svg"><img alt="$x\in(\mathbb{Z}/p)^*$" src="/sj-simmons/crypto/raw/main/svgs/eb790af23e3d761b00437077d08019dc.svg" valign="-4.109589000000009px" width="76.45547084999998pt" height="16.438356pt" style="max-width: 100%;"></a> is a square exactly when <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1099a6ad140944ba65fc8b2ef9e580e5.svg"><img alt="$x^{\frac{p-1}{2}}= 1.$" src="/sj-simmons/crypto/raw/main/svgs/1099a6ad140944ba65fc8b2ef9e580e5.svg" valign="0.0px" width="69.44288339999999pt" height="16.758061650000002pt" style="max-width: 100%;"></a></p>
<p dir="auto">Now, if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/60bd746a28328fd4023ef5233811e546.svg"><img alt="$x\in\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/60bd746a28328fd4023ef5233811e546.svg" valign="-4.109589000000009px" width="56.93484224999999pt" height="16.438356pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7610e098afc851cb27737a4037fbc446.svg"><img alt="$p\equiv 3 \mod 4$" src="/sj-simmons/crypto/raw/main/svgs/7610e098afc851cb27737a4037fbc446.svg" valign="-3.1963503000000055px" width="94.57152869999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> is indeed a square, then
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a96e36f1a95c97c480f6b06e4a6aeefc.svg"><img alt="$x^{\frac{p+1}{4}}$" src="/sj-simmons/crypto/raw/main/svgs/a96e36f1a95c97c480f6b06e4a6aeefc.svg" valign="0.0px" width="31.48872869999999pt" height="16.758061650000002pt" style="max-width: 100%;"></a> is a square root of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg"><img alt="$\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg" valign="-4.109589000000009px" width="27.448716899999987pt" height="16.438356pt" style="max-width: 100%;"></a> since</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a744cfecb700d7c962506d95178c430c.svg"><img alt="$$\left(x^{\frac{p+1}{4}}\right)^2=x^{\frac{p+1}{2}}=x^{\frac{p-1}{2}+1}=x^{\frac{p-1}{2}}x=x.$$" src="/sj-simmons/crypto/raw/main/svgs/a744cfecb700d7c962506d95178c430c.svg" valign="0.0px" width="292.72590599999995pt" height="32.940961349999995pt" style="max-width: 100%;"></a></p>
<p dir="auto">However, for our current odd prime, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/88dda0f87c1bb00d3c39ce2f369504cf.svg"><img alt="$p,$" src="/sj-simmons/crypto/raw/main/svgs/88dda0f87c1bb00d3c39ce2f369504cf.svg" valign="-3.1963502999999895px" width="12.836790449999992pt" height="10.2739725pt" style="max-width: 100%;"></a> the only other case holds:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p % 4 == 1  # True"><pre><span class="pl-s1">p</span> <span class="pl-c1">%</span> <span class="pl-c1">4</span> <span class="pl-c1">==</span> <span class="pl-c1">1</span>  <span class="pl-c"># True</span></pre></div>
<p dir="auto">If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is a square in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg"><img alt="$\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg" valign="-4.109589000000009px" width="27.448716899999987pt" height="16.438356pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b3b8978930c309dde1dffe5e43047f37.svg"><img alt="$p\equiv 1 \mod 4$" src="/sj-simmons/crypto/raw/main/svgs/b3b8978930c309dde1dffe5e43047f37.svg" valign="-3.1963503000000055px" width="94.57152869999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a>, then one must work a little harder
to find a square root of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/9cccd9efb5240c6813ecebb681085a3b.svg"><img alt="$x.$" src="/sj-simmons/crypto/raw/main/svgs/9cccd9efb5240c6813ecebb681085a3b.svg" valign="0.0px" width="13.96121264999999pt" height="7.0776222pt" style="max-width: 100%;"></a> See <a href="#references3">Booher</a> for an algorithm that finds a square
root while remaining in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aefaead8ac34b3adac463c51a575eee4.svg"><img alt="$(\mathbb{Z}/p)^*$" src="/sj-simmons/crypto/raw/main/svgs/aefaead8ac34b3adac463c51a575eee4.svg" valign="-4.109589000000009px" width="46.96934549999999pt" height="16.438356pt" style="max-width: 100%;"></a> and for, alternatively, Cipolla's algorithm, which works
in a quadratic extension of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/acf98e720532077da710f495d5a0d401.svg"><img alt="$(\mathbb{Z}/p).$" src="/sj-simmons/crypto/raw/main/svgs/acf98e720532077da710f495d5a0d401.svg" valign="-4.109589000000009px" width="44.80037429999999pt" height="16.438356pt" style="max-width: 100%;"></a> As yet another instructive exercise, let us use
numlib to implement that latter.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import numlib as nl
import polylib as pl
from random import randint

def sqrt(a, p):
    &quot;&quot;&quot;Return a square root of a in Z/p

    Args:
        a (int): a quadratic residue (i.e., square) modulo p.
        p (int): an odd prime

    Returns:
        int. An integer whose square equals a, modulo p.
    &quot;&quot;&quot;
    assert p % 2 == 1 and nl.isprime(p), &quot;p must be an odd prime&quot;
    assert pow(a, (p-1)//2, p) == 1, &quot;no square root exists&quot;

    if p % 4 == 3:
        return a**((p+1)//4) % p
    else:
        # Cipolla's algorithm:
        t = randint(0, p-1)
        while pow(t**2-4*a, (p-1)//2, p) != p-1:
            t = randint(0, p-1)
        Fp = nl.Zmodp(p)  # Fp = Z/p
        poly = pl.FPolynomial([Fp(a), Fp(t), Fp(1)]) # a+tx+x^2 in Fp[x]
        Fp2 = nl.FPmod(poly) # the extension field Fp[x]/&lt;a+tx+x^2&gt;
        x = Fp2([0, 1])      # the element x in Fp[x]/&lt;a+tx+x^2&gt;
        sqroot = x**((p+1)//2) # this is constant in Fp[x]/&lt;a+tx+x^2&gt;
        sqroot = sqroot[0]  # now sqroot is in Fp
        return int(sqroot)  # return an int"><pre><span class="pl-k">import</span> <span class="pl-s1">numlib</span> <span class="pl-k">as</span> <span class="pl-s1">nl</span>
<span class="pl-k">import</span> <span class="pl-s1">polylib</span> <span class="pl-k">as</span> <span class="pl-s1">pl</span>
<span class="pl-k">from</span> <span class="pl-s1">random</span> <span class="pl-k">import</span> <span class="pl-s1">randint</span>

<span class="pl-k">def</span> <span class="pl-en">sqrt</span>(<span class="pl-s1">a</span>, <span class="pl-s1">p</span>):
    <span class="pl-s">"""Return a square root of a in Z/p</span>
<span class="pl-s"></span>
<span class="pl-s">    Args:</span>
<span class="pl-s">        a (int): a quadratic residue (i.e., square) modulo p.</span>
<span class="pl-s">        p (int): an odd prime</span>
<span class="pl-s"></span>
<span class="pl-s">    Returns:</span>
<span class="pl-s">        int. An integer whose square equals a, modulo p.</span>
<span class="pl-s">    """</span>
    <span class="pl-k">assert</span> <span class="pl-s1">p</span> <span class="pl-c1">%</span> <span class="pl-c1">2</span> <span class="pl-c1">==</span> <span class="pl-c1">1</span> <span class="pl-c1">and</span> <span class="pl-s1">nl</span>.<span class="pl-en">isprime</span>(<span class="pl-s1">p</span>), <span class="pl-s">"p must be an odd prime"</span>
    <span class="pl-k">assert</span> <span class="pl-en">pow</span>(<span class="pl-s1">a</span>, (<span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)<span class="pl-c1">//</span><span class="pl-c1">2</span>, <span class="pl-s1">p</span>) <span class="pl-c1">==</span> <span class="pl-c1">1</span>, <span class="pl-s">"no square root exists"</span>

    <span class="pl-k">if</span> <span class="pl-s1">p</span> <span class="pl-c1">%</span> <span class="pl-c1">4</span> <span class="pl-c1">==</span> <span class="pl-c1">3</span>:
        <span class="pl-k">return</span> <span class="pl-s1">a</span><span class="pl-c1">**</span>((<span class="pl-s1">p</span><span class="pl-c1">+</span><span class="pl-c1">1</span>)<span class="pl-c1">//</span><span class="pl-c1">4</span>) <span class="pl-c1">%</span> <span class="pl-s1">p</span>
    <span class="pl-k">else</span>:
        <span class="pl-c"># Cipolla's algorithm:</span>
        <span class="pl-s1">t</span> <span class="pl-c1">=</span> <span class="pl-en">randint</span>(<span class="pl-c1">0</span>, <span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)
        <span class="pl-k">while</span> <span class="pl-en">pow</span>(<span class="pl-s1">t</span><span class="pl-c1">**</span><span class="pl-c1">2</span><span class="pl-c1">-</span><span class="pl-c1">4</span><span class="pl-c1">*</span><span class="pl-s1">a</span>, (<span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)<span class="pl-c1">//</span><span class="pl-c1">2</span>, <span class="pl-s1">p</span>) <span class="pl-c1">!=</span> <span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>:
            <span class="pl-s1">t</span> <span class="pl-c1">=</span> <span class="pl-en">randint</span>(<span class="pl-c1">0</span>, <span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)
        <span class="pl-v">Fp</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">Zmodp</span>(<span class="pl-s1">p</span>)  <span class="pl-c"># Fp = Z/p</span>
        <span class="pl-s1">poly</span> <span class="pl-c1">=</span> <span class="pl-s1">pl</span>.<span class="pl-v">FPolynomial</span>([<span class="pl-v">Fp</span>(<span class="pl-s1">a</span>), <span class="pl-v">Fp</span>(<span class="pl-s1">t</span>), <span class="pl-v">Fp</span>(<span class="pl-c1">1</span>)]) <span class="pl-c"># a+tx+x^2 in Fp[x]</span>
        <span class="pl-v">Fp2</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">FPmod</span>(<span class="pl-s1">poly</span>) <span class="pl-c"># the extension field Fp[x]/&lt;a+tx+x^2&gt;</span>
        <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-v">Fp2</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>])      <span class="pl-c"># the element x in Fp[x]/&lt;a+tx+x^2&gt;</span>
        <span class="pl-s1">sqroot</span> <span class="pl-c1">=</span> <span class="pl-s1">x</span><span class="pl-c1">**</span>((<span class="pl-s1">p</span><span class="pl-c1">+</span><span class="pl-c1">1</span>)<span class="pl-c1">//</span><span class="pl-c1">2</span>) <span class="pl-c"># this is constant in Fp[x]/&lt;a+tx+x^2&gt;</span>
        <span class="pl-s1">sqroot</span> <span class="pl-c1">=</span> <span class="pl-s1">sqroot</span>[<span class="pl-c1">0</span>]  <span class="pl-c"># now sqroot is in Fp</span>
        <span class="pl-k">return</span> <span class="pl-en">int</span>(<span class="pl-s1">sqroot</span>)  <span class="pl-c"># return an int</span></pre></div>
<p dir="auto">Before we use this to find a generator of Wei25519:</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-11" class="anchor" aria-hidden="true" href="#exercise-11"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="5" dir="auto">
<li>What is the likelihood that a randomly chosen point on Wei25519 generates the entire curve?  generates the subgroup of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b682918429c04844ba596497e9c5ca61.svg"><img alt="$q?$" src="/sj-simmons/crypto/raw/main/svgs/b682918429c04844ba596497e9c5ca61.svg" valign="-3.1963503000000055px" width="15.69067829999999pt" height="14.611878599999999pt" style="max-width: 100%;"></a> has order 8?</li>
</ol>
<p dir="auto">The well-known point given in the standards that is used for cryptographical purposes has order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e25588bd69787207bf5da9706a3070f.svg"><img alt="$q.$" src="/sj-simmons/crypto/raw/main/svgs/2e25588bd69787207bf5da9706a3070f.svg" valign="-3.1963502999999895px" width="12.49431149999999pt" height="10.2739725pt" style="max-width: 100%;"></a>
Let us use our implementation of Cipolla's algorithm to find a generator of the whole curve.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = 2**255-19
F = nl.Zmodp(p)
a = F(0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaa98_4914a144)
b = F(0x7b425ed0_97b425ed_097b425e_d097b425_ed097b42_5ed097b4_260b5e9c_7710c864)
E = nl.EllCurve(a, b, debug=True)  # E is now Wei25519
q = 0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed

def point(order):
    &quot;&quot;&quot;return a point of the given order&quot;&quot;&quot;
    found_order = -1
    while found_order != order:
        x = randint(0, p-1)
        fx = int(E.f(x))
        if pow(fx, (p-1)//2, p) == 1:
            y = sqrt(fx, p)
            pt = E(x, y)
            found_order = nl.addorder(pt, q*8)
    return pt

P = point(q*8)  # P is now a generator of E
print(P)
#print(hex(P.co[0]*P.co[2]**-1))  # you could also print just the x-coordinate
#print(hex(P.co[1]*P.co[2]**-1))  # or just the y-coordinate"><pre><span class="pl-s1">p</span> <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">255</span><span class="pl-c1">-</span><span class="pl-c1">19</span>
<span class="pl-v">F</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">Zmodp</span>(<span class="pl-s1">p</span>)
<span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-v">F</span>(<span class="pl-c1">0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaa98_4914a144</span>)
<span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-v">F</span>(<span class="pl-c1">0x7b425ed0_97b425ed_097b425e_d097b425_ed097b42_5ed097b4_260b5e9c_7710c864</span>)
<span class="pl-v">E</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">EllCurve</span>(<span class="pl-s1">a</span>, <span class="pl-s1">b</span>, <span class="pl-s1">debug</span><span class="pl-c1">=</span><span class="pl-c1">True</span>)  <span class="pl-c"># E is now Wei25519</span>
<span class="pl-s1">q</span> <span class="pl-c1">=</span> <span class="pl-c1">0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed</span>

<span class="pl-k">def</span> <span class="pl-en">point</span>(<span class="pl-s1">order</span>):
    <span class="pl-s">"""return a point of the given order"""</span>
    <span class="pl-s1">found_order</span> <span class="pl-c1">=</span> <span class="pl-c1">-</span><span class="pl-c1">1</span>
    <span class="pl-k">while</span> <span class="pl-s1">found_order</span> <span class="pl-c1">!=</span> <span class="pl-s1">order</span>:
        <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-en">randint</span>(<span class="pl-c1">0</span>, <span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)
        <span class="pl-s1">fx</span> <span class="pl-c1">=</span> <span class="pl-en">int</span>(<span class="pl-v">E</span>.<span class="pl-en">f</span>(<span class="pl-s1">x</span>))
        <span class="pl-k">if</span> <span class="pl-en">pow</span>(<span class="pl-s1">fx</span>, (<span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)<span class="pl-c1">//</span><span class="pl-c1">2</span>, <span class="pl-s1">p</span>) <span class="pl-c1">==</span> <span class="pl-c1">1</span>:
            <span class="pl-s1">y</span> <span class="pl-c1">=</span> <span class="pl-en">sqrt</span>(<span class="pl-s1">fx</span>, <span class="pl-s1">p</span>)
            <span class="pl-s1">pt</span> <span class="pl-c1">=</span> <span class="pl-v">E</span>(<span class="pl-s1">x</span>, <span class="pl-s1">y</span>)
            <span class="pl-s1">found_order</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-en">addorder</span>(<span class="pl-s1">pt</span>, <span class="pl-s1">q</span><span class="pl-c1">*</span><span class="pl-c1">8</span>)
    <span class="pl-k">return</span> <span class="pl-s1">pt</span>

<span class="pl-v">P</span> <span class="pl-c1">=</span> <span class="pl-en">point</span>(<span class="pl-s1">q</span><span class="pl-c1">*</span><span class="pl-c1">8</span>)  <span class="pl-c"># P is now a generator of E</span>
<span class="pl-en">print</span>(<span class="pl-v">P</span>)
<span class="pl-c">#print(hex(P.co[0]*P.co[2]**-1))  # you could also print just the x-coordinate</span>
<span class="pl-c">#print(hex(P.co[1]*P.co[2]**-1))  # or just the y-coordinate</span></pre></div>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-12" class="anchor" aria-hidden="true" href="#exercise-12"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="6" dir="auto">
<li>Find a point of Wei25519 that has order 8. Hint: first find a generator of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg"><img alt="$E$" src="/sj-simmons/crypto/raw/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg" valign="0.0px" width="13.08219659999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>; then,  modify that point.</li>
</ol>
<p dir="auto">Finally, let test us drive ElGamal encryption on Wei25519.  We don't want to use the whole curve since
it has some small subgroups. Let us use the subgroup of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg"><img alt="$q$" src="/sj-simmons/crypto/raw/main/svgs/d5c18a8ca1894fd3a7d25f242cbe8890.svg" valign="-3.1963502999999895px" width="7.928106449999989pt" height="10.2739725pt" style="max-width: 100%;"></a> with the well-known generator <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/34a5e0267da1d722f0aa361fafc47931.svg"><img alt="$g,$" src="/sj-simmons/crypto/raw/main/svgs/34a5e0267da1d722f0aa361fafc47931.svg" valign="-3.1963502999999895px" width="12.996581399999991pt" height="10.2739725pt" style="max-width: 100%;"></a>
mentioned above.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = 0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaad245a
y = 0x20ae19a1_b8a086b4_e01edd2c_7748d14c_923d4d7e_6d7c61b2_29e9c5a2_7eced3d9
Q = E(x, y)"><pre><span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-c1">0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaad245a</span>
<span class="pl-s1">y</span> <span class="pl-c1">=</span> <span class="pl-c1">0x20ae19a1_b8a086b4_e01edd2c_7748d14c_923d4d7e_6d7c61b2_29e9c5a2_7eced3d9</span>
<span class="pl-v">Q</span> <span class="pl-c1">=</span> <span class="pl-v">E</span>(<span class="pl-s1">x</span>, <span class="pl-s1">y</span>)</pre></div>
<p dir="auto">We have everything we need except for a way to embed human-readable messages. For ElGamal encryption
the message space is the ambient cyclic group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> in which the encryption takes place which for us
is currently the large cyclic subgroup of our curve <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg"><img alt="$E$" src="/sj-simmons/crypto/raw/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg" valign="0.0px" width="13.08219659999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2e25588bd69787207bf5da9706a3070f.svg"><img alt="$q.$" src="/sj-simmons/crypto/raw/main/svgs/2e25588bd69787207bf5da9706a3070f.svg" valign="-3.1963502999999895px" width="12.49431149999999pt" height="10.2739725pt" style="max-width: 100%;"></a> We want a fast way to map
byte-strings to and from elements of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f94ef81ce364c14409371296cf67e3bd.svg"><img alt="$G\subset E.$" src="/sj-simmons/crypto/raw/main/svgs/f94ef81ce364c14409371296cf67e3bd.svg" valign="-0.6427030499999906px" width="52.490676149999985pt" height="11.8755648pt" style="max-width: 100%;"></a></p>
<p dir="auto">The <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a>-coordinate of a generic point on the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg"><img alt="$E$" src="/sj-simmons/crypto/raw/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg" valign="0.0px" width="13.08219659999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> is an element is an element of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/62cd3ae2cb973630fe60c1b010f2057e.svg"><img alt="$\mathbb{Z}/p.$" src="/sj-simmons/crypto/raw/main/svgs/62cd3ae2cb973630fe60c1b010f2057e.svg" valign="-4.109589000000009px" width="32.014941749999984pt" height="16.438356pt" style="max-width: 100%;"></a> To
embed a byte-string, we could, as usual, use OS2IP to get an element of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/62cd3ae2cb973630fe60c1b010f2057e.svg"><img alt="$\mathbb{Z}/p.$" src="/sj-simmons/crypto/raw/main/svgs/62cd3ae2cb973630fe60c1b010f2057e.svg" valign="-4.109589000000009px" width="32.014941749999984pt" height="16.438356pt" style="max-width: 100%;"></a>
A potential issue is that not every element of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg"><img alt="$\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg" valign="-4.109589000000009px" width="27.448716899999987pt" height="16.438356pt" style="max-width: 100%;"></a> occurs as the <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a>-coordinate of
a point on our curve. We need a probabilistic scheme.</p>
<p dir="auto">Here's one way to embed byte-strings into Wei25519 using OS2IP with
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/c5a62acbd31af366e52ab3f6bc32d147.svg"><img alt="$xLen = \lfloor\log_{256}(2^{255}-19-1) \rfloor) - 1 = 30.$" src="/sj-simmons/crypto/raw/main/svgs/c5a62acbd31af366e52ab3f6bc32d147.svg" valign="-4.109589000000009px" width="300.2948289pt" height="17.4904653pt" style="max-width: 100%;"></a> Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg"><img alt="$message$" src="/sj-simmons/crypto/raw/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg" valign="-3.1963502999999895px" width="62.271846449999984pt" height="10.2739725pt" style="max-width: 100%;"></a> denote (a chunk of)
our message in byte-string form of length no greater than 30. Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7997339883ac20f551e7f35efff0a2b9.svg"><img alt="$f(x)$" src="/sj-simmons/crypto/raw/main/svgs/7997339883ac20f551e7f35efff0a2b9.svg" valign="-4.109589000000009px" width="31.99783454999999pt" height="16.438356pt" style="max-width: 100%;"></a> be the cubic
in <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4671c85415f86bbb4ef8bfd4b0f484ec.svg"><img alt="$y^2 = f(x)$" src="/sj-simmons/crypto/raw/main/svgs/4671c85415f86bbb4ef8bfd4b0f484ec.svg" valign="-4.109589000000009px" width="69.93913079999999pt" height="17.4904653pt" style="max-width: 100%;"></a> that defines Wei25519.  Also, <strong>sqrt</strong> in step 4 below refers to our
function above that implements Cipolla's algorithm.</p>
<ol dir="auto">
<li>Set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a2fa5a8034c977e540f8a6661f8eac59.svg"><img alt="$i = 0.$" src="/sj-simmons/crypto/raw/main/svgs/a2fa5a8034c977e540f8a6661f8eac59.svg" valign="0.0px" width="40.36628969999999pt" height="10.84150485pt" style="max-width: 100%;"></a></li>
<li>Compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a> = OS2IP(<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg"><img alt="$message$" src="/sj-simmons/crypto/raw/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg" valign="-3.1963502999999895px" width="62.271846449999984pt" height="10.2739725pt" style="max-width: 100%;"></a>+<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/77a3b857d53fb44e33b53e4c8b68351a.svg"><img alt="$i$" src="/sj-simmons/crypto/raw/main/svgs/77a3b857d53fb44e33b53e4c8b68351a.svg" valign="0.0px" width="5.663225699999989pt" height="10.84150485pt" style="max-width: 100%;"></a>.to_bytes()) — here we append a single byte to <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg"><img alt="$message$" src="/sj-simmons/crypto/raw/main/svgs/1a3d2947e84d2ca694bb02678372a476.svg" valign="-3.1963502999999895px" width="62.271846449999984pt" height="10.2739725pt" style="max-width: 100%;"></a> before applying OS2IP.</li>
<li>Compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/b9a2b0716bafb328e9ab3e48ce228ef1.svg"><img alt="$f(x).$" src="/sj-simmons/crypto/raw/main/svgs/b9a2b0716bafb328e9ab3e48ce228ef1.svg" valign="-4.109589000000009px" width="36.56405774999999pt" height="16.438356pt" style="max-width: 100%;"></a> If <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7997339883ac20f551e7f35efff0a2b9.svg"><img alt="$f(x)$" src="/sj-simmons/crypto/raw/main/svgs/7997339883ac20f551e7f35efff0a2b9.svg" valign="-4.109589000000009px" width="31.99783454999999pt" height="16.438356pt" style="max-width: 100%;"></a> is a quadratic residue modulo <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg"><img alt="$p$" src="/sj-simmons/crypto/raw/main/svgs/2ec6e630f199f589a2402fdf3e0289d5.svg" valign="-3.1963502999999895px" width="8.270567249999992pt" height="10.2739725pt" style="max-width: 100%;"></a> (i.e., a square) move on to step 4; otherwise, set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/198d8ec27890c1c0cd7f02170a29df40.svg"><img alt="$i= i+1$" src="/sj-simmons/crypto/raw/main/svgs/198d8ec27890c1c0cd7f02170a29df40.svg" valign="-1.369874550000004px" width="61.55448419999999pt" height="12.211379399999998pt" style="max-width: 100%;"></a> and return to step 2.</li>
<li>Set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/913f363cb19ad483cd0272500cb65dd3.svg"><img alt="$y=$" src="/sj-simmons/crypto/raw/main/svgs/913f363cb19ad483cd0272500cb65dd3.svg" valign="-3.1963502999999895px" width="26.00073794999999pt" height="10.2739725pt" style="max-width: 100%;"></a>sqrt<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/09fb57ea11f47a4b321e955ff67d8673.svg"><img alt="$(f(x))$" src="/sj-simmons/crypto/raw/main/svgs/09fb57ea11f47a4b321e955ff67d8673.svg" valign="-4.109589000000009px" width="44.78326709999998pt" height="16.438356pt" style="max-width: 100%;"></a> and set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3f270cb4de4114137b9bbd9d1f1d924a.svg"><img alt="$P_m = (x, y)$" src="/sj-simmons/crypto/raw/main/svgs/3f270cb4de4114137b9bbd9d1f1d924a.svg" valign="-4.109589000000009px" width="83.09355284999998pt" height="16.438356pt" style="max-width: 100%;"></a>, which is a point on Wei25519.</li>
<li>Compute the order of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/644702ece624713e15c5c42527240bc5.svg"><img alt="$P_m$" src="/sj-simmons/crypto/raw/main/svgs/644702ece624713e15c5c42527240bc5.svg" valign="-2.4657286499999893px" width="22.21849739999999pt" height="13.698590399999999pt" style="max-width: 100%;"></a> and if it's greater than 8, move on to step 6; otherwise set <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/198d8ec27890c1c0cd7f02170a29df40.svg"><img alt="$i= i+1$" src="/sj-simmons/crypto/raw/main/svgs/198d8ec27890c1c0cd7f02170a29df40.svg" valign="-1.369874550000004px" width="61.55448419999999pt" height="12.211379399999998pt" style="max-width: 100%;"></a> and return to step 2.</li>
<li>Return <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5f54d20f329c3b4d4f50f60ec2e1f1b0.svg"><img alt="$P_m=(x,y)$" src="/sj-simmons/crypto/raw/main/svgs/5f54d20f329c3b4d4f50f60ec2e1f1b0.svg" valign="-4.109589000000009px" width="83.09355284999998pt" height="16.438356pt" style="max-width: 100%;"></a> which is our encoded message.</li>
</ol>
<p dir="auto">Since half of the elements of <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg"><img alt="$\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg" valign="-4.109589000000009px" width="27.448716899999987pt" height="16.438356pt" style="max-width: 100%;"></a> are quadratic residues on expects the above encoding
algorithm to fail for only one in about every <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a5ea5b5b603a2795583ca5bc4a125259.svg"><img alt="$2^{-255}$" src="/sj-simmons/crypto/raw/main/svgs/a5ea5b5b603a2795583ca5bc4a125259.svg" valign="0.0px" width="38.15087099999999pt" height="13.380876299999999pt" style="max-width: 100%;"></a> messages.</p>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-13" class="anchor" aria-hidden="true" href="#exercise-13"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="7" dir="auto">
<li>What if we omit step 5? Why would it be disastrous if <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/644702ece624713e15c5c42527240bc5.svg"><img alt="$P_m$" src="/sj-simmons/crypto/raw/main/svgs/644702ece624713e15c5c42527240bc5.svg" valign="-2.4657286499999893px" width="22.21849739999999pt" height="13.698590399999999pt" style="max-width: 100%;"></a> happens to land in a small subgroup?</li>
</ol>
<p dir="auto">To decode <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/824cceb0defa76994aa23b4825c5fe35.svg"><img alt="$P_m=(x, y)$" src="/sj-simmons/crypto/raw/main/svgs/824cceb0defa76994aa23b4825c5fe35.svg" valign="-4.109589000000009px" width="83.09355284999998pt" height="16.438356pt" style="max-width: 100%;"></a>, one throws away <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/deceeaf6940a8c7a5a02373728002b0f.svg"><img alt="$y$" src="/sj-simmons/crypto/raw/main/svgs/deceeaf6940a8c7a5a02373728002b0f.svg" valign="-3.1963502999999895px" width="8.649225749999989pt" height="10.2739725pt" style="max-width: 100%;"></a>, computes I2OSP(<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg"><img alt="$x$" src="/sj-simmons/crypto/raw/main/svgs/332cc365a4987aacce0ead01b8bdcc0b.svg" valign="0.0px" width="9.39498779999999pt" height="7.0776222pt" style="max-width: 100%;"></a>, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/601a5111f7ddd223f08f1fba29e5ccd8.svg"><img alt="$xLen=31$" src="/sj-simmons/crypto/raw/main/svgs/601a5111f7ddd223f08f1fba29e5ccd8.svg" valign="0.0px" width="76.45929389999998pt" height="11.232861749999998pt" style="max-width: 100%;"></a>), and strips off the last byte.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import math
import numlib as nl

p = 2**255-19
F = nl.Zmodp(p)
a = F(0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaa98_4914a144)
b = F(0x7b425ed0_97b425ed_097b425e_d097b425_ed097b42_5ed097b4_260b5e9c_7710c864)
E = nl.EllCurve(a, b, debug=True)
q = 0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed

def bytes2curve(bytestring):
    &quot;&quot;&quot;return a tuple of encoded point(s) of Wei25519&quot;&quot;&quot;
    points = []
    for start in range(0, len(bytestring), 30):
        for i in range(256):
            x = OS2IP(bytestring[start: start+30] + i.to_bytes(1, byteorder='big'))
            fx = int(E.f(x))
            if pow(fx, (p-1)//2, p) == 1:
                P = E(x, sqrt(fx, p))
                if nl.addorder(P, q*8) &gt; 8:
                    break
        points.append(P)
    return tuple(points)

def curve2bytes(points):
    &quot;&quot;&quot;map a tuple of point(s) on Wei25519 to a byte-string&quot;&quot;&quot;
    bytestring = b&quot;&quot;
    for point in points:
        x = int(point.co[0]*point.co[2]**-1)  # the homogeneous x-coordinate as an integer
        bytestring += I2OSP(x, xLen = 31)[31 - math.ceil(math.log(x, 256)):-1]
    return bytestring"><pre><span class="pl-k">import</span> <span class="pl-s1">math</span>
<span class="pl-k">import</span> <span class="pl-s1">numlib</span> <span class="pl-k">as</span> <span class="pl-s1">nl</span>

<span class="pl-s1">p</span> <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-c1">**</span><span class="pl-c1">255</span><span class="pl-c1">-</span><span class="pl-c1">19</span>
<span class="pl-v">F</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">Zmodp</span>(<span class="pl-s1">p</span>)
<span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-v">F</span>(<span class="pl-c1">0x2aaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaaaa_aaaaaa98_4914a144</span>)
<span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-v">F</span>(<span class="pl-c1">0x7b425ed0_97b425ed_097b425e_d097b425_ed097b42_5ed097b4_260b5e9c_7710c864</span>)
<span class="pl-v">E</span> <span class="pl-c1">=</span> <span class="pl-s1">nl</span>.<span class="pl-v">EllCurve</span>(<span class="pl-s1">a</span>, <span class="pl-s1">b</span>, <span class="pl-s1">debug</span><span class="pl-c1">=</span><span class="pl-c1">True</span>)
<span class="pl-s1">q</span> <span class="pl-c1">=</span> <span class="pl-c1">0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed</span>

<span class="pl-k">def</span> <span class="pl-en">bytes2curve</span>(<span class="pl-s1">bytestring</span>):
    <span class="pl-s">"""return a tuple of encoded point(s) of Wei25519"""</span>
    <span class="pl-s1">points</span> <span class="pl-c1">=</span> []
    <span class="pl-k">for</span> <span class="pl-s1">start</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">0</span>, <span class="pl-en">len</span>(<span class="pl-s1">bytestring</span>), <span class="pl-c1">30</span>):
        <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">256</span>):
            <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-v">OS2IP</span>(<span class="pl-s1">bytestring</span>[<span class="pl-s1">start</span>: <span class="pl-s1">start</span><span class="pl-c1">+</span><span class="pl-c1">30</span>] <span class="pl-c1">+</span> <span class="pl-s1">i</span>.<span class="pl-en">to_bytes</span>(<span class="pl-c1">1</span>, <span class="pl-s1">byteorder</span><span class="pl-c1">=</span><span class="pl-s">'big'</span>))
            <span class="pl-s1">fx</span> <span class="pl-c1">=</span> <span class="pl-en">int</span>(<span class="pl-v">E</span>.<span class="pl-en">f</span>(<span class="pl-s1">x</span>))
            <span class="pl-k">if</span> <span class="pl-en">pow</span>(<span class="pl-s1">fx</span>, (<span class="pl-s1">p</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)<span class="pl-c1">//</span><span class="pl-c1">2</span>, <span class="pl-s1">p</span>) <span class="pl-c1">==</span> <span class="pl-c1">1</span>:
                <span class="pl-v">P</span> <span class="pl-c1">=</span> <span class="pl-v">E</span>(<span class="pl-s1">x</span>, <span class="pl-en">sqrt</span>(<span class="pl-s1">fx</span>, <span class="pl-s1">p</span>))
                <span class="pl-k">if</span> <span class="pl-s1">nl</span>.<span class="pl-en">addorder</span>(<span class="pl-v">P</span>, <span class="pl-s1">q</span><span class="pl-c1">*</span><span class="pl-c1">8</span>) <span class="pl-c1">&gt;</span> <span class="pl-c1">8</span>:
                    <span class="pl-k">break</span>
        <span class="pl-s1">points</span>.<span class="pl-en">append</span>(<span class="pl-v">P</span>)
    <span class="pl-k">return</span> <span class="pl-en">tuple</span>(<span class="pl-s1">points</span>)

<span class="pl-k">def</span> <span class="pl-en">curve2bytes</span>(<span class="pl-s1">points</span>):
    <span class="pl-s">"""map a tuple of point(s) on Wei25519 to a byte-string"""</span>
    <span class="pl-s1">bytestring</span> <span class="pl-c1">=</span> <span class="pl-s">b""</span>
    <span class="pl-k">for</span> <span class="pl-s1">point</span> <span class="pl-c1">in</span> <span class="pl-s1">points</span>:
        <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-en">int</span>(<span class="pl-s1">point</span>.<span class="pl-s1">co</span>[<span class="pl-c1">0</span>]<span class="pl-c1">*</span><span class="pl-s1">point</span>.<span class="pl-s1">co</span>[<span class="pl-c1">2</span>]<span class="pl-c1">**</span><span class="pl-c1">-</span><span class="pl-c1">1</span>)  <span class="pl-c"># the homogeneous x-coordinate as an integer</span>
        <span class="pl-s1">bytestring</span> <span class="pl-c1">+=</span> <span class="pl-v">I2OSP</span>(<span class="pl-s1">x</span>, <span class="pl-s1">xLen</span> <span class="pl-c1">=</span> <span class="pl-c1">31</span>)[<span class="pl-c1">31</span> <span class="pl-c1">-</span> <span class="pl-s1">math</span>.<span class="pl-en">ceil</span>(<span class="pl-s1">math</span>.<span class="pl-en">log</span>(<span class="pl-s1">x</span>, <span class="pl-c1">256</span>)):<span class="pl-c1">-</span><span class="pl-c1">1</span>]
    <span class="pl-k">return</span> <span class="pl-s1">bytestring</span></pre></div>
<p dir="auto">Now suppose that you want to set up your public and private keys. So you pick a random
integer <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2103f85b8b1477f430fc407cad462224.svg"><img alt="$d$" src="/sj-simmons/crypto/raw/main/svgs/2103f85b8b1477f430fc407cad462224.svg" valign="0.0px" width="8.55596444999999pt" height="11.4155283pt" style="max-width: 100%;"></a> in the correct range and compute <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/894713f244d00d947e424a103ddd18d5.svg"><img alt="$P=dQ$" src="/sj-simmons/crypto/raw/main/svgs/894713f244d00d947e424a103ddd18d5.svg" valign="-3.1963503000000055px" width="56.30579129999998pt" height="14.611878599999999pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/1afcdb0f704394b16fe85fb40c45ca7a.svg"><img alt="$Q$" src="/sj-simmons/crypto/raw/main/svgs/1afcdb0f704394b16fe85fb40c45ca7a.svg" valign="-3.196350299999991px" width="12.99542474999999pt" height="14.42921205pt" style="max-width: 100%;"></a> is the point given above.
Suppose your private and public keys are:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d = 3469812482876690087314335241624281261831007771638194997373712235614648048611
P = d*Q"><pre><span class="pl-s1">d</span> <span class="pl-c1">=</span> <span class="pl-c1">3469812482876690087314335241624281261831007771638194997373712235614648048611</span>
<span class="pl-v">P</span> <span class="pl-c1">=</span> <span class="pl-s1">d</span><span class="pl-c1">*</span><span class="pl-v">Q</span></pre></div>
<h4 tabindex="-1" dir="auto"><a id="user-content-exercise-14" class="anchor" aria-hidden="true" href="#exercise-14"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exercise</h4>
<ol start="8" dir="auto">
<li>
<p dir="auto">Simmons used your public key and encrypted a short message. The ciphertext, which has the form of a tuple <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ceebe1422860f159268c7c9862862a1b.svg"><img alt="$(c_1, c_2)$" src="/sj-simmons/crypto/raw/main/svgs/ceebe1422860f159268c7c9862862a1b.svg" valign="-4.109589000000009px" width="49.067845199999994pt" height="16.438356pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/988584bba6844388f07ea45b7132f61c.svg"><img alt="$c_1$" src="/sj-simmons/crypto/raw/main/svgs/988584bba6844388f07ea45b7132f61c.svg" valign="-2.4657286499999893px" width="13.666351049999989pt" height="9.54335085pt" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e355414b8774603011922d600510b1df.svg"><img alt="$c_2$" src="/sj-simmons/crypto/raw/main/svgs/e355414b8774603011922d600510b1df.svg" valign="-2.4657286499999893px" width="13.666351049999989pt" height="9.54335085pt" style="max-width: 100%;"></a> are points on Wei25519, is below. For convenience when copy-and-pasting, the points are prefixed with <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg"><img alt="$E$" src="/sj-simmons/crypto/raw/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg" valign="0.0px" width="13.08219659999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> — meaning that we assume that you have instantiated Wei25519 and called it <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg"><img alt="$E$" src="/sj-simmons/crypto/raw/main/svgs/84df98c65d88c6adf15d4645ffa25e47.svg" valign="0.0px" width="13.08219659999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a>, as in the code-blocks above.</p>
<p dir="auto">Decrypt the message. Who spoke the famous line?</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(E(0x375357c574ba626305162a7ee1aea098d08115e3b1141ebcfdd7eb93a9f72a07, 0x64f481427dc5e13fa747a4f22c1f2a0498d5e67c834bff39578dd1fa758f730a), E(0x1ee406b7a7646a78472ab6e24fec10379c01c58fb53bb8fc27d0eb40fdea7c3e, 0x1722c75b3d91af25dee9001726aec64591274490b078672b05d745995cf3d032))"><pre>(<span class="pl-v">E</span>(<span class="pl-c1">0x375357c574ba626305162a7ee1aea098d08115e3b1141ebcfdd7eb93a9f72a07</span>, <span class="pl-c1">0x64f481427dc5e13fa747a4f22c1f2a0498d5e67c834bff39578dd1fa758f730a</span>), <span class="pl-v">E</span>(<span class="pl-c1">0x1ee406b7a7646a78472ab6e24fec10379c01c58fb53bb8fc27d0eb40fdea7c3e</span>, <span class="pl-c1">0x1722c75b3d91af25dee9001726aec64591274490b078672b05d745995cf3d032</span>))</pre></div>
</li>
<li>
<p dir="auto">Decrypt this longer ciphertext. Who spoke this line?</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ciphertexts = [
(E(0x68d782a5a79edccf10efee6b5a0ec16560b996d7ddabf63a0de51f74c65a157d, 0x50356f401b204eada9aa9b8005bcdf5b68fbd9e65e9492319c6ddcf2d745f6e0), E(0x1bc5ebc552fe7f58902b8328aae777ffbde1dee116d299c9213d30f244e4a239, 0x31f02136a24639d4893b9dca8a894e28870f574d34c643ab5dbc194733fc6ad6)),
(E(0x35e7f10995d0ee1dfe9086150f391b20b9cedaf45978312edfe54161962202a3, 0x647c09c244098d7b6927ecee3a456ac1bbf538635039d0cf9b02369ca89fb351), E(0x35ba40ed543d476e570ac7a056c74516726d4f3a33c30f2687945b7023556b88, 0x60af9045c1ebf29d1f0e8789ee6d2f561b112f7b6d647c242b027c0e176d9b85)),
(E(0x695523d8210f60f58fe16382e2125ee3071c205ba3491bcbbb963a9eb0281de2, 0x4d6c5cf2b4e193147b55a4a459b9acffa8d277c0431da19e3c941b701cc2c1d6), E(0x237693779ee491c5f74a601a9a0a4e6807242843b20170e0c571f830c0aad699, 0x604b0e666a3532fd363f9e46db7a7c1e58421d3f50f68a7bf7072f0407277614)),
(E(0x442f025ccf4e666184c91ad71138d541731d3a5374c2e166e4a9cce5073ef1d7, 0x15e6cb70ad250ca42356530de86efa71b78f1a218d9dcd9420f075268c3f708e), E(0x449203c6ac791a93e28aa41c011655e5cc7ac62c18bae94324ca18ca8dd7e5e0, 0x40b935335e5256ad00458e0bd5240cac9dd4967a7407e75e6a3533af27d726a2))]"><pre><span class="pl-s1">ciphertexts</span> <span class="pl-c1">=</span> [
(<span class="pl-v">E</span>(<span class="pl-c1">0x68d782a5a79edccf10efee6b5a0ec16560b996d7ddabf63a0de51f74c65a157d</span>, <span class="pl-c1">0x50356f401b204eada9aa9b8005bcdf5b68fbd9e65e9492319c6ddcf2d745f6e0</span>), <span class="pl-v">E</span>(<span class="pl-c1">0x1bc5ebc552fe7f58902b8328aae777ffbde1dee116d299c9213d30f244e4a239</span>, <span class="pl-c1">0x31f02136a24639d4893b9dca8a894e28870f574d34c643ab5dbc194733fc6ad6</span>)),
(<span class="pl-v">E</span>(<span class="pl-c1">0x35e7f10995d0ee1dfe9086150f391b20b9cedaf45978312edfe54161962202a3</span>, <span class="pl-c1">0x647c09c244098d7b6927ecee3a456ac1bbf538635039d0cf9b02369ca89fb351</span>), <span class="pl-v">E</span>(<span class="pl-c1">0x35ba40ed543d476e570ac7a056c74516726d4f3a33c30f2687945b7023556b88</span>, <span class="pl-c1">0x60af9045c1ebf29d1f0e8789ee6d2f561b112f7b6d647c242b027c0e176d9b85</span>)),
(<span class="pl-v">E</span>(<span class="pl-c1">0x695523d8210f60f58fe16382e2125ee3071c205ba3491bcbbb963a9eb0281de2</span>, <span class="pl-c1">0x4d6c5cf2b4e193147b55a4a459b9acffa8d277c0431da19e3c941b701cc2c1d6</span>), <span class="pl-v">E</span>(<span class="pl-c1">0x237693779ee491c5f74a601a9a0a4e6807242843b20170e0c571f830c0aad699</span>, <span class="pl-c1">0x604b0e666a3532fd363f9e46db7a7c1e58421d3f50f68a7bf7072f0407277614</span>)),
(<span class="pl-v">E</span>(<span class="pl-c1">0x442f025ccf4e666184c91ad71138d541731d3a5374c2e166e4a9cce5073ef1d7</span>, <span class="pl-c1">0x15e6cb70ad250ca42356530de86efa71b78f1a218d9dcd9420f075268c3f708e</span>), <span class="pl-v">E</span>(<span class="pl-c1">0x449203c6ac791a93e28aa41c011655e5cc7ac62c18bae94324ca18ca8dd7e5e0</span>, <span class="pl-c1">0x40b935335e5256ad00458e0bd5240cac9dd4967a7407e75e6a3533af27d726a2</span>))]</pre></div>
</li>
</ol>
<h3 tabindex="-1" dir="auto"><a id="user-content-diffie-hellman-key-exchange" class="anchor" aria-hidden="true" href="#diffie-hellman-key-exchange"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Diffie-Hellman key exchange</h3>
<p dir="auto">ElGamal encryption is a specialization of the following <em>key exchange</em> protocol.</p>
<p dir="auto">Suppose that you and Athena wish to establish a <em>shared secret key</em> using a line of communication
that is possibly insecure in that it may have eavesdroppers who can only observe (not modify)
transmissions.</p>
<p dir="auto">Let <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> be a group of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> with generator <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/be2451a0e7253f40d6336b30d3eca49a.svg"><img alt="$g.$" src="/sj-simmons/crypto/raw/main/svgs/be2451a0e7253f40d6336b30d3eca49a.svg" valign="-3.1963502999999895px" width="12.996581399999991pt" height="10.2739725pt" style="max-width: 100%;"></a>  You and Athena each set up public and private
keys as follows.  You choose a random <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/0c49e2e690aadce0fc4d00945caf7c4d.svg"><img alt="$a\in \mathbb{Z}/n;$" src="/sj-simmons/crypto/raw/main/svgs/0c49e2e690aadce0fc4d00945caf7c4d.svg" valign="-4.109589000000009px" width="62.39154239999999pt" height="16.438356pt" style="max-width: 100%;"></a> then <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg"><img alt="$a$" src="/sj-simmons/crypto/raw/main/svgs/44bc9d542a92714cac84e01cbbb7fd61.svg" valign="0.0px" width="8.68915409999999pt" height="7.0776222pt" style="max-width: 100%;"></a> is your private key and
your public key is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/13a7562d1e0f51292084b835036bf9dd.svg"><img alt="$g^a.$" src="/sj-simmons/crypto/raw/main/svgs/13a7562d1e0f51292084b835036bf9dd.svg" valign="-3.1963519500000044px" width="20.948876849999987pt" height="14.116037099999998pt" style="max-width: 100%;"></a> Similarly, Athena chooses uniformly at random <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2a7c236be636358545afe06183a618f6.svg"><img alt="$b\in \mathbb{Z}/n;$" src="/sj-simmons/crypto/raw/main/svgs/2a7c236be636358545afe06183a618f6.svg" valign="-4.109589000000009px" width="60.757184399999986pt" height="16.438356pt" style="max-width: 100%;"></a> her
private/public key pair is <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/cc825079e84124710ad0c311554f1f7a.svg"><img alt="$\{b, g^b\}.$" src="/sj-simmons/crypto/raw/main/svgs/cc825079e84124710ad0c311554f1f7a.svg" valign="-4.109588999999991px" width="50.39841344999999pt" height="18.06580875pt" style="max-width: 100%;"></a></p>
<p dir="auto">Next, you transmit your public key <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5b1447365598ecd30eec3006282607b7.svg"><img alt="$g^a$" src="/sj-simmons/crypto/raw/main/svgs/5b1447365598ecd30eec3006282607b7.svg" valign="-3.1963519500000044px" width="15.56074079999999pt" height="14.116037099999998pt" style="max-width: 100%;"></a> to Athena which she then raises to the power of her
private key, obtaining <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85fa5f353cd30d53d8229748a3e07598.svg"><img alt="$(g^a)^b.$" src="/sj-simmons/crypto/raw/main/svgs/85fa5f353cd30d53d8229748a3e07598.svg" valign="-4.109588999999991px" width="40.33704344999999pt" height="18.06580875pt" style="max-width: 100%;"></a> Similarly, Athena sends to you her public key <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ef0e2eae3a30e22f52a88ba4b6891d5e.svg"><img alt="$g^b$" src="/sj-simmons/crypto/raw/main/svgs/ef0e2eae3a30e22f52a88ba4b6891d5e.svg" valign="-3.1963519499999897px" width="14.211194249999991pt" height="17.1525717pt" style="max-width: 100%;"></a> which you
exponentiate using your private key obtaining, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85fa5f353cd30d53d8229748a3e07598.svg"><img alt="$(g^a)^b.$" src="/sj-simmons/crypto/raw/main/svgs/85fa5f353cd30d53d8229748a3e07598.svg" valign="-4.109588999999991px" width="40.33704344999999pt" height="18.06580875pt" style="max-width: 100%;"></a> Your and Athena's shared secret key is
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/7ee2d2f46de66d0d4bd3fdd5f52f4b89.svg"><img alt="$g^{ab}=(g^b)^a=(g^a)^b.$" src="/sj-simmons/crypto/raw/main/svgs/7ee2d2f46de66d0d4bd3fdd5f52f4b89.svg" valign="-4.109588999999991px" width="142.1065932pt" height="18.06580875pt" style="max-width: 100%;"></a></p>
<p dir="auto">Suppose that Athena needs to send you a private plaintext message, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg"><img alt="$m,$" src="/sj-simmons/crypto/raw/main/svgs/85e0696fc8ec9dcd16fd64c9f562ae0c.svg" valign="-3.1963502999999895px" width="18.99932429999999pt" height="10.2739725pt" style="max-width: 100%;"></a> encrypted using your
shared private key.  If she uses your public key <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5b1447365598ecd30eec3006282607b7.svg"><img alt="$g^a$" src="/sj-simmons/crypto/raw/main/svgs/5b1447365598ecd30eec3006282607b7.svg" valign="-3.1963519500000044px" width="15.56074079999999pt" height="14.116037099999998pt" style="max-width: 100%;"></a> and the shared key
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/2916b74052ea0728e3143cb914a0b4be.svg"><img alt="$g^{ab}$" src="/sj-simmons/crypto/raw/main/svgs/2916b74052ea0728e3143cb914a0b4be.svg" valign="-3.1963519499999897px" width="21.341576849999992pt" height="17.1525717pt" style="max-width: 100%;"></a> as follows, she is essentially using the previously discussed ElGamal encryption scheme.
The ciphertext that Athena sends to you is simply <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f5cb2b6a6f5600280d7f75ea05895a13.svg"><img alt="$c=g^{ab}m;$" src="/sj-simmons/crypto/raw/main/svgs/f5cb2b6a6f5600280d7f75ea05895a13.svg" valign="-3.1963519499999897px" width="70.19422739999999pt" height="17.1525717pt" style="max-width: 100%;"></a> you decrypt <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg"><img alt="$c$" src="/sj-simmons/crypto/raw/main/svgs/3e18a4a28fdee1744e5e3f79d13b9ff6.svg" valign="0.0px" width="7.11380504999999pt" height="7.0776222pt" style="max-width: 100%;"></a> using her public key
and your private key: <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/de07a8a69d8ec25d2a6e05eaf21cc452.svg"><img alt="$c (g^b)^{-a} = g^{ab} m (g^b)^{-a}=m.$" src="/sj-simmons/crypto/raw/main/svgs/de07a8a69d8ec25d2a6e05eaf21cc452.svg" valign="-4.109588999999991px" width="198.63459329999998pt" height="18.06580875pt" style="max-width: 100%;"></a></p>
<p dir="auto">To be clear, for the encryption scheme in the last paragraph to be non-deterministic — and,
hence, to have a chance of being CPA (chosen plaintext attack) secure — Athena needs to
regenerate her keys (and share her new public key with you) with every encryption, thereby recovering
exactly the probabilistic ElGamal protocol described in the last section.</p>
<p dir="auto">The probabilistic ElGamal Encryption system is in fact CPA (chosen plaintext attack) secure (see, e.g.,
<a href="#references3">Tsionus and Yung</a>) but is not CCA (chosen ciphertext attack) secure. The reason
is similar to that given in our <a href="#chosen-ciphertext-attack">discussion above</a> of the failure
of plain RSA to be CCA secure: given <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/e3698c9d184d8ceef54822cfb9d0092f.svg"><img alt="$(c_1^*, c_2^*)$" src="/sj-simmons/crypto/raw/main/svgs/e3698c9d184d8ceef54822cfb9d0092f.svg" valign="-4.109589000000009px" width="49.43310239999999pt" height="16.438356pt" style="max-width: 100%;"></a> an adversary blinds with
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/348d63b9337f7e6df5ac3e9845c8d679.svg"><img alt="$(c_1^*, c_2^*m')$" src="/sj-simmons/crypto/raw/main/svgs/348d63b9337f7e6df5ac3e9845c8d679.svg" valign="-4.109589px" width="68.47807724999998pt" height="16.4676534pt" style="max-width: 100%;"></a> where <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/4439a64f892991ab2d4ee89d0b8ebd5e.svg"><img alt="$m'\in (\mathbb{Z}/n)^*,$" src="/sj-simmons/crypto/raw/main/svgs/4439a64f892991ab2d4ee89d0b8ebd5e.svg" valign="-4.109589px" width="93.08988644999998pt" height="16.4676534pt" style="max-width: 100%;"></a> or even <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/845cf03db2826ccfcc0919d22ff0bd02.svg"><img alt="$(c_1^*g^{b'}, c_2^*m'(g^a)^{b'})$" src="/sj-simmons/crypto/raw/main/svgs/845cf03db2826ccfcc0919d22ff0bd02.svg" valign="-4.109589000000006px" width="128.17474395pt" height="19.6019175pt" style="max-width: 100%;"></a> where
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f0f4e1232f380220c653708090fb7cf8.svg"><img alt="$b'\in \mathbb{Z}/n.$" src="/sj-simmons/crypto/raw/main/svgs/f0f4e1232f380220c653708090fb7cf8.svg" valign="-4.109589px" width="65.36905979999999pt" height="16.4676534pt" style="max-width: 100%;"></a></p>
<p dir="auto">The security of the ElGamal protocol hinges on three number-theoretic assumptions
regarding computation hardness.</p>
<h3 tabindex="-1" dir="auto"><a id="user-content-digital-signing-with-elgamal" class="anchor" aria-hidden="true" href="#digital-signing-with-elgamal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Digital signing with ElGamal</h3>
<p dir="auto">Suppose now that Athena wants to sign her message to you that she encrypted with your public key
using the ElGamal encryption scheme discussed above using a cyclic group <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/5201385589993766eea584cd3aa6fa13.svg"><img alt="$G$" src="/sj-simmons/crypto/raw/main/svgs/5201385589993766eea584cd3aa6fa13.svg" valign="0.0px" width="12.92464304999999pt" height="11.232861749999998pt" style="max-width: 100%;"></a> of order <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg"><img alt="$n$" src="/sj-simmons/crypto/raw/main/svgs/55a049b8f161ae7cfeb0197d75aff967.svg" valign="0.0px" width="9.86687624999999pt" height="7.0776222pt" style="max-width: 100%;"></a> generated
by <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/be2451a0e7253f40d6336b30d3eca49a.svg"><img alt="$g.$" src="/sj-simmons/crypto/raw/main/svgs/be2451a0e7253f40d6336b30d3eca49a.svg" valign="-3.1963502999999895px" width="12.996581399999991pt" height="10.2739725pt" style="max-width: 100%;"></a></p>
<p dir="auto">Of course, to sign her message to you, Athena must first generate her own public/private key pair:</p>
<ul dir="auto">
<li>Athena picks uniformly at random an element <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/a770caebefe52c86b12bcf44e7f33d55.svg"><img alt="$d\in \mathbb{Z}/n,$" src="/sj-simmons/crypto/raw/main/svgs/a770caebefe52c86b12bcf44e7f33d55.svg" valign="-4.109589000000009px" width="62.258352749999986pt" height="16.438356pt" style="max-width: 100%;"></a> which is her private key; then she</li>
<li>computes <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/274af25ec94875fe82cf27e7982f4746.svg"><img alt="$h=g^d\in G,$" src="/sj-simmons/crypto/raw/main/svgs/274af25ec94875fe82cf27e7982f4746.svg" valign="-3.1963519499999897px" width="85.06610475pt" height="17.1525717pt" style="max-width: 100%;"></a> which is her public key.</li>
</ul>
<p dir="auto">To sign her message, Athena employs an agreed upon cryptographic hash function, <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/f0849a8c84fa1ad535549609018981ad.svg"><img alt="$h,$" src="/sj-simmons/crypto/raw/main/svgs/f0849a8c84fa1ad535549609018981ad.svg" valign="-3.1963503000000055px" width="14.037338699999989pt" height="14.611878599999999pt" style="max-width: 100%;"></a> as follows:</p>
<ul dir="auto">
<li>First, she chooses</li>
</ul>
<a id="user-content-references3">
</a><h4 tabindex="-1" dir="auto"><a></a><a id="user-content-references-2" class="anchor" aria-hidden="true" href="#references-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h4>
<ul dir="auto">
<li>N. Koblitz, <a href="https://www.ams.org/journals/mcom/1987-48-177/S0025-5718-1987-0866109-5/" rel="nofollow">Elliptic Curve Cryptosystems</a>, 1985.</li>
<li>Stuik's <a href="https://tools.ietf.org/id/draft-struik-lwip-curve-representations-00.html" rel="nofollow">Alternative Elliptic Curve Representations</a></li>
<li>J. Booher, <a href="https://www.math.canterbury.ac.nz/~j.booher/expos/sqr_qnr.pdf" rel="nofollow">Square roots in finite fields and quadratic nonresidues</a>, 2012.</li>
<li>J. Wu and D.R.Stinson, <a href="https://www.semanticscholar.org/paper/On-The-Security-of-The-ElGamal-Encryption-Scheme-Wu-Stinson/fb92027bd27198e6a8820aa56b9c83bb73c91e53" rel="nofollow">On The Security of The ElGamal Encryption Scheme and Damgard’s Variant</a>, 2008.</li>
<li>Y. Tsiounis and M. Yung, <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.367.681&amp;rep=rep1&amp;type=pdf" rel="nofollow">On the Security of ElGamal Based Encryption</a>, 1998.</li>
<li>Daniel J. Bernstein's <a href="https://cr.yp.to/talks/2008.06.20/slides.pdf" rel="nofollow">The elliptic-curve zoo</a> slides, 2008.</li>
<li><a href="https://safecurves.cr.yp.to/index.html" rel="nofollow">safecurves.cr.yp.to</a></li>
<li>Daniel J. Bernstein and Tanja Lange, <a href="https://eprint.iacr.org/2017/293.pdf" rel="nofollow">Montgomery curves and the Montgomery ladder</a></li>
<li>Craig Costello and Benjamin Smith, <a href="https://arxiv.org/pdf/1807.00972.pdf" rel="nofollow">Montgomery curves and their arithmetic</a></li>
</ul>
<p align="right" dir="auto">  <a href="#contents"> contents </a></p>
<p dir="auto"> </p>
<p align="center" dir="auto"> <g-emoji class="g-emoji" alias="stop_sign" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6d1.png">🛑</g-emoji> STOP <g-emoji class="g-emoji" alias="stop_sign" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6d1.png">🛑</g-emoji> </p>
<p dir="auto"> </p>
<hr>
<p align="center" dir="auto"> <g-emoji class="g-emoji" alias="construction" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png">🚧</g-emoji> BELOW IS CURRENTLY UNDER CONSTRUCTION <g-emoji class="g-emoji" alias="construction" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png">🚧</g-emoji> </p>
<h3 tabindex="-1" dir="auto"><a id="user-content-elliptic-curves" class="anchor" aria-hidden="true" href="#elliptic-curves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Elliptic Curves</h3>
<p dir="auto">For ECDSA, Bitcoin uses <a href="https://en.bitcoinwiki.org/wiki/Secp256k1" rel="nofollow">secp256k1</a> — which
refers the curve <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/ef8074c158e4356135b8122fb6068c03.svg"><img alt="$y^2=x^3+7$" src="/sj-simmons/crypto/raw/main/svgs/ef8074c158e4356135b8122fb6068c03.svg" valign="-3.1963503000000086px" width="83.02114589999998pt" height="16.5772266pt" style="max-width: 100%;"></a> over the primefield <a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg"><img alt="$\mathbb{Z}/p$" src="/sj-simmons/crypto/raw/main/svgs/73c9c321abfaf561fdbde1304ada12c1.svg" valign="-4.109589000000009px" width="27.448716899999987pt" height="16.438356pt" style="max-width: 100%;"></a> where
<a target="_blank" rel="noopener noreferrer" href="/sj-simmons/crypto/blob/main/svgs/aa8eafdca40e7443a9e647146f705d02.svg"><img alt="$p = 2^{256} - 2^{32} - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1$" src="/sj-simmons/crypto/raw/main/svgs/aa8eafdca40e7443a9e647146f705d02.svg" valign="-3.1963503000000086px" width="307.85905590000004pt" height="16.5772266pt" style="max-width: 100%;"></a> with parameters given on page 6
of <a href="http://www.secg.org/sec2-v2.pdf" rel="nofollow">SEC2-v2</a> from the Standards for Efficient Cryptography.</p>
<p dir="auto">We can use <strong>numlib</strong> to get our hands on this curve:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; import numlib as nl
&gt;&gt;&gt; p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
&gt;&gt;&gt; F = nl.Zmodp(p)
&gt;&gt;&gt; E = nl.EllCurve(0, F(7))
&gt;&gt;&gt; E
y^2 = x^3 + 7 over Z/115792089237316195423570985008687907853269984665640564039457584007908834671663"><pre>&gt;&gt;&gt; <span class="pl-k">import</span> numlib <span class="pl-k">as</span> nl
&gt;&gt;&gt; p <span class="pl-k">=</span> <span class="pl-c1"><span class="pl-k">0x</span>FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F</span>
&gt;&gt;&gt; F <span class="pl-k">=</span> nl.Zmodp(p)
&gt;&gt;&gt; E <span class="pl-k">=</span> nl.EllCurve(<span class="pl-c1">0</span>, F(<span class="pl-c1">7</span>))
&gt;&gt;&gt; E
y^2 = x^3 + 7 over Z/115792089237316195423570985008687907853269984665640564039457584007908834671663</pre></div>
<p dir="auto">Let us define the basepoint specified in <a href="http://www.secg.org/sec2-v2.pdf" rel="nofollow">SEC2-v2</a>:</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; G = E(0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)"><pre>&gt;&gt;&gt; G <span class="pl-k">=</span> E(<span class="pl-c1"><span class="pl-k">0x</span>79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798</span>, <span class="pl-c1"><span class="pl-k">0x</span>483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8</span>)</pre></div>
<p dir="auto">The order of <strong>G</strong> is large and also given in the specification.  Let us verify that G has the given
order.</p>
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; G_order = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141
&gt;&gt;&gt; G_order * G
[0: 1: 0]"><pre>&gt;&gt;&gt; G_order <span class="pl-k">=</span> <span class="pl-c1"><span class="pl-k">0x</span>FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span>
&gt;&gt;&gt; G_order <span class="pl-k">*</span> G
[0: 1: 0]</pre></div>

<h3 tabindex="-1" dir="auto"><a id="user-content-more-toolstutorials" class="anchor" aria-hidden="true" href="#more-toolstutorials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More Tools/tutorials</h3>
<h4 tabindex="-1" dir="auto"><a id="user-content-quick-start-on-making-basic-number-theoreticcryptography-computations-in-high-performance-python" class="anchor" aria-hidden="true" href="#quick-start-on-making-basic-number-theoreticcryptography-computations-in-high-performance-python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start on making basic number-theoretic/cryptography computations in high-performance Python</h4>
<ul dir="auto">
<li>Install the multi-precision library <a href="https://gmpy2.readthedocs.io/en/latest/intro.html" rel="nofollow">gmpy2</a>
in a Debian-like environment such as Ubuntu by issuing, at your commandline, the command
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo apt install gmpy2"><pre>sudo apt install gmpy2</pre></div>
</li>
<li>Then, if you say want to generate some large primes in Python:
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import gmpy2

randstate = gmpy2.random_state(1728)

def getprime(nbits):
    &quot;&quot;&quot; Return an n-bit prime of type mpz. &quot;&quot;&quot;
    return gmpy2.next_prime(gmpy2.mpz_rrandomb(randstate, nbits))"><pre><span class="pl-k">import</span> <span class="pl-s1">gmpy2</span>

<span class="pl-s1">randstate</span> <span class="pl-c1">=</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">random_state</span>(<span class="pl-c1">1728</span>)

<span class="pl-k">def</span> <span class="pl-en">getprime</span>(<span class="pl-s1">nbits</span>):
    <span class="pl-s">""" Return an n-bit prime of type mpz. """</span>
    <span class="pl-k">return</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">next_prime</span>(<span class="pl-s1">gmpy2</span>.<span class="pl-en">mpz_rrandomb</span>(<span class="pl-s1">randstate</span>, <span class="pl-s1">nbits</span>))</pre></div>
</li>
<li>Now suppose that we want to (naively) pick two large primes, set up an RSA
encryption scheme, and encode the message 98765432123456789.
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p, q = getprime(128), getprime(128)
n = p * q  # type mpz

phi = (p - 1) * (q - 1) # keep this secret

# find a (naive) encryption key
e = 1
while (e &lt; 2 or gmpy2.gcd(e, phi) != 1):
  e = gmpy2.mpz_random(randstate, phi) # type mpz

assert gmpy2.gcd(e, phi) == 1  # {n, e} is our public key

m = 98765432123456789 # our message

c = gmpy2.powmod(m, e, n) # m^e (mod n) our ciphertext (encrypted message)"><pre><span class="pl-s1">p</span>, <span class="pl-s1">q</span> <span class="pl-c1">=</span> <span class="pl-en">getprime</span>(<span class="pl-c1">128</span>), <span class="pl-en">getprime</span>(<span class="pl-c1">128</span>)
<span class="pl-s1">n</span> <span class="pl-c1">=</span> <span class="pl-s1">p</span> <span class="pl-c1">*</span> <span class="pl-s1">q</span>  <span class="pl-c"># type mpz</span>

<span class="pl-s1">phi</span> <span class="pl-c1">=</span> (<span class="pl-s1">p</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span>) <span class="pl-c1">*</span> (<span class="pl-s1">q</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span>) <span class="pl-c"># keep this secret</span>

<span class="pl-c"># find a (naive) encryption key</span>
<span class="pl-s1">e</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span>
<span class="pl-k">while</span> (<span class="pl-s1">e</span> <span class="pl-c1">&lt;</span> <span class="pl-c1">2</span> <span class="pl-c1">or</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">gcd</span>(<span class="pl-s1">e</span>, <span class="pl-s1">phi</span>) <span class="pl-c1">!=</span> <span class="pl-c1">1</span>):
  <span class="pl-s1">e</span> <span class="pl-c1">=</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">mpz_random</span>(<span class="pl-s1">randstate</span>, <span class="pl-s1">phi</span>) <span class="pl-c"># type mpz</span>

<span class="pl-k">assert</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">gcd</span>(<span class="pl-s1">e</span>, <span class="pl-s1">phi</span>) <span class="pl-c1">==</span> <span class="pl-c1">1</span>  <span class="pl-c"># {n, e} is our public key</span>

<span class="pl-s1">m</span> <span class="pl-c1">=</span> <span class="pl-c1">98765432123456789</span> <span class="pl-c"># our message</span>

<span class="pl-s1">c</span> <span class="pl-c1">=</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">powmod</span>(<span class="pl-s1">m</span>, <span class="pl-s1">e</span>, <span class="pl-s1">n</span>) <span class="pl-c"># m^e (mod n) our ciphertext (encrypted message)</span></pre></div>
</li>
<li>Lastly, let us check things by finding a deciphering key and decrypting the message.
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="_, d, _ = gmpy2.gcdext(e, phi) # d is our deciphering (private) key
d = gmpy2.t_mod(d, phi)  # we only need d modulo phi

# Note: the function gcdext used above applies the extended Euclidean algorithm;
# i.e., gcdext(e, phi) returns a triple of integers (gcd(d, phi), d, f) satisfying
#                    gcd(e, phi) = d * e + f * phi.
# Since gcd(e, phi) = 1, d is just the multiplicative inverse of e (modulo phi)

assert gmpy2.t_mod(d*e, phi) == 1

# Alternatively, one can compute d with
#                    d = gmpy2.inverse(e, phi)

print(gmpy2.powmod(c, d, n)) # c^d (mod n) = 98765432123456789"><pre><span class="pl-s1">_</span>, <span class="pl-s1">d</span>, <span class="pl-s1">_</span> <span class="pl-c1">=</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">gcdext</span>(<span class="pl-s1">e</span>, <span class="pl-s1">phi</span>) <span class="pl-c"># d is our deciphering (private) key</span>
<span class="pl-s1">d</span> <span class="pl-c1">=</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">t_mod</span>(<span class="pl-s1">d</span>, <span class="pl-s1">phi</span>)  <span class="pl-c"># we only need d modulo phi</span>

<span class="pl-c"># Note: the function gcdext used above applies the extended Euclidean algorithm;</span>
<span class="pl-c"># i.e., gcdext(e, phi) returns a triple of integers (gcd(d, phi), d, f) satisfying</span>
<span class="pl-c">#                    gcd(e, phi) = d * e + f * phi.</span>
<span class="pl-c"># Since gcd(e, phi) = 1, d is just the multiplicative inverse of e (modulo phi)</span>

<span class="pl-k">assert</span> <span class="pl-s1">gmpy2</span>.<span class="pl-en">t_mod</span>(<span class="pl-s1">d</span><span class="pl-c1">*</span><span class="pl-s1">e</span>, <span class="pl-s1">phi</span>) <span class="pl-c1">==</span> <span class="pl-c1">1</span>

<span class="pl-c"># Alternatively, one can compute d with</span>
<span class="pl-c">#                    d = gmpy2.inverse(e, phi)</span>

<span class="pl-en">print</span>(<span class="pl-s1">gmpy2</span>.<span class="pl-en">powmod</span>(<span class="pl-s1">c</span>, <span class="pl-s1">d</span>, <span class="pl-s1">n</span>)) <span class="pl-c"># c^d (mod n) = 98765432123456789</span></pre></div>
</li>
</ul>
<h4 tabindex="-1" dir="auto"><a id="user-content-use-simmons-numlib-to-instantiate-and-compute-in-python-in-a-finite-field-or-in-an-elliptic-curve-over-a-finite-field" class="anchor" aria-hidden="true" href="#use-simmons-numlib-to-instantiate-and-compute-in-python-in-a-finite-field-or-in-an-elliptic-curve-over-a-finite-field"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Simmons' <a href="https://github.com/sj-simmons/numlib">numlib</a> to instantiate and compute, in Python, in a finite field or in an elliptic curve over a finite field.</h4>
<ul dir="auto">
<li>First install the library by typing, at your commandline,
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pip install polylib --user
pip install numlib --user"><pre>pip install polylib --user
pip install numlib --user</pre></div>
</li>
<li>Then, you can create in Python a primefield (i.e., Z/pZ where p is a prime) of order say 2027:
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; import numlib as nl
&gt;&gt;&gt; PF = nl.Zmodp(2027)
&gt;&gt;&gt; PF  # Z/2027
&gt;&gt;&gt; x = PF(100)
&gt;&gt;&gt; x   # 100 + &lt;2027&gt;
&gt;&gt;&gt; x**1000  # 2022 + &lt;2027&gt;
&gt;&gt;&gt; x**-1  # 750 + &lt;2027&gt;"><pre>&gt;&gt;&gt; <span class="pl-k">import</span> numlib <span class="pl-k">as</span> nl
&gt;&gt;&gt; <span class="pl-c1">PF</span> <span class="pl-k">=</span> nl.Zmodp(<span class="pl-c1">2027</span>)
&gt;&gt;&gt; <span class="pl-c1">PF</span>  <span class="pl-c"><span class="pl-c">#</span> Z/2027</span>
&gt;&gt;&gt; x <span class="pl-k">=</span> PF(<span class="pl-c1">100</span>)
&gt;&gt;&gt; x   <span class="pl-c"><span class="pl-c">#</span> 100 + &lt;2027&gt;</span>
&gt;&gt;&gt; x<span class="pl-k">**</span><span class="pl-c1">1000</span>  <span class="pl-c"><span class="pl-c">#</span> 2022 + &lt;2027&gt;</span>
&gt;&gt;&gt; x<span class="pl-k">**-</span><span class="pl-c1">1</span>  <span class="pl-c"><span class="pl-c">#</span> 750 + &lt;2027&gt;</span></pre></div>
</li>
<li>Instantiate and work in a Galois field of order 7^3:
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; GF = nl.GaloisField(7, 3)
&gt;&gt;&gt; GF  # Z/7[t]/&lt;t^3+3t^2-3&gt;
&gt;&gt;&gt; t = GF.t()
&gt;&gt;&gt; t   # t + &lt;t^3+3t^2-3&gt;
&gt;&gt;&gt; t**1000  # -3t^2+3t+2 + &lt;t^3+3t^2-3&gt;
&gt;&gt;&gt; t**-1  # -2t^2+t + &lt;t^3+3t^2-3&gt;"><pre>&gt;&gt;&gt; <span class="pl-c1">GF</span> <span class="pl-k">=</span> nl.GaloisField(<span class="pl-c1">7</span>, <span class="pl-c1">3</span>)
&gt;&gt;&gt; <span class="pl-c1">GF</span>  <span class="pl-c"><span class="pl-c">#</span> Z/7[t]/&lt;t^3+3t^2-3&gt;</span>
&gt;&gt;&gt; t <span class="pl-k">=</span> <span class="pl-c1">GF</span>.t()
&gt;&gt;&gt; t   <span class="pl-c"><span class="pl-c">#</span> t + &lt;t^3+3t^2-3&gt;</span>
&gt;&gt;&gt; t<span class="pl-k">**</span><span class="pl-c1">1000</span>  <span class="pl-c"><span class="pl-c">#</span> -3t^2+3t+2 + &lt;t^3+3t^2-3&gt;</span>
&gt;&gt;&gt; t<span class="pl-k">**-</span><span class="pl-c1">1</span>  <span class="pl-c"><span class="pl-c">#</span> -2t^2+t + &lt;t^3+3t^2-3&gt;</span></pre></div>
</li>
<li>Work in an elliptic curve over the Galois field of order 7^3:
<div class="highlight highlight-text-python-console notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; E = nl.EllCurve(t**2+5*t+2,t-2)
&gt;&gt;&gt; E  # y^2 = x^3 + (t^2-2t+2)x + (t-2) over Z/7[t]/&lt;t^3+3t^2-3&gt;
&gt;&gt;&gt; E.j  # 3t^2+t+3
&gt;&gt;&gt; # Let us list a few point on this curve:
&gt;&gt;&gt; finite_points = list(nl.finite(E)) # nl.finite(E) is a generator
&gt;&gt;&gt; for point in finite_points:
...     print(point)
...
(-t^2-t-2, -3t^2-3t-3)
(-t^2-t-2, 3t^2+3t+3)
(2t^2-t+3, -2t^2-3t-3)
(2t^2-t+3, 2t^2+3t+3)
(3t+2, -3t-3)
     ...
&gt;&gt;&gt; len(finite_points)  # this curve has order 320 (including the point at infinity)
319
&gt;&gt;&gt; # Let's pick point and find its order
&gt;&gt;&gt; pt = finite_points[0]
&gt;&gt;&gt; pt  # (-t^2-t-2, -3t^2-3t-3) on y^2 = x^3 + (t^2-2t+2)x + (t-2) over Z/7[t]/&lt;t^3+3t^2-3&gt;
&gt;&gt;&gt; print(1000 * pt)  # (t^2+2t, 2t^2-3t-2)
&gt;&gt;&gt; print(-pt)  # (-t^2-t-2, 3t^2+3t+3)
&gt;&gt;&gt; nl.addorder(pt, exponent = 320)  # 160"><pre>&gt;&gt;&gt; E <span class="pl-k">=</span> nl.EllCurve(t<span class="pl-k">**</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">5</span><span class="pl-k">*</span>t<span class="pl-k">+</span><span class="pl-c1">2</span>,t<span class="pl-k">-</span><span class="pl-c1">2</span>)
&gt;&gt;&gt; E  <span class="pl-c"><span class="pl-c">#</span> y^2 = x^3 + (t^2-2t+2)x + (t-2) over Z/7[t]/&lt;t^3+3t^2-3&gt;</span>
&gt;&gt;&gt; E.j  <span class="pl-c"><span class="pl-c">#</span> 3t^2+t+3</span>
&gt;&gt;&gt; <span class="pl-c"><span class="pl-c">#</span> Let us list a few point on this curve:</span>
&gt;&gt;&gt; finite_points <span class="pl-k">=</span> <span class="pl-c1">list</span>(nl.finite(E)) <span class="pl-c"><span class="pl-c">#</span> nl.finite(E) is a generator</span>
&gt;&gt;&gt; <span class="pl-k">for</span> point <span class="pl-k">in</span> finite_points:
...     <span class="pl-c1">print</span>(point)
...
(-t^2-t-2, -3t^2-3t-3)
(-t^2-t-2, 3t^2+3t+3)
(2t^2-t+3, -2t^2-3t-3)
(2t^2-t+3, 2t^2+3t+3)
(3t+2, -3t-3)
     ...
&gt;&gt;&gt; <span class="pl-c1">len</span>(finite_points)  <span class="pl-c"><span class="pl-c">#</span> this curve has order 320 (including the point at infinity)</span>
319
&gt;&gt;&gt; <span class="pl-c"><span class="pl-c">#</span> Let's pick point and find its order</span>
&gt;&gt;&gt; pt <span class="pl-k">=</span> finite_points[<span class="pl-c1">0</span>]
&gt;&gt;&gt; pt  <span class="pl-c"><span class="pl-c">#</span> (-t^2-t-2, -3t^2-3t-3) on y^2 = x^3 + (t^2-2t+2)x + (t-2) over Z/7[t]/&lt;t^3+3t^2-3&gt;</span>
&gt;&gt;&gt; <span class="pl-c1">print</span>(<span class="pl-c1">1000</span> <span class="pl-k">*</span> pt)  <span class="pl-c"><span class="pl-c">#</span> (t^2+2t, 2t^2-3t-2)</span>
&gt;&gt;&gt; <span class="pl-c1">print</span>(<span class="pl-k">-</span>pt)  <span class="pl-c"><span class="pl-c">#</span> (-t^2-t-2, 3t^2+3t+3)</span>
&gt;&gt;&gt; nl.addorder(pt, <span class="pl-v">exponent</span> <span class="pl-k">=</span> <span class="pl-c1">320</span>)  <span class="pl-c"><span class="pl-c">#</span> 160</span></pre></div>
</li>
</ul>
<h4 tabindex="-1" dir="auto"><a id="user-content-install-and-use-sage-as-a-python-library" class="anchor" aria-hidden="true" href="#install-and-use-sage-as-a-python-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install and use Sage as a Python library</h4>
<p dir="auto">On a debian-like (again, including WSL):</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo apt install sagemath"><pre>sudo apt install sagemath</pre></div>
<h4 tabindex="-1" dir="auto"><a id="user-content-install-parigp-and-use-it-as-a-python-library" class="anchor" aria-hidden="true" href="#install-parigp-and-use-it-as-a-python-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install PARI/GP and use it as a Python library</h4>
<ul dir="auto">
<li>
<p dir="auto">First, one needs to install <a href="http://pari.math.u-bordeaux.fr/" rel="nofollow">pari-gp</a> (so that the
program <strong>gp</strong>) is in one's PATH.</p>
<p dir="auto">On a Debian-like system this is as easy as:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo apt install pari-gp"><pre>sudo apt install pari-gp</pre></div>
<p dir="auto">PARI includes its own interactive shell:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; gp -q
?"><pre><span class="pl-k">&gt;</span> gp -q
<span class="pl-k">?</span></pre></div>
<p dir="auto">For more, see the PARI/GP <a href="http://pari.math.u-bordeaux.fr/doc.html" rel="nofollow">documentation</a> and
<a href="http://pari.math.u-bordeaux.fr/tutorials.html" rel="nofollow">tutorials</a></p>
</li>
<li>
<p dir="auto">Then there's the python interface to PARI/GP. It's called
<a href="https://github.com/sagemath/cypari2">cypari2</a></p>
</li>
</ul>
<h3 tabindex="-1" dir="auto"><a id="user-content-more-resourcereferences" class="anchor" aria-hidden="true" href="#more-resourcereferences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More Resource/References</h3>
<h3 tabindex="-1" dir="auto"><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Resources</h3>
<ul dir="auto">
<li><a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/" rel="nofollow">A gentle intro to ECC</a></li>
<li><a href="https://www.keylength.com/" rel="nofollow">keylength.com</a></li>
</ul>
<h3 tabindex="-1" dir="auto"><a id="user-content-libraries" class="anchor" aria-hidden="true" href="#libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Libraries</h3>
<ul dir="auto">
<li><a href="https://en.wikipedia.org/wiki/Comparison_of_cryptography_libraries" rel="nofollow">Comparison of cryptography libraries</a></li>
</ul>
<h3 tabindex="-1" dir="auto"><a id="user-content-homomophic-encryption" class="anchor" aria-hidden="true" href="#homomophic-encryption"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="https://homomorphicencryption.org/introduction/" rel="nofollow">Homomophic encryption</a></h3>
<ul dir="auto">
<li><a href="https://homenc.github.io/HElib/documentation/Design_Document/HElib-design.pdf" rel="nofollow">HElib's design</a></li>
<li><a href="https://github.com/lducas/FHEW">FHEW</a></li>
<li><a href="https://github.com/facebookresearch/Cupcake">Cupcake</a> from FacebookResearch; Rust, implements
lattice-based homomophic encryption
<ul dir="auto">
<li><a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.400.6346&amp;rep=rep1&amp;type=pdf" rel="nofollow">Somewhat practicle homomorphic encryption</a></li>
</ul>
</li>
<li><a href="https://zama.ai/concrete/" rel="nofollow">zama</a></li>
<li>Google's <a href="https://github.com/google/fully-homomorphic-encryption">FHE</a></li>
</ul>
<h3 tabindex="-1" dir="auto"><a id="user-content-curves-related" class="anchor" aria-hidden="true" href="#curves-related"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Curves related</h3>
<ul dir="auto">
<li><a href="https://safecurves.cr.yp.to/index.html" rel="nofollow">Safecurves</a></li>
<li><a href="https://neuromancer.sk/std/" rel="nofollow">Standard Curve Database</a></li>
<li>[EdDSA]
<ul dir="auto">
<li><a href="https://datatracker.ietf.org/doc/html/rfc8032" rel="nofollow">RFC 8032</a></li>
<li><a href="https://eprint.iacr.org/2014/198.pdf" rel="nofollow">on a GPU</a></li>
</ul>
</li>
</ul>
<h4 tabindex="-1" dir="auto"><a id="user-content-cryptocurrencies" class="anchor" aria-hidden="true" href="#cryptocurrencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cryptocurrencies</h4>
<ul dir="auto">
<li>
<p dir="auto"><a href="http://ethanfast.com/top-crypto.html" rel="nofollow">Chart showing which coins use which flavors of cryptography and curves</a></p>
</li>
<li>
<p dir="auto">Literature</p>
<ul dir="auto">
<li><a href="https://arxiv.org/abs/2003.00001" rel="nofollow">The Mathematics of Bitcoin</a></li>
</ul>
</li>
</ul>
<h4 tabindex="-1" dir="auto"><a id="user-content-zero-knowledge" class="anchor" aria-hidden="true" href="#zero-knowledge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Zero knowledge</h4>
<ul dir="auto">
<li><a href="http://extropy.foundation/workshops/zkp/primer.html" rel="nofollow">math primer</a></li>
</ul>
<h4 tabindex="-1" dir="auto"><a id="user-content-more-literature" class="anchor" aria-hidden="true" href="#more-literature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More literature</h4>
<ul dir="auto">
<li><a href="https://evervault.com/papers" rel="nofollow">evervault.com/papers</a></li>
<li><a href="https://eprint.iacr.org/2017/351.pdf" rel="nofollow">Post-quantum RSA</a> 2017 paper by Bernstein, et al., that
estimates the size RSA keys necessary to subvert key attacks assuming Schor's algorithm deployed
on a viable quantum computer.  Answer (see Chapter 4): 1-terabyte keys built from 4096-bit primes.</li>
</ul>
<h3 tabindex="-1" dir="auto"><a id="user-content-more" class="anchor" aria-hidden="true" href="#more"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More</h3>
<ul dir="auto">
<li><a href="https://cryptol.net/" rel="nofollow">Cryptol</a> A DSL for cryptography that sits on top of Haskell.</li>
<li><a href="https://eprint.iacr.org/2016/1013" rel="nofollow">Theoretical description and formal security analysis of Signal's protocol</a></li>
<li><a href="https://cryptohack.org/" rel="nofollow">Cryptohack</a></li>
</ul>
</article>
          </div>
      </div>

  </readme-toc>


</div>
  <div data-view-component="true" class="Layout-sidebar">      

      <div class="BorderGrid BorderGrid--spacious" data-pjax>
        <div class="BorderGrid-row hide-sm hide-md">
          <div class="BorderGrid-cell">
            <h2 class="mb-3 h4">About</h2>

    <p class="f4 my-3">
      Resources for DU's Spring '23 Senior Seminar.
    </p>


    <h3 class="sr-only">Resources</h3>
    <div class="mt-2">
      <a class="Link--muted" data-analytics-event="{&quot;category&quot;:&quot;Repository Overview&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;location:sidebar;file:readme&quot;}" href="#readme">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-book mr-2">
    <path d="M0 1.75A.75.75 0 0 1 .75 1h4.253c1.227 0 2.317.59 3 1.501A3.743 3.743 0 0 1 11.006 1h4.245a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-4.507a2.25 2.25 0 0 0-1.591.659l-.622.621a.75.75 0 0 1-1.06 0l-.622-.621A2.25 2.25 0 0 0 5.258 13H.75a.75.75 0 0 1-.75-.75Zm7.251 10.324.004-5.073-.002-2.253A2.25 2.25 0 0 0 5.003 2.5H1.5v9h3.757a3.75 3.75 0 0 1 1.994.574ZM8.755 4.75l-.004 7.322a3.752 3.752 0 0 1 1.992-.572H14.5v-9h-3.495a2.25 2.25 0 0 0-2.25 2.25Z"></path>
</svg>
        Readme
</a>    </div>

  



<include-fragment  src="/sj-simmons/crypto/hovercards/citation/sidebar_partial?tree_name=main">
</include-fragment>



<h3 class="sr-only">Stars</h3>
<div class="mt-2">
  <a href="/sj-simmons/crypto/stargazers" data-view-component="true" class="Link--muted">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
    <strong>2</strong>
    stars
</a></div>

<h3 class="sr-only">Watchers</h3>
<div class="mt-2">
  <a href="/sj-simmons/crypto/watchers" data-view-component="true" class="Link--muted">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-eye mr-2">
    <path d="M8 2c1.981 0 3.671.992 4.933 2.078 1.27 1.091 2.187 2.345 2.637 3.023a1.62 1.62 0 0 1 0 1.798c-.45.678-1.367 1.932-2.637 3.023C11.67 13.008 9.981 14 8 14c-1.981 0-3.671-.992-4.933-2.078C1.797 10.83.88 9.576.43 8.898a1.62 1.62 0 0 1 0-1.798c.45-.677 1.367-1.931 2.637-3.022C4.33 2.992 6.019 2 8 2ZM1.679 7.932a.12.12 0 0 0 0 .136c.411.622 1.241 1.75 2.366 2.717C5.176 11.758 6.527 12.5 8 12.5c1.473 0 2.825-.742 3.955-1.715 1.124-.967 1.954-2.096 2.366-2.717a.12.12 0 0 0 0-.136c-.412-.621-1.242-1.75-2.366-2.717C10.824 4.242 9.473 3.5 8 3.5c-1.473 0-2.825.742-3.955 1.715-1.124.967-1.954 2.096-2.366 2.717ZM8 10a2 2 0 1 1-.001-3.999A2 2 0 0 1 8 10Z"></path>
</svg>
    <strong>1</strong>
    watching
</a></div>

<h3 class="sr-only">Forks</h3>
<div class="mt-2">
  <a href="/sj-simmons/crypto/forks" data-view-component="true" class="Link--muted">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-2">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>
    <strong>0</strong>
    forks
</a></div>

  <div class="mt-2">
    <a class="Link--muted" href="/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fsj-simmons%2Fcrypto&amp;report=sj-simmons+%28user%29">
        Report repository
</a>  </div>

          </div>
        </div>

        
        
            <div class="BorderGrid-row">
              <div class="BorderGrid-cell">
                <h2 class="h4 mb-3" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame">
  <a href="/sj-simmons/crypto/releases" data-view-component="true" class="Link--primary no-underline">
    Releases
</a></h2>

    <div class="text-small color-fg-muted">No releases published</div>

              </div>
            </div>

        
        
            <div class="BorderGrid-row">
              <div class="BorderGrid-cell">
                <h2 class="h4 mb-3">
  <a href="/users/sj-simmons/packages?repo_name=crypto" data-view-component="true" class="Link--primary no-underline">
    Packages <span title="0" hidden="hidden" data-view-component="true" class="Counter">0</span>
</a></h2>


      <div class="text-small color-fg-muted">
        No packages published <br>
      </div>



              </div>
            </div>

        
            <div class="BorderGrid-row" hidden>
              <div class="BorderGrid-cell">
                <include-fragment src="/sj-simmons/crypto/used_by_list" accept="text/fragment+html">
</include-fragment>
              </div>
            </div>

        
        
        
            <div class="BorderGrid-row">
              <div class="BorderGrid-cell">
                <h2 class="h4 mb-3">Languages</h2>
<div class="mb-2">
  <span data-view-component="true" class="Progress">
    <span style="background-color:#3572A5 !important;;width: 100.0%;" itemprop="keywords" aria-label="Python 100.0" data-view-component="true" class="Progress-item color-bg-success-emphasis"></span>
</span></div>
<ul class="list-style-none">
    <li class="d-inline">
        <a class="d-inline-flex flex-items-center flex-nowrap Link--secondary no-underline text-small mr-3" href="/sj-simmons/crypto/search?l=python"  data-ga-click="Repository, language stats search click, location:repo overview">
          <svg style="color:#3572A5;" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill mr-2">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
          <span class="color-fg-default text-bold mr-1">Python</span>
          <span>100.0%</span>
        </a>
    </li>
</ul>

              </div>
            </div>

              </div>
</div>
  
</div></div>

  </div>


  </div>

</turbo-frame>


    </main>
  </div>

  </div>

          <footer class="footer width-full container-xl p-responsive" role="contentinfo">
  <h2 class='sr-only'>Footer</h2>

  <div class="position-relative d-flex flex-items-center pb-2 f6 color-fg-muted border-top color-border-muted flex-column-reverse flex-lg-row flex-wrap flex-lg-nowrap mt-6 pt-6">
    <div class="list-style-none d-flex flex-wrap col-0 col-lg-2 flex-justify-start flex-lg-justify-between mb-2 mb-lg-0">
      <div class="mt-2 mt-lg-0 d-flex flex-items-center">
        <a aria-label="Homepage" title="GitHub" class="footer-octicon mr-2" href="https://github.com">
          <svg aria-hidden="true" height="24" viewBox="0 0 16 16" version="1.1" width="24" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"></path>
</svg>
</a>        <span>
        &copy; 2023 GitHub, Inc.
        </span>
      </div>
    </div>

    <nav aria-label='Footer' class="col-12 col-lg-8">
      <h3 class='sr-only' id='sr-footer-heading'>Footer navigation</h3>
      <ul class="list-style-none d-flex flex-wrap col-12 flex-justify-center flex-lg-justify-between mb-2 mb-lg-0" aria-labelledby='sr-footer-heading'>
          <li class="mr-3 mr-lg-0"><a href="https://docs.github.com/site-policy/github-terms/github-terms-of-service" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to terms&quot;,&quot;label&quot;:&quot;text:terms&quot;}">Terms</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://docs.github.com/site-policy/privacy-policies/github-privacy-statement" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to privacy&quot;,&quot;label&quot;:&quot;text:privacy&quot;}">Privacy</a></li>
          <li class="mr-3 mr-lg-0"><a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to security&quot;,&quot;label&quot;:&quot;text:security&quot;}" href="https://github.com/security">Security</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://www.githubstatus.com/" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to status&quot;,&quot;label&quot;:&quot;text:status&quot;}">Status</a></li>
          <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to help, text:Docs" href="https://docs.github.com">Docs</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://support.github.com?tags=dotcom-footer" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to contact&quot;,&quot;label&quot;:&quot;text:contact&quot;}">Contact GitHub</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://github.com/pricing" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to Pricing&quot;,&quot;label&quot;:&quot;text:Pricing&quot;}">Pricing</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://docs.github.com" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to api&quot;,&quot;label&quot;:&quot;text:api&quot;}">API</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://services.github.com" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to training&quot;,&quot;label&quot;:&quot;text:training&quot;}">Training</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://github.blog" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to blog&quot;,&quot;label&quot;:&quot;text:blog&quot;}">Blog</a></li>
          <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>
      </ul>
    </nav>
  </div>

  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 color-fg-muted"></span>
  </div>
</footer>




  <div id="ajax-error-message" class="ajax-error-message flash flash-error" hidden>
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    You can’t perform that action at this time.
  </div>

  <div class="js-stale-session-flash flash flash-warn flash-banner" hidden
    >
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <span class="js-stale-session-flash-signed-in" hidden>You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="js-stale-session-flash-signed-out" hidden>You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box color-shadow-large" style="width:360px;">
  </div>
</div>

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0 tooltipped-no-delay" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 tooltipped-no-delay d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div>

    <div id="js-global-screen-reader-notice" class="sr-only" aria-live="polite" ></div>
  </body>
</html>

